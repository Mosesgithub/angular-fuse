if (typeof window === "undefined") {window = global;}
if (typeof window["webpackJsonp"]) {webpackJsonp = window.webpackJsonp;}

webpackJsonp([1],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(298);
	__webpack_require__(299);
	__webpack_require__(512);
	__webpack_require__(112);
	__webpack_require__(181);
	var core = __webpack_require__(1);
	__webpack_require__(218);
	__webpack_require__(242);
	__webpack_require__(513);
	window.ng = { core: core };
	window.ag = __webpack_require__(514);
	__webpack_require__(515);
	__webpack_require__(529);
	__webpack_require__(531);
	__webpack_require__(533);
	__webpack_require__(535);


/***/ },
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */
/***/ function(module, exports) {

	/**
	 @license
	Copyright 2014-2015 Google, Inc. http://angularjs.org
	
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	   http://www.apache.org/licenses/LICENSE-2.0
	
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	
	 */
	
	(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	(function (global){
	'use strict';
	
	var core = require('../core');
	var microtask = require('../microtask');
	var browserPatch = require('../patch/browser');
	var es6Promise = require('es6-promise');
	
	if (global.Zone) {
	  console.warn('Zone already exported on window the object!');
	}
	
	global.Zone = microtask.addMicrotaskSupport(core.Zone);
	global.zone = new global.Zone();
	
	// Monkey patch the Promise implementation to add support for microtasks
	global.Promise = es6Promise.Promise;
	
	browserPatch.apply();
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../core":2,"../microtask":4,"../patch/browser":5,"es6-promise":17}],2:[function(require,module,exports){
	(function (global){
	'use strict';
	
	var keys = require('./keys');
	
	function Zone(parentZone, data) {
	  var zone = (arguments.length) ? Object.create(parentZone) : this;
	
	  zone.parent = parentZone || null;
	
	  Object.keys(data || {}).forEach(function(property) {
	
	    var _property = property.substr(1);
	
	    // augment the new zone with a hook decorates the parent's hook
	    if (property[0] === '$') {
	      zone[_property] = data[property](parentZone[_property] || function () {});
	
	    // augment the new zone with a hook that runs after the parent's hook
	    } else if (property[0] === '+') {
	      if (parentZone[_property]) {
	        zone[_property] = function () {
	          var result = parentZone[_property].apply(this, arguments);
	          data[property].apply(this, arguments);
	          return result;
	        };
	      } else {
	        zone[_property] = data[property];
	      }
	
	    // augment the new zone with a hook that runs before the parent's hook
	    } else if (property[0] === '-') {
	      if (parentZone[_property]) {
	        zone[_property] = function () {
	          data[property].apply(this, arguments);
	          return parentZone[_property].apply(this, arguments);
	        };
	      } else {
	        zone[_property] = data[property];
	      }
	
	    // set the new zone's hook (replacing the parent zone's)
	    } else {
	      zone[property] = (typeof data[property] === 'object') ?
	                        JSON.parse(JSON.stringify(data[property])) :
	                        data[property];
	    }
	  });
	
	  zone.$id = Zone.nextId++;
	
	  return zone;
	}
	
	Zone.prototype = {
	  constructor: Zone,
	
	  fork: function (locals) {
	    this.onZoneCreated();
	    return new Zone(this, locals);
	  },
	
	  bind: function (fn, skipEnqueue) {
	    if (typeof fn !== 'function') {
	      throw new Error('Expecting function got: ' + fn);
	    }
	    skipEnqueue || this.enqueueTask(fn);
	    var zone = this.isRootZone() ? this : this.fork();
	    return function zoneBoundFn() {
	      return zone.run(fn, this, arguments);
	    };
	  },
	
	  bindOnce: function (fn) {
	    var boundZone = this;
	    return this.bind(function () {
	      var result = fn.apply(this, arguments);
	      boundZone.dequeueTask(fn);
	      return result;
	    });
	  },
	
	  isRootZone: function() {
	    return this.parent === null;
	  },
	
	  run: function run (fn, applyTo, applyWith) {
	    applyWith = applyWith || [];
	
	    var oldZone = global.zone;
	
	    // MAKE THIS ZONE THE CURRENT ZONE
	    global.zone = this;
	
	    try {
	      this.beforeTask();
	      return fn.apply(applyTo, applyWith);
	    } catch (e) {
	      if (this.onError) {
	        this.onError(e);
	      } else {
	        throw e;
	      }
	    } finally {
	      this.afterTask();
	      // REVERT THE CURRENT ZONE BACK TO THE ORIGINAL ZONE
	      global.zone = oldZone;
	    }
	  },
	
	  // onError is used to override error handling.
	  // When a custom error handler is provided, it should most probably rethrow the exception
	  // not to break the expected control flow:
	  //
	  // `promise.then(fnThatThrows).catch(fn);`
	  //
	  // When this code is executed in a zone with a custom onError handler that doesn't rethrow, the
	  // `.catch()` branch will not be taken as the `fnThatThrows` exception will be swallowed by the
	  // handler.
	  onError: null,
	  beforeTask: function () {},
	  onZoneCreated: function () {},
	  afterTask: function () {},
	  enqueueTask: function () {},
	  dequeueTask: function () {},
	  addEventListener: function () {
	    return this[keys.common.addEventListener].apply(this, arguments);
	  },
	  removeEventListener: function () {
	    return this[keys.common.removeEventListener].apply(this, arguments);
	  }
	};
	
	// Root zone ID === 1
	Zone.nextId = 1;
	
	Zone.bindPromiseFn = require('./patch/promise').bindPromiseFn;
	
	module.exports = {
	  Zone: Zone
	};
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./keys":3,"./patch/promise":12}],3:[function(require,module,exports){
	/**
	 * Creates keys for `private` properties on exposed objects to minimize interactions with other codebases.
	 */
	
	function create(name) {
	  // `Symbol` implementation is broken in Chrome 39.0.2171, do not use them even if they are available
	  return '_zone$' + name;
	}
	
	var commonKeys = {
	  addEventListener: create('addEventListener'),
	  removeEventListener: create('removeEventListener')
	};
	
	module.exports = {
	  create: create,
	  common: commonKeys
	};
	
	},{}],4:[function(require,module,exports){
	(function (global){
	'use strict';
	
	// TODO(vicb): Create a benchmark for the different methods & the usage of the queue
	// see https://github.com/angular/zone.js/issues/97
	
	// It is required to initialize hasNativePromise before requiring es6-promise otherwise es6-promise would
	// overwrite the native Promise implementation on v8 and the check would always return false.
	// see https://github.com/jakearchibald/es6-promise/issues/140
	var hasNativePromise = typeof Promise !== "undefined" &&
	    Promise.toString().indexOf("[native code]") !== -1;
	
	var isFirefox = global.navigator &&
	    global.navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
	
	var resolvedPromise;
	
	// TODO(vicb): remove '!isFirefox' when the bug gets fixed:
	// https://bugzilla.mozilla.org/show_bug.cgi?id=1162013
	if (hasNativePromise && !isFirefox) {
	  // When available use a native Promise to schedule microtasks.
	  // When not available, es6-promise fallback will be used
	  resolvedPromise = Promise.resolve();
	}
	
	var es6Promise = require('es6-promise').Promise;
	
	if (resolvedPromise) {
	  es6Promise._setScheduler(function(fn) {
	    resolvedPromise.then(fn);
	  });
	}
	
	// es6-promise asap should schedule microtasks via zone.scheduleMicrotask so that any
	// user defined hooks are triggered
	es6Promise._setAsap(function(fn, arg) {
	  global.zone.scheduleMicrotask(function() {
	    fn(arg);
	  });
	});
	
	// The default implementation of scheduleMicrotask use the original es6-promise implementation
	// to schedule a microtask
	function scheduleMicrotask(fn) {
	  es6Promise._asap(this.bind(fn));
	}
	
	function addMicrotaskSupport(zoneClass) {
	  zoneClass.prototype.scheduleMicrotask = scheduleMicrotask;
	  return zoneClass;
	}
	
	module.exports = {
	  addMicrotaskSupport: addMicrotaskSupport
	};
	
	
	
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"es6-promise":17}],5:[function(require,module,exports){
	(function (global){
	'use strict';
	
	var fnPatch = require('./functions');
	var promisePatch = require('./promise');
	var mutationObserverPatch = require('./mutation-observer');
	var definePropertyPatch = require('./define-property');
	var registerElementPatch = require('./register-element');
	var webSocketPatch = require('./websocket');
	var eventTargetPatch = require('./event-target');
	var propertyDescriptorPatch = require('./property-descriptor');
	var geolocationPatch = require('./geolocation');
	var fileReaderPatch = require('./file-reader');
	
	function apply() {
	  fnPatch.patchSetClearFunction(global, [
	    'timeout',
	    'interval',
	    'immediate'
	  ]);
	
	  fnPatch.patchRequestAnimationFrame(global, [
	    'requestAnimationFrame',
	    'mozRequestAnimationFrame',
	    'webkitRequestAnimationFrame'
	  ]);
	
	  fnPatch.patchFunction(global, [
	    'alert',
	    'prompt'
	  ]);
	
	  eventTargetPatch.apply();
	
	  propertyDescriptorPatch.apply();
	
	  promisePatch.apply();
	
	  mutationObserverPatch.patchClass('MutationObserver');
	  mutationObserverPatch.patchClass('WebKitMutationObserver');
	
	  definePropertyPatch.apply();
	
	  registerElementPatch.apply();
	
	  geolocationPatch.apply();
	
	  fileReaderPatch.apply();
	}
	
	module.exports = {
	  apply: apply
	};
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./define-property":6,"./event-target":7,"./file-reader":8,"./functions":9,"./geolocation":10,"./mutation-observer":11,"./promise":12,"./property-descriptor":13,"./register-element":14,"./websocket":15}],6:[function(require,module,exports){
	'use strict';
	
	var keys = require('../keys');
	
	// might need similar for object.freeze
	// i regret nothing
	
	var _defineProperty = Object.defineProperty;
	var _getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var _create = Object.create;
	var unconfigurablesKey = keys.create('unconfigurables');
	
	function apply() {
	  Object.defineProperty = function (obj, prop, desc) {
	    if (isUnconfigurable(obj, prop)) {
	      throw new TypeError('Cannot assign to read only property \'' + prop + '\' of ' + obj);
	    }
	    if (prop !== 'prototype') {
	      desc = rewriteDescriptor(obj, prop, desc);
	    }
	    return _defineProperty(obj, prop, desc);
	  };
	
	  Object.defineProperties = function (obj, props) {
	    Object.keys(props).forEach(function (prop) {
	      Object.defineProperty(obj, prop, props[prop]);
	    });
	    return obj;
	  };
	
	  Object.create = function (obj, proto) {
	    if (typeof proto === 'object') {
	      Object.keys(proto).forEach(function (prop) {
	        proto[prop] = rewriteDescriptor(obj, prop, proto[prop]);
	      });
	    }
	    return _create(obj, proto);
	  };
	
	  Object.getOwnPropertyDescriptor = function (obj, prop) {
	    var desc = _getOwnPropertyDescriptor(obj, prop);
	    if (isUnconfigurable(obj, prop)) {
	      desc.configurable = false;
	    }
	    return desc;
	  };
	};
	
	function _redefineProperty(obj, prop, desc) {
	  desc = rewriteDescriptor(obj, prop, desc);
	  return _defineProperty(obj, prop, desc);
	};
	
	function isUnconfigurable (obj, prop) {
	  return obj && obj[unconfigurablesKey] && obj[unconfigurablesKey][prop];
	}
	
	function rewriteDescriptor (obj, prop, desc) {
	  desc.configurable = true;
	  if (!desc.configurable) {
	    if (!obj[unconfigurablesKey]) {
	      _defineProperty(obj, unconfigurablesKey, { writable: true, value: {} });
	    }
	    obj[unconfigurablesKey][prop] = true;
	  }
	  return desc;
	}
	
	module.exports = {
	  apply: apply,
	  _redefineProperty: _redefineProperty
	};
	
	
	
	},{"../keys":3}],7:[function(require,module,exports){
	(function (global){
	'use strict';
	
	var utils = require('../utils');
	
	function apply() {
	  // patched properties depend on addEventListener, so this needs to come first
	  if (global.EventTarget) {
	    utils.patchEventTargetMethods(global.EventTarget.prototype);
	
	  // Note: EventTarget is not available in all browsers,
	  // if it's not available, we instead patch the APIs in the IDL that inherit from EventTarget
	  } else {
	    var apis = [
	      'ApplicationCache',
	      'EventSource',
	      'FileReader',
	      'InputMethodContext',
	      'MediaController',
	      'MessagePort',
	      'Node',
	      'Performance',
	      'SVGElementInstance',
	      'SharedWorker',
	      'TextTrack',
	      'TextTrackCue',
	      'TextTrackList',
	      'WebKitNamedFlow',
	      'Worker',
	      'WorkerGlobalScope',
	      'XMLHttpRequest',
	      'XMLHttpRequestEventTarget',
	      'XMLHttpRequestUpload'
	    ];
	
	    apis.forEach(function(api) {
	      var proto = global[api] && global[api].prototype;
	
	      // Some browsers e.g. Android 4.3's don't actually implement
	      // the EventTarget methods for all of these e.g. FileReader.
	      // In this case, there is nothing to patch.
	      if (proto && proto.addEventListener) {
	        utils.patchEventTargetMethods(proto);
	      }
	    });
	
	    // Patch the methods on `window` instead of `Window.prototype`
	    // `Window` is not accessible on Android 4.3
	    if (typeof(window) !== 'undefined') {
	      utils.patchEventTargetMethods(window);
	    }
	  }
	}
	
	module.exports = {
	  apply: apply
	};
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../utils":16}],8:[function(require,module,exports){
	'use strict';
	
	var utils = require('../utils');
	
	function apply() {
	  utils.patchClass('FileReader');
	}
	
	module.exports = {
	  apply: apply
	};
	},{"../utils":16}],9:[function(require,module,exports){
	(function (global){
	'use strict';
	
	var utils = require('../utils');
	
	function patchSetClearFunction(obj, fnNames) {
	  fnNames.map(function (name) {
	    return name[0].toUpperCase() + name.substr(1);
	  }).forEach(function (name) {
	    var setName = 'set' + name;
	    var delegate = obj[setName];
	
	    if (delegate) {
	      var clearName = 'clear' + name;
	      var ids = {};
	
	      var bindArgs = setName === 'setInterval' ? utils.bindArguments : utils.bindArgumentsOnce;
	
	      global.zone[setName] = function (fn) {
	        var id, fnRef = fn;
	        arguments[0] = function () {
	          delete ids[id];
	          return fnRef.apply(this, arguments);
	        };
	        var args = bindArgs(arguments);
	        id = delegate.apply(obj, args);
	        ids[id] = true;
	        return id;
	      };
	
	      obj[setName] = function () {
	        return global.zone[setName].apply(this, arguments);
	      };
	
	      var clearDelegate = obj[clearName];
	
	      global.zone[clearName] = function (id) {
	        if (ids[id]) {
	          delete ids[id];
	          global.zone.dequeueTask();
	        }
	        return clearDelegate.apply(this, arguments);
	      };
	
	      obj[clearName] = function () {
	        return global.zone[clearName].apply(this, arguments);
	      };
	    }
	  });
	};
	
	
	/**
	 * requestAnimationFrame is typically recursively called from within the callback function
	 * that it executes.  To handle this case, only fork a zone if this is executed
	 * within the root zone.
	 */
	function patchRequestAnimationFrame(obj, fnNames) {
	  fnNames.forEach(function (name) {
	    var delegate = obj[name];
	    if (delegate) {
	      global.zone[name] = function (fn) {
	        var callZone = global.zone.isRootZone() ? global.zone.fork() : global.zone;
	        if (fn) {
	          arguments[0] = function () {
	            return callZone.run(fn, this, arguments);
	          };
	        }
	        return delegate.apply(obj, arguments);
	      };
	
	      obj[name] = function () {
	        return global.zone[name].apply(this, arguments);
	      };
	    }
	  });
	};
	
	function patchSetFunction(obj, fnNames) {
	  fnNames.forEach(function (name) {
	    var delegate = obj[name];
	
	    if (delegate) {
	      global.zone[name] = function (fn) {
	        arguments[0] = function () {
	          return fn.apply(this, arguments);
	        };
	        var args = utils.bindArgumentsOnce(arguments);
	        return delegate.apply(obj, args);
	      };
	
	      obj[name] = function () {
	        return zone[name].apply(this, arguments);
	      };
	    }
	  });
	};
	
	function patchFunction(obj, fnNames) {
	  fnNames.forEach(function (name) {
	    var delegate = obj[name];
	    global.zone[name] = function () {
	      return delegate.apply(obj, arguments);
	    };
	
	    obj[name] = function () {
	      return global.zone[name].apply(this, arguments);
	    };
	  });
	};
	
	
	module.exports = {
	  patchSetClearFunction: patchSetClearFunction,
	  patchSetFunction: patchSetFunction,
	  patchRequestAnimationFrame: patchRequestAnimationFrame,
	  patchFunction: patchFunction
	};
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../utils":16}],10:[function(require,module,exports){
	(function (global){
	'use strict';
	
	var utils = require('../utils');
	
	function apply() {
	  if (global.navigator && global.navigator.geolocation) {
	    utils.patchPrototype(global.navigator.geolocation, [
	      'getCurrentPosition',
	      'watchPosition'
	    ]);
	  }
	}
	
	module.exports = {
	  apply: apply
	}
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../utils":16}],11:[function(require,module,exports){
	(function (global){
	'use strict';
	
	var keys = require('../keys');
	
	var originalInstanceKey = keys.create('originalInstance');
	var creationZoneKey = keys.create('creationZone');
	var isActiveKey = keys.create('isActive');
	
	// wrap some native API on `window`
	function patchClass(className) {
	  var OriginalClass = global[className];
	  if (!OriginalClass) return;
	
	  global[className] = function (fn) {
	    this[originalInstanceKey] = new OriginalClass(global.zone.bind(fn, true));
	    // Remember where the class was instantiate to execute the enqueueTask and dequeueTask hooks
	    this[creationZoneKey] = global.zone;
	  };
	
	  var instance = new OriginalClass(function () {});
	
	  global[className].prototype.disconnect = function () {
	    var result = this[originalInstanceKey].disconnect.apply(this[originalInstanceKey], arguments);
	    if (this[isActiveKey]) {
	      this[creationZoneKey].dequeueTask();
	      this[isActiveKey] = false;
	    }
	    return result;
	  };
	
	  global[className].prototype.observe = function () {
	    if (!this[isActiveKey]) {
	      this[creationZoneKey].enqueueTask();
	      this[isActiveKey] = true;
	    }
	    return this[originalInstanceKey].observe.apply(this[originalInstanceKey], arguments);
	  };
	
	  var prop;
	  for (prop in instance) {
	    (function (prop) {
	      if (typeof global[className].prototype !== 'undefined') {
	        return;
	      }
	      if (typeof instance[prop] === 'function') {
	        global[className].prototype[prop] = function () {
	          return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
	        };
	      } else {
	        Object.defineProperty(global[className].prototype, prop, {
	          set: function (fn) {
	            if (typeof fn === 'function') {
	              this[originalInstanceKey][prop] = global.zone.bind(fn);
	            } else {
	              this[originalInstanceKey][prop] = fn;
	            }
	          },
	          get: function () {
	            return this[originalInstanceKey][prop];
	          }
	        });
	      }
	    }(prop));
	  }
	};
	
	module.exports = {
	  patchClass: patchClass
	};
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../keys":3}],12:[function(require,module,exports){
	(function (global){
	'use strict';
	
	var utils = require('../utils');
	
	/*
	 * Patches a function that returns a Promise-like instance.
	 *
	 * This function must be used when either:
	 * - Native Promises are not available,
	 * - The function returns a Promise-like object.
	 *
	 * This is required because zones rely on a Promise monkey patch that could not be applied when
	 * Promise is not natively available or when the returned object is not an instance of Promise.
	 *
	 * Note that calling `bindPromiseFn` on a function that returns a native Promise will also work
	 * with minimal overhead.
	 *
	 * ```
	 * var boundFunction = bindPromiseFn(FunctionReturningAPromise);
	 *
	 * boundFunction.then(successHandler, errorHandler);
	 * ```
	 */
	var bindPromiseFn;
	
	if (global.Promise) {
	  bindPromiseFn = function (delegate) {
	    return function() {
	      var delegatePromise = delegate.apply(this, arguments);
	
	      // if the delegate returned an instance of Promise, forward it.
	      if (delegatePromise instanceof Promise) {
	        return delegatePromise;
	      }
	
	      // Otherwise wrap the Promise-like in a global Promise
	      return new Promise(function(resolve, reject) {
	        delegatePromise.then(resolve, reject);
	      });
	    };
	  };
	} else {
	  bindPromiseFn = function (delegate) {
	    return function () {
	      return _patchThenable(delegate.apply(this, arguments));
	    };
	  };
	}
	
	
	function _patchPromiseFnsOnObject(objectPath, fnNames) {
	  var obj = global;
	
	  var exists = objectPath.every(function (segment) {
	    obj = obj[segment];
	    return obj;
	  });
	
	  if (!exists) {
	    return;
	  }
	
	  fnNames.forEach(function (name) {
	    var fn = obj[name];
	    if (fn) {
	      obj[name] = bindPromiseFn(fn);
	    }
	  });
	}
	
	function _patchThenable(thenable) {
	  var then = thenable.then;
	  thenable.then = function () {
	    var args = utils.bindArguments(arguments);
	    var nextThenable = then.apply(thenable, args);
	    return _patchThenable(nextThenable);
	  };
	
	  var ocatch = thenable.catch;
	  thenable.catch = function () {
	    var args = utils.bindArguments(arguments);
	    var nextThenable = ocatch.apply(thenable, args);
	    return _patchThenable(nextThenable);
	  };
	
	  return thenable;
	}
	
	
	function apply() {
	  // Patch .then() and .catch() on native Promises to execute callbacks in the zone where
	  // those functions are called.
	  if (global.Promise) {
	    utils.patchPrototype(Promise.prototype, [
	      'then',
	      'catch'
	    ]);
	
	    // Patch browser APIs that return a Promise
	    var patchFns = [
	      // fetch
	      [[], ['fetch']],
	      [['Response', 'prototype'], ['arrayBuffer', 'blob', 'json', 'text']]
	    ];
	
	    patchFns.forEach(function(objPathAndFns) {
	      _patchPromiseFnsOnObject(objPathAndFns[0], objPathAndFns[1]);
	    });
	  }
	}
	
	module.exports = {
	  apply: apply,
	  bindPromiseFn: bindPromiseFn
	};
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../utils":16}],13:[function(require,module,exports){
	(function (global){
	'use strict';
	
	var webSocketPatch = require('./websocket');
	var utils = require('../utils');
	var keys = require('../keys');
	
	var eventNames = 'copy cut paste abort blur focus canplay canplaythrough change click contextmenu dblclick drag dragend dragenter dragleave dragover dragstart drop durationchange emptied ended input invalid keydown keypress keyup load loadeddata loadedmetadata loadstart message mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup pause play playing progress ratechange reset scroll seeked seeking select show stalled submit suspend timeupdate volumechange waiting mozfullscreenchange mozfullscreenerror mozpointerlockchange mozpointerlockerror error webglcontextrestored webglcontextlost webglcontextcreationerror'.split(' ');
	
	function apply() {
	  if (utils.isWebWorker()){
	    // on WebWorker so don't apply patch
	    return;
	  }
	
	  var supportsWebSocket = typeof WebSocket !== 'undefined';
	  if (canPatchViaPropertyDescriptor()) {
	    // for browsers that we can patch the descriptor:  Chrome & Firefox
	    var onEventNames = eventNames.map(function (property) {
	      return 'on' + property;
	    });
	    utils.patchProperties(HTMLElement.prototype, onEventNames);
	    utils.patchProperties(XMLHttpRequest.prototype);
	    if (supportsWebSocket) {
	      utils.patchProperties(WebSocket.prototype);
	    }
	  } else {
	    // Safari, Android browsers (Jelly Bean)
	    patchViaCapturingAllTheEvents();
	    utils.patchClass('XMLHttpRequest');
	    if (supportsWebSocket) {
	      webSocketPatch.apply();
	    }
	  }
	}
	
	function canPatchViaPropertyDescriptor() {
	  if (!Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'onclick') && typeof Element !== 'undefined') {
	    // WebKit https://bugs.webkit.org/show_bug.cgi?id=134364
	    // IDL interface attributes are not configurable
	    var desc = Object.getOwnPropertyDescriptor(Element.prototype, 'onclick');
	    if (desc && !desc.configurable) return false;
	  }
	
	  Object.defineProperty(HTMLElement.prototype, 'onclick', {
	    get: function () {
	      return true;
	    }
	  });
	  var elt = document.createElement('div');
	  var result = !!elt.onclick;
	  Object.defineProperty(HTMLElement.prototype, 'onclick', {});
	  return result;
	};
	
	var unboundKey = keys.create('unbound');
	
	// Whenever any event fires, we check the event target and all parents
	// for `onwhatever` properties and replace them with zone-bound functions
	// - Chrome (for now)
	function patchViaCapturingAllTheEvents() {
	  eventNames.forEach(function (property) {
	    var onproperty = 'on' + property;
	    document.addEventListener(property, function (event) {
	      var elt = event.target, bound;
	      while (elt) {
	        if (elt[onproperty] && !elt[onproperty][unboundKey]) {
	          bound = global.zone.bind(elt[onproperty]);
	          bound[unboundKey] = elt[onproperty];
	          elt[onproperty] = bound;
	        }
	        elt = elt.parentElement;
	      }
	    }, true);
	  });
	};
	
	module.exports = {
	  apply: apply
	};
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../keys":3,"../utils":16,"./websocket":15}],14:[function(require,module,exports){
	(function (global){
	'use strict';
	
	var _redefineProperty = require('./define-property')._redefineProperty;
	var utils = require("../utils");
	
	function apply() {
	  if (utils.isWebWorker() || !('registerElement' in global.document)) {
	    return;
	  }
	
	  var _registerElement = document.registerElement;
	  var callbacks = [
	    'createdCallback',
	    'attachedCallback',
	    'detachedCallback',
	    'attributeChangedCallback'
	  ];
	
	  document.registerElement = function (name, opts) {
	    if (opts && opts.prototype) {
	      callbacks.forEach(function (callback) {
	        if (opts.prototype.hasOwnProperty(callback)) {
	          var descriptor = Object.getOwnPropertyDescriptor(opts.prototype, callback);
	          if (descriptor && descriptor.value) {
	            descriptor.value = global.zone.bind(descriptor.value);
	            _redefineProperty(opts.prototype, callback, descriptor);
	          } else {
	            opts.prototype[callback] = global.zone.bind(opts.prototype[callback]);
	          }
	        } else if (opts.prototype[callback]) {
	          opts.prototype[callback] = global.zone.bind(opts.prototype[callback]);
	        }
	      });
	    }
	
	    return _registerElement.apply(document, [name, opts]);
	  };
	}
	
	module.exports = {
	  apply: apply
	};
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../utils":16,"./define-property":6}],15:[function(require,module,exports){
	(function (global){
	'use strict';
	
	var utils = require('../utils');
	
	// we have to patch the instance since the proto is non-configurable
	function apply() {
	  var WS = global.WebSocket;
	  utils.patchEventTargetMethods(WS.prototype);
	  global.WebSocket = function(a, b) {
	    var socket = arguments.length > 1 ? new WS(a, b) : new WS(a);
	    var proxySocket;
	
	    // Safari 7.0 has non-configurable own 'onmessage' and friends properties on the socket instance
	    var onmessageDesc = Object.getOwnPropertyDescriptor(socket, 'onmessage');
	    if (onmessageDesc && onmessageDesc.configurable === false) {
	      proxySocket = Object.create(socket);
	      ['addEventListener', 'removeEventListener', 'send', 'close'].forEach(function(propName) {
	        proxySocket[propName] = function() {
	          return socket[propName].apply(socket, arguments);
	        };
	      });
	    } else {
	      // we can patch the real socket
	      proxySocket = socket;
	    }
	
	    utils.patchProperties(proxySocket, ['onclose', 'onerror', 'onmessage', 'onopen']);
	
	    return proxySocket;
	  };
	}
	
	module.exports = {
	  apply: apply
	};
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../utils":16}],16:[function(require,module,exports){
	(function (global){
	'use strict';
	
	var keys = require('./keys');
	
	function bindArguments(args) {
	  for (var i = args.length - 1; i >= 0; i--) {
	    if (typeof args[i] === 'function') {
	      args[i] = global.zone.bind(args[i]);
	    }
	  }
	  return args;
	};
	
	function bindArgumentsOnce(args) {
	  for (var i = args.length - 1; i >= 0; i--) {
	    if (typeof args[i] === 'function') {
	      args[i] = global.zone.bindOnce(args[i]);
	    }
	  }
	  return args;
	};
	
	function patchPrototype(obj, fnNames) {
	  fnNames.forEach(function (name) {
	    var delegate = obj[name];
	    if (delegate) {
	      obj[name] = function () {
	        return delegate.apply(this, bindArguments(arguments));
	      };
	    }
	  });
	};
	
	function isWebWorker() {
	  return (typeof document === "undefined");
	}
	
	function patchProperty(obj, prop) {
	  var desc = Object.getOwnPropertyDescriptor(obj, prop) || {
	    enumerable: true,
	    configurable: true
	  };
	
	  // A property descriptor cannot have getter/setter and be writable
	  // deleting the writable and value properties avoids this error:
	  //
	  // TypeError: property descriptors must not specify a value or be writable when a
	  // getter or setter has been specified
	  delete desc.writable;
	  delete desc.value;
	
	  // substr(2) cuz 'onclick' -> 'click', etc
	  var eventName = prop.substr(2);
	  var _prop = '_' + prop;
	
	  desc.set = function (fn) {
	    if (this[_prop]) {
	      this.removeEventListener(eventName, this[_prop]);
	    }
	
	    if (typeof fn === 'function') {
	      this[_prop] = fn;
	      this.addEventListener(eventName, fn, false);
	    } else {
	      this[_prop] = null;
	    }
	  };
	
	  desc.get = function () {
	    return this[_prop];
	  };
	
	  Object.defineProperty(obj, prop, desc);
	};
	
	function patchProperties(obj, properties) {
	  (properties || (function () {
	      var props = [];
	      for (var prop in obj) {
	        props.push(prop);
	      }
	      return props;
	    }()).
	    filter(function (propertyName) {
	      return propertyName.substr(0,2) === 'on';
	    })).
	    forEach(function (eventName) {
	      patchProperty(obj, eventName);
	    });
	};
	
	var originalFnKey = keys.create('originalFn');
	var boundFnsKey = keys.create('boundFns');
	
	function patchEventTargetMethods(obj) {
	  // This is required for the addEventListener hook on the root zone.
	  obj[keys.common.addEventListener] = obj.addEventListener;
	  obj.addEventListener = function (eventName, handler, useCapturing) {
	    //Ignore special listeners of IE11 & Edge dev tools, see https://github.com/angular/zone.js/issues/150
	    if (handler && handler.toString() !== "[object FunctionWrapper]") {
	      var eventType = eventName + (useCapturing ? '$capturing' : '$bubbling');
	      var fn;
	      if (handler.handleEvent) {
	        // Have to pass in 'handler' reference as an argument here, otherwise it gets clobbered in
	        // IE9 by the arguments[1] assignment at end of this function.
	        fn = (function(handler) {
	          return function() {
	            handler.handleEvent.apply(handler, arguments);
	          };
	        })(handler);
	      } else {
	        fn = handler;
	      }
	
	      handler[originalFnKey] = fn;
	      handler[boundFnsKey] = handler[boundFnsKey] || {};
	      handler[boundFnsKey][eventType] = handler[boundFnsKey][eventType] || zone.bind(fn);
	      arguments[1] = handler[boundFnsKey][eventType];
	    }
	
	    // - Inside a Web Worker, `this` is undefined, the context is `global` (= `self`)
	    // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	    // see https://github.com/angular/zone.js/issues/190
	    var target = this || global;
	    return global.zone.addEventListener.apply(target, arguments);
	  };
	
	  // This is required for the removeEventListener hook on the root zone.
	  obj[keys.common.removeEventListener] = obj.removeEventListener;
	  obj.removeEventListener = function (eventName, handler, useCapturing) {
	    var eventType = eventName + (useCapturing ? '$capturing' : '$bubbling');
	    if (handler && handler[boundFnsKey] && handler[boundFnsKey][eventType]) {
	      var _bound = handler[boundFnsKey];
	      arguments[1] = _bound[eventType];
	      delete _bound[eventType];
	      global.zone.dequeueTask(handler[originalFnKey]);
	    }
	
	    // - Inside a Web Worker, `this` is undefined, the context is `global`
	    // - When `addEventListener` is called on the global context in strict mode, `this` is undefined
	    // see https://github.com/angular/zone.js/issues/190
	    var target = this || global;
	    var result = global.zone.removeEventListener.apply(target, arguments);
	    return result;
	  };
	};
	
	var originalInstanceKey = keys.create('originalInstance');
	
	// wrap some native API on `window`
	function patchClass(className) {
	  var OriginalClass = global[className];
	  if (!OriginalClass) return;
	
	  global[className] = function () {
	    var a = bindArguments(arguments);
	    switch (a.length) {
	      case 0: this[originalInstanceKey] = new OriginalClass(); break;
	      case 1: this[originalInstanceKey] = new OriginalClass(a[0]); break;
	      case 2: this[originalInstanceKey] = new OriginalClass(a[0], a[1]); break;
	      case 3: this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2]); break;
	      case 4: this[originalInstanceKey] = new OriginalClass(a[0], a[1], a[2], a[3]); break;
	      default: throw new Error('what are you even doing?');
	    }
	  };
	
	  var instance = new OriginalClass();
	
	  var prop;
	  for (prop in instance) {
	    (function (prop) {
	      if (typeof instance[prop] === 'function') {
	        global[className].prototype[prop] = function () {
	          return this[originalInstanceKey][prop].apply(this[originalInstanceKey], arguments);
	        };
	      } else {
	        Object.defineProperty(global[className].prototype, prop, {
	          set: function (fn) {
	            if (typeof fn === 'function') {
	              this[originalInstanceKey][prop] = global.zone.bind(fn);
	            } else {
	              this[originalInstanceKey][prop] = fn;
	            }
	          },
	          get: function () {
	            return this[originalInstanceKey][prop];
	          }
	        });
	      }
	    }(prop));
	  }
	
	  for (prop in OriginalClass) {
	    if (prop !== 'prototype' && OriginalClass.hasOwnProperty(prop)) {
	      global[className][prop] = OriginalClass[prop];
	    }
	  }
	};
	
	module.exports = {
	  bindArguments: bindArguments,
	  bindArgumentsOnce: bindArgumentsOnce,
	  patchPrototype: patchPrototype,
	  patchProperty: patchProperty,
	  patchProperties: patchProperties,
	  patchEventTargetMethods: patchEventTargetMethods,
	  patchClass: patchClass,
	  isWebWorker: isWebWorker
	};
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"./keys":3}],17:[function(require,module,exports){
	(function (process,global){
	/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
	 * @version   3.0.2
	 */
	
	(function() {
	    "use strict";
	    function lib$es6$promise$utils$$objectOrFunction(x) {
	      return typeof x === 'function' || (typeof x === 'object' && x !== null);
	    }
	
	    function lib$es6$promise$utils$$isFunction(x) {
	      return typeof x === 'function';
	    }
	
	    function lib$es6$promise$utils$$isMaybeThenable(x) {
	      return typeof x === 'object' && x !== null;
	    }
	
	    var lib$es6$promise$utils$$_isArray;
	    if (!Array.isArray) {
	      lib$es6$promise$utils$$_isArray = function (x) {
	        return Object.prototype.toString.call(x) === '[object Array]';
	      };
	    } else {
	      lib$es6$promise$utils$$_isArray = Array.isArray;
	    }
	
	    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
	    var lib$es6$promise$asap$$len = 0;
	    var lib$es6$promise$asap$$toString = {}.toString;
	    var lib$es6$promise$asap$$vertxNext;
	    var lib$es6$promise$asap$$customSchedulerFn;
	
	    var lib$es6$promise$asap$$asap = function asap(callback, arg) {
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
	      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
	      lib$es6$promise$asap$$len += 2;
	      if (lib$es6$promise$asap$$len === 2) {
	        // If len is 2, that means that we need to schedule an async flush.
	        // If additional callbacks are queued before the queue is flushed, they
	        // will be processed by this flush that we are scheduling.
	        if (lib$es6$promise$asap$$customSchedulerFn) {
	          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);
	        } else {
	          lib$es6$promise$asap$$scheduleFlush();
	        }
	      }
	    }
	
	    function lib$es6$promise$asap$$setScheduler(scheduleFn) {
	      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;
	    }
	
	    function lib$es6$promise$asap$$setAsap(asapFn) {
	      lib$es6$promise$asap$$asap = asapFn;
	    }
	
	    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;
	    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
	    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
	    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
	
	    // test for web worker but not in IE10
	    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&
	      typeof importScripts !== 'undefined' &&
	      typeof MessageChannel !== 'undefined';
	
	    // node
	    function lib$es6$promise$asap$$useNextTick() {
	      // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	      // see https://github.com/cujojs/when/issues/410 for details
	      return function() {
	        process.nextTick(lib$es6$promise$asap$$flush);
	      };
	    }
	
	    // vertx
	    function lib$es6$promise$asap$$useVertxTimer() {
	      return function() {
	        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
	      };
	    }
	
	    function lib$es6$promise$asap$$useMutationObserver() {
	      var iterations = 0;
	      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
	      var node = document.createTextNode('');
	      observer.observe(node, { characterData: true });
	
	      return function() {
	        node.data = (iterations = ++iterations % 2);
	      };
	    }
	
	    // web worker
	    function lib$es6$promise$asap$$useMessageChannel() {
	      var channel = new MessageChannel();
	      channel.port1.onmessage = lib$es6$promise$asap$$flush;
	      return function () {
	        channel.port2.postMessage(0);
	      };
	    }
	
	    function lib$es6$promise$asap$$useSetTimeout() {
	      return function() {
	        setTimeout(lib$es6$promise$asap$$flush, 1);
	      };
	    }
	
	    var lib$es6$promise$asap$$queue = new Array(1000);
	    function lib$es6$promise$asap$$flush() {
	      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {
	        var callback = lib$es6$promise$asap$$queue[i];
	        var arg = lib$es6$promise$asap$$queue[i+1];
	
	        callback(arg);
	
	        lib$es6$promise$asap$$queue[i] = undefined;
	        lib$es6$promise$asap$$queue[i+1] = undefined;
	      }
	
	      lib$es6$promise$asap$$len = 0;
	    }
	
	    function lib$es6$promise$asap$$attemptVertx() {
	      try {
	        var r = require;
	        var vertx = r('vertx');
	        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
	        return lib$es6$promise$asap$$useVertxTimer();
	      } catch(e) {
	        return lib$es6$promise$asap$$useSetTimeout();
	      }
	    }
	
	    var lib$es6$promise$asap$$scheduleFlush;
	    // Decide what async method to use to triggering processing of queued callbacks:
	    if (lib$es6$promise$asap$$isNode) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
	    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
	    } else if (lib$es6$promise$asap$$isWorker) {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
	    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();
	    } else {
	      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
	    }
	
	    function lib$es6$promise$$internal$$noop() {}
	
	    var lib$es6$promise$$internal$$PENDING   = void 0;
	    var lib$es6$promise$$internal$$FULFILLED = 1;
	    var lib$es6$promise$$internal$$REJECTED  = 2;
	
	    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();
	
	    function lib$es6$promise$$internal$$selfFulfillment() {
	      return new TypeError("You cannot resolve a promise with itself");
	    }
	
	    function lib$es6$promise$$internal$$cannotReturnOwn() {
	      return new TypeError('A promises callback cannot return that same promise.');
	    }
	
	    function lib$es6$promise$$internal$$getThen(promise) {
	      try {
	        return promise.then;
	      } catch(error) {
	        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
	        return lib$es6$promise$$internal$$GET_THEN_ERROR;
	      }
	    }
	
	    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	      try {
	        then.call(value, fulfillmentHandler, rejectionHandler);
	      } catch(e) {
	        return e;
	      }
	    }
	
	    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
	       lib$es6$promise$asap$$asap(function(promise) {
	        var sealed = false;
	        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {
	          if (sealed) { return; }
	          sealed = true;
	          if (thenable !== value) {
	            lib$es6$promise$$internal$$resolve(promise, value);
	          } else {
	            lib$es6$promise$$internal$$fulfill(promise, value);
	          }
	        }, function(reason) {
	          if (sealed) { return; }
	          sealed = true;
	
	          lib$es6$promise$$internal$$reject(promise, reason);
	        }, 'Settle: ' + (promise._label || ' unknown promise'));
	
	        if (!sealed && error) {
	          sealed = true;
	          lib$es6$promise$$internal$$reject(promise, error);
	        }
	      }, promise);
	    }
	
	    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
	      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, thenable._result);
	      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, thenable._result);
	      } else {
	        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      }
	    }
	
	    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
	      if (maybeThenable.constructor === promise.constructor) {
	        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
	      } else {
	        var then = lib$es6$promise$$internal$$getThen(maybeThenable);
	
	        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
	        } else if (then === undefined) {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        } else if (lib$es6$promise$utils$$isFunction(then)) {
	          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
	        } else {
	          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
	        }
	      }
	    }
	
	    function lib$es6$promise$$internal$$resolve(promise, value) {
	      if (promise === value) {
	        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());
	      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
	        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
	      } else {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      }
	    }
	
	    function lib$es6$promise$$internal$$publishRejection(promise) {
	      if (promise._onerror) {
	        promise._onerror(promise._result);
	      }
	
	      lib$es6$promise$$internal$$publish(promise);
	    }
	
	    function lib$es6$promise$$internal$$fulfill(promise, value) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
	
	      promise._result = value;
	      promise._state = lib$es6$promise$$internal$$FULFILLED;
	
	      if (promise._subscribers.length !== 0) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);
	      }
	    }
	
	    function lib$es6$promise$$internal$$reject(promise, reason) {
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }
	      promise._state = lib$es6$promise$$internal$$REJECTED;
	      promise._result = reason;
	
	      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);
	    }
	
	    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
	      var subscribers = parent._subscribers;
	      var length = subscribers.length;
	
	      parent._onerror = null;
	
	      subscribers[length] = child;
	      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
	      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;
	
	      if (length === 0 && parent._state) {
	        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);
	      }
	    }
	
	    function lib$es6$promise$$internal$$publish(promise) {
	      var subscribers = promise._subscribers;
	      var settled = promise._state;
	
	      if (subscribers.length === 0) { return; }
	
	      var child, callback, detail = promise._result;
	
	      for (var i = 0; i < subscribers.length; i += 3) {
	        child = subscribers[i];
	        callback = subscribers[i + settled];
	
	        if (child) {
	          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
	        } else {
	          callback(detail);
	        }
	      }
	
	      promise._subscribers.length = 0;
	    }
	
	    function lib$es6$promise$$internal$$ErrorObject() {
	      this.error = null;
	    }
	
	    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();
	
	    function lib$es6$promise$$internal$$tryCatch(callback, detail) {
	      try {
	        return callback(detail);
	      } catch(e) {
	        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
	        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
	      }
	    }
	
	    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
	      var hasCallback = lib$es6$promise$utils$$isFunction(callback),
	          value, error, succeeded, failed;
	
	      if (hasCallback) {
	        value = lib$es6$promise$$internal$$tryCatch(callback, detail);
	
	        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
	          failed = true;
	          error = value.error;
	          value = null;
	        } else {
	          succeeded = true;
	        }
	
	        if (promise === value) {
	          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
	          return;
	        }
	
	      } else {
	        value = detail;
	        succeeded = true;
	      }
	
	      if (promise._state !== lib$es6$promise$$internal$$PENDING) {
	        // noop
	      } else if (hasCallback && succeeded) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      } else if (failed) {
	        lib$es6$promise$$internal$$reject(promise, error);
	      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
	        lib$es6$promise$$internal$$fulfill(promise, value);
	      } else if (settled === lib$es6$promise$$internal$$REJECTED) {
	        lib$es6$promise$$internal$$reject(promise, value);
	      }
	    }
	
	    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
	      try {
	        resolver(function resolvePromise(value){
	          lib$es6$promise$$internal$$resolve(promise, value);
	        }, function rejectPromise(reason) {
	          lib$es6$promise$$internal$$reject(promise, reason);
	        });
	      } catch(e) {
	        lib$es6$promise$$internal$$reject(promise, e);
	      }
	    }
	
	    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
	      var enumerator = this;
	
	      enumerator._instanceConstructor = Constructor;
	      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);
	
	      if (enumerator._validateInput(input)) {
	        enumerator._input     = input;
	        enumerator.length     = input.length;
	        enumerator._remaining = input.length;
	
	        enumerator._init();
	
	        if (enumerator.length === 0) {
	          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	        } else {
	          enumerator.length = enumerator.length || 0;
	          enumerator._enumerate();
	          if (enumerator._remaining === 0) {
	            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
	          }
	        }
	      } else {
	        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
	      }
	    }
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {
	      return lib$es6$promise$utils$$isArray(input);
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {
	      return new Error('Array Methods must be provided an Array');
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {
	      this._result = new Array(this.length);
	    };
	
	    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {
	      var enumerator = this;
	
	      var length  = enumerator.length;
	      var promise = enumerator.promise;
	      var input   = enumerator._input;
	
	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        enumerator._eachEntry(input[i], i);
	      }
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {
	      var enumerator = this;
	      var c = enumerator._instanceConstructor;
	
	      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
	        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
	          entry._onerror = null;
	          enumerator._settledAt(entry._state, i, entry._result);
	        } else {
	          enumerator._willSettleAt(c.resolve(entry), i);
	        }
	      } else {
	        enumerator._remaining--;
	        enumerator._result[i] = entry;
	      }
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {
	      var enumerator = this;
	      var promise = enumerator.promise;
	
	      if (promise._state === lib$es6$promise$$internal$$PENDING) {
	        enumerator._remaining--;
	
	        if (state === lib$es6$promise$$internal$$REJECTED) {
	          lib$es6$promise$$internal$$reject(promise, value);
	        } else {
	          enumerator._result[i] = value;
	        }
	      }
	
	      if (enumerator._remaining === 0) {
	        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
	      }
	    };
	
	    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {
	      var enumerator = this;
	
	      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {
	        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
	      }, function(reason) {
	        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
	      });
	    };
	    function lib$es6$promise$promise$all$$all(entries) {
	      return new lib$es6$promise$enumerator$$default(this, entries).promise;
	    }
	    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
	    function lib$es6$promise$promise$race$$race(entries) {
	      /*jshint validthis:true */
	      var Constructor = this;
	
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	
	      if (!lib$es6$promise$utils$$isArray(entries)) {
	        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
	        return promise;
	      }
	
	      var length = entries.length;
	
	      function onFulfillment(value) {
	        lib$es6$promise$$internal$$resolve(promise, value);
	      }
	
	      function onRejection(reason) {
	        lib$es6$promise$$internal$$reject(promise, reason);
	      }
	
	      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
	        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
	      }
	
	      return promise;
	    }
	    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
	    function lib$es6$promise$promise$resolve$$resolve(object) {
	      /*jshint validthis:true */
	      var Constructor = this;
	
	      if (object && typeof object === 'object' && object.constructor === Constructor) {
	        return object;
	      }
	
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$resolve(promise, object);
	      return promise;
	    }
	    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
	    function lib$es6$promise$promise$reject$$reject(reason) {
	      /*jshint validthis:true */
	      var Constructor = this;
	      var promise = new Constructor(lib$es6$promise$$internal$$noop);
	      lib$es6$promise$$internal$$reject(promise, reason);
	      return promise;
	    }
	    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;
	
	    var lib$es6$promise$promise$$counter = 0;
	
	    function lib$es6$promise$promise$$needsResolver() {
	      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	    }
	
	    function lib$es6$promise$promise$$needsNew() {
	      throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	    }
	
	    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
	    /**
	      Promise objects represent the eventual result of an asynchronous operation. The
	      primary way of interacting with a promise is through its `then` method, which
	      registers callbacks to receive either a promise's eventual value or the reason
	      why the promise cannot be fulfilled.
	
	      Terminology
	      -----------
	
	      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	      - `thenable` is an object or function that defines a `then` method.
	      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	      - `exception` is a value that is thrown using the throw statement.
	      - `reason` is a value that indicates why a promise was rejected.
	      - `settled` the final resting state of a promise, fulfilled or rejected.
	
	      A promise can be in one of three states: pending, fulfilled, or rejected.
	
	      Promises that are fulfilled have a fulfillment value and are in the fulfilled
	      state.  Promises that are rejected have a rejection reason and are in the
	      rejected state.  A fulfillment value is never a thenable.
	
	      Promises can also be said to *resolve* a value.  If this value is also a
	      promise, then the original promise's settled state will match the value's
	      settled state.  So a promise that *resolves* a promise that rejects will
	      itself reject, and a promise that *resolves* a promise that fulfills will
	      itself fulfill.
	
	
	      Basic Usage:
	      ------------
	
	      ```js
	      var promise = new Promise(function(resolve, reject) {
	        // on success
	        resolve(value);
	
	        // on failure
	        reject(reason);
	      });
	
	      promise.then(function(value) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```
	
	      Advanced Usage:
	      ---------------
	
	      Promises shine when abstracting away asynchronous interactions such as
	      `XMLHttpRequest`s.
	
	      ```js
	      function getJSON(url) {
	        return new Promise(function(resolve, reject){
	          var xhr = new XMLHttpRequest();
	
	          xhr.open('GET', url);
	          xhr.onreadystatechange = handler;
	          xhr.responseType = 'json';
	          xhr.setRequestHeader('Accept', 'application/json');
	          xhr.send();
	
	          function handler() {
	            if (this.readyState === this.DONE) {
	              if (this.status === 200) {
	                resolve(this.response);
	              } else {
	                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	              }
	            }
	          };
	        });
	      }
	
	      getJSON('/posts.json').then(function(json) {
	        // on fulfillment
	      }, function(reason) {
	        // on rejection
	      });
	      ```
	
	      Unlike callbacks, promises are great composable primitives.
	
	      ```js
	      Promise.all([
	        getJSON('/posts'),
	        getJSON('/comments')
	      ]).then(function(values){
	        values[0] // => postsJSON
	        values[1] // => commentsJSON
	
	        return values;
	      });
	      ```
	
	      @class Promise
	      @param {function} resolver
	      Useful for tooling.
	      @constructor
	    */
	    function lib$es6$promise$promise$$Promise(resolver) {
	      this._id = lib$es6$promise$promise$$counter++;
	      this._state = undefined;
	      this._result = undefined;
	      this._subscribers = [];
	
	      if (lib$es6$promise$$internal$$noop !== resolver) {
	        if (!lib$es6$promise$utils$$isFunction(resolver)) {
	          lib$es6$promise$promise$$needsResolver();
	        }
	
	        if (!(this instanceof lib$es6$promise$promise$$Promise)) {
	          lib$es6$promise$promise$$needsNew();
	        }
	
	        lib$es6$promise$$internal$$initializePromise(this, resolver);
	      }
	    }
	
	    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
	    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
	    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
	    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;
	    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;
	    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;
	    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;
	
	    lib$es6$promise$promise$$Promise.prototype = {
	      constructor: lib$es6$promise$promise$$Promise,
	
	    /**
	      The primary way of interacting with a promise is through its `then` method,
	      which registers callbacks to receive either a promise's eventual value or the
	      reason why the promise cannot be fulfilled.
	
	      ```js
	      findUser().then(function(user){
	        // user is available
	      }, function(reason){
	        // user is unavailable, and you are given the reason why
	      });
	      ```
	
	      Chaining
	      --------
	
	      The return value of `then` is itself a promise.  This second, 'downstream'
	      promise is resolved with the return value of the first promise's fulfillment
	      or rejection handler, or rejected if the handler throws an exception.
	
	      ```js
	      findUser().then(function (user) {
	        return user.name;
	      }, function (reason) {
	        return 'default name';
	      }).then(function (userName) {
	        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	        // will be `'default name'`
	      });
	
	      findUser().then(function (user) {
	        throw new Error('Found user, but still unhappy');
	      }, function (reason) {
	        throw new Error('`findUser` rejected and we're unhappy');
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	      });
	      ```
	      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	
	      ```js
	      findUser().then(function (user) {
	        throw new PedagogicalException('Upstream error');
	      }).then(function (value) {
	        // never reached
	      }).then(function (value) {
	        // never reached
	      }, function (reason) {
	        // The `PedgagocialException` is propagated all the way down to here
	      });
	      ```
	
	      Assimilation
	      ------------
	
	      Sometimes the value you want to propagate to a downstream promise can only be
	      retrieved asynchronously. This can be achieved by returning a promise in the
	      fulfillment or rejection handler. The downstream promise will then be pending
	      until the returned promise is settled. This is called *assimilation*.
	
	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // The user's comments are now available
	      });
	      ```
	
	      If the assimliated promise rejects, then the downstream promise will also reject.
	
	      ```js
	      findUser().then(function (user) {
	        return findCommentsByAuthor(user);
	      }).then(function (comments) {
	        // If `findCommentsByAuthor` fulfills, we'll have the value here
	      }, function (reason) {
	        // If `findCommentsByAuthor` rejects, we'll have the reason here
	      });
	      ```
	
	      Simple Example
	      --------------
	
	      Synchronous Example
	
	      ```javascript
	      var result;
	
	      try {
	        result = findResult();
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```
	
	      Errback Example
	
	      ```js
	      findResult(function(result, err){
	        if (err) {
	          // failure
	        } else {
	          // success
	        }
	      });
	      ```
	
	      Promise Example;
	
	      ```javascript
	      findResult().then(function(result){
	        // success
	      }, function(reason){
	        // failure
	      });
	      ```
	
	      Advanced Example
	      --------------
	
	      Synchronous Example
	
	      ```javascript
	      var author, books;
	
	      try {
	        author = findAuthor();
	        books  = findBooksByAuthor(author);
	        // success
	      } catch(reason) {
	        // failure
	      }
	      ```
	
	      Errback Example
	
	      ```js
	
	      function foundBooks(books) {
	
	      }
	
	      function failure(reason) {
	
	      }
	
	      findAuthor(function(author, err){
	        if (err) {
	          failure(err);
	          // failure
	        } else {
	          try {
	            findBoooksByAuthor(author, function(books, err) {
	              if (err) {
	                failure(err);
	              } else {
	                try {
	                  foundBooks(books);
	                } catch(reason) {
	                  failure(reason);
	                }
	              }
	            });
	          } catch(error) {
	            failure(err);
	          }
	          // success
	        }
	      });
	      ```
	
	      Promise Example;
	
	      ```javascript
	      findAuthor().
	        then(findBooksByAuthor).
	        then(function(books){
	          // found books
	      }).catch(function(reason){
	        // something went wrong
	      });
	      ```
	
	      @method then
	      @param {Function} onFulfilled
	      @param {Function} onRejected
	      Useful for tooling.
	      @return {Promise}
	    */
	      then: function(onFulfillment, onRejection) {
	        var parent = this;
	        var state = parent._state;
	
	        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
	          return this;
	        }
	
	        var child = new this.constructor(lib$es6$promise$$internal$$noop);
	        var result = parent._result;
	
	        if (state) {
	          var callback = arguments[state - 1];
	          lib$es6$promise$asap$$asap(function(){
	            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
	          });
	        } else {
	          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
	        }
	
	        return child;
	      },
	
	    /**
	      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	      as the catch block of a try/catch statement.
	
	      ```js
	      function findAuthor(){
	        throw new Error('couldn't find that author');
	      }
	
	      // synchronous
	      try {
	        findAuthor();
	      } catch(reason) {
	        // something went wrong
	      }
	
	      // async with promises
	      findAuthor().catch(function(reason){
	        // something went wrong
	      });
	      ```
	
	      @method catch
	      @param {Function} onRejection
	      Useful for tooling.
	      @return {Promise}
	    */
	      'catch': function(onRejection) {
	        return this.then(null, onRejection);
	      }
	    };
	    function lib$es6$promise$polyfill$$polyfill() {
	      var local;
	
	      if (typeof global !== 'undefined') {
	          local = global;
	      } else if (typeof self !== 'undefined') {
	          local = self;
	      } else {
	          try {
	              local = Function('return this')();
	          } catch (e) {
	              throw new Error('polyfill failed because global object is unavailable in this environment');
	          }
	      }
	
	      var P = local.Promise;
	
	      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
	        return;
	      }
	
	      local.Promise = lib$es6$promise$promise$$default;
	    }
	    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;
	
	    var lib$es6$promise$umd$$ES6Promise = {
	      'Promise': lib$es6$promise$promise$$default,
	      'polyfill': lib$es6$promise$polyfill$$default
	    };
	
	    /* global define:true module:true window: true */
	    if (typeof define === 'function' && define['amd']) {
	      define(function() { return lib$es6$promise$umd$$ES6Promise; });
	    } else if (typeof module !== 'undefined' && module['exports']) {
	      module['exports'] = lib$es6$promise$umd$$ES6Promise;
	    } else if (typeof this !== 'undefined') {
	      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
	    }
	
	    lib$es6$promise$polyfill$$default();
	}).call(this);
	
	
	}).call(this,{},typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}]},{},[1]);
	
	(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
	(function (global){
	'use strict';
	
	if (!global.Zone) {
	  throw new Error('zone.js should be installed before loading the long stack trace zone');
	}
	
	global.Zone.longStackTraceZone = require('../zones/long-stack-trace.js');
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{"../zones/long-stack-trace.js":2}],2:[function(require,module,exports){
	(function (global){
	/*
	 * Wrapped stacktrace
	 *
	 * We need this because in some implementations, constructing a trace is slow
	 * and so we want to defer accessing the trace for as long as possible
	 */
	
	'use strict';
	
	function _Stacktrace(e) {
	  this._e = e;
	};
	
	_Stacktrace.prototype.get = function () {
	  if (global.zone.stackFramesFilter && this._e.stack) {
	    return this._e.stack
	      .split('\n')
	      .filter(global.zone.stackFramesFilter)
	      .join('\n');
	  }
	
	  return this._e.stack;
	}
	
	function _getStacktraceWithUncaughtError () {
	  return new _Stacktrace(new Error());
	}
	
	function _getStacktraceWithCaughtError () {
	  try {
	    throw new Error();
	  } catch (e) {
	    return new _Stacktrace(e);
	  }
	}
	
	// Some implementations of exception handling don't create a stack trace if the exception
	// isn't thrown, however it's faster not to actually throw the exception.
	var stack = _getStacktraceWithUncaughtError();
	
	var _getStacktrace = stack && stack._e.stack
	  ? _getStacktraceWithUncaughtError
	  : _getStacktraceWithCaughtError;
	
	module.exports = {
	  getLongStacktrace: function (exception) {
	    var traces = [];
	    var currentZone = this;
	    if (exception) {
	      if (currentZone.stackFramesFilter && exception.stack) {
	        traces.push(exception.stack.split('\n')
	              .filter(currentZone.stackFramesFilter)
	              .join('\n'));
	      } else {
	        traces.push(exception.stack);
	      }
	    }
	    var now = Date.now();
	
	    while (currentZone && currentZone.constructedAtException) {
	      traces.push(
	          '--- ' + (Date(currentZone.constructedAtTime)).toString() +
	          ' - ' + (now - currentZone.constructedAtTime) + 'ms ago',
	          currentZone.constructedAtException.get());
	      currentZone = currentZone.parent;
	    }
	
	    return traces.join('\n');
	  },
	
	  stackFramesFilter: function (line) {
	    return !/zone(-microtask)?(\.min)?\.js/.test(line);
	  },
	
	  onError: function (exception) {
	    var reporter = this.reporter || console.log.bind(console);
	    reporter(exception.toString());
	    reporter(this.getLongStacktrace(exception));
	  },
	
	  '$fork': function (parentFork) {
	    return function() {
	      var newZone = parentFork.apply(this, arguments);
	      newZone.constructedAtException = _getStacktrace();
	      newZone.constructedAtTime = Date.now();
	      return newZone;
	    }
	  }
	};
	
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	},{}]},{},[1]);
	
	/**
	 @license
	Apache License
	
	Version 2.0, January 2004
	
	http://www.apache.org/licenses/ 
	
	TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION
	
	1. Definitions.
	
	"License" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.
	
	"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.
	
	"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.
	
	"You" (or "Your") shall mean an individual or Legal Entity exercising permissions granted by this License.
	
	"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.
	
	"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.
	
	"Work" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).
	
	"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.
	
	"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."
	
	"Contributor" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.
	
	2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.
	
	3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.
	
	4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:
	
	You must give any other recipients of the Work or Derivative Works a copy of this License; and
	
	You must cause any modified files to carry prominent notices stating that You changed the files; and
	
	You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and
	
	If the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.
	
	5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.
	
	6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.
	
	7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.
	
	8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.
	
	9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.
	
	END OF TERMS AND CONDITIONS
	 */
	
	/*! *****************************************************************************
	Copyright (C) Microsoft. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0
	
	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.
	
	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	"use strict";
	var Reflect;
	(function (Reflect) {
	    // Load global or shim versions of Map, Set, and WeakMap
	    var functionPrototype = Object.getPrototypeOf(Function);
	    var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
	    var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
	    var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
	    // [[Metadata]] internal slot
	    var __Metadata__ = new _WeakMap();
	    /**
	      * Applies a set of decorators to a property of a target object.
	      * @param decorators An array of decorators.
	      * @param target The target object.
	      * @param targetKey (Optional) The property key to decorate.
	      * @param targetDescriptor (Optional) The property descriptor for the target key
	      * @remarks Decorators are applied in reverse order.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     C = Reflect.decorate(decoratorsArray, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.decorate(decoratorsArray, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.decorate(decoratorsArray, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Object.defineProperty(C, "staticMethod",
	      *         Reflect.decorate(decoratorsArray, C, "staticMethod",
	      *             Object.getOwnPropertyDescriptor(C, "staticMethod")));
	      *
	      *     // method (on prototype)
	      *     Object.defineProperty(C.prototype, "method",
	      *         Reflect.decorate(decoratorsArray, C.prototype, "method",
	      *             Object.getOwnPropertyDescriptor(C.prototype, "method")));
	      *
	      */
	    function decorate(decorators, target, targetKey, targetDescriptor) {
	        if (!IsUndefined(targetDescriptor)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(target)) {
	                throw new TypeError();
	            }
	            else if (IsUndefined(targetKey)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(targetDescriptor)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
	        }
	        else if (!IsUndefined(targetKey)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(target)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
	        }
	        else {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsConstructor(target)) {
	                throw new TypeError();
	            }
	            return DecorateConstructor(decorators, target);
	        }
	    }
	    Reflect.decorate = decorate;
	    /**
	      * A default metadata decorator factory that can be used on a class, class member, or parameter.
	      * @param metadataKey The key for the metadata entry.
	      * @param metadataValue The value for the metadata entry.
	      * @returns A decorator function.
	      * @remarks
	      * If `metadataKey` is already defined for the target and target key, the
	      * metadataValue for that key will be overwritten.
	      * @example
	      *
	      *     // constructor
	      *     @Reflect.metadata(key, value)
	      *     class C {
	      *     }
	      *
	      *     // property (on constructor, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticProperty;
	      *     }
	      *
	      *     // property (on prototype, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         property;
	      *     }
	      *
	      *     // method (on constructor)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticMethod() { }
	      *     }
	      *
	      *     // method (on prototype)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         method() { }
	      *     }
	      *
	      */
	    function metadata(metadataKey, metadataValue) {
	        function decorator(target, targetKey) {
	            if (!IsUndefined(targetKey)) {
	                if (!IsObject(target)) {
	                    throw new TypeError();
	                }
	                targetKey = ToPropertyKey(targetKey);
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	            }
	            else {
	                if (!IsConstructor(target)) {
	                    throw new TypeError();
	                }
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, undefined);
	            }
	        }
	        return decorator;
	    }
	    Reflect.metadata = metadata;
	    /**
	      * Define a unique metadata entry on the target.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param metadataValue A value that contains attached metadata.
	      * @param target The target object on which to define metadata.
	      * @param targetKey (Optional) The property key for the target.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Reflect.defineMetadata("custom:annotation", options, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "method");
	      *
	      *     // decorator factory as metadata-producing annotation.
	      *     function MyAnnotation(options): Decorator {
	      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
	      *     }
	      *
	      */
	    function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	    }
	    Reflect.defineMetadata = defineMetadata;
	    /**
	      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasMetadata = hasMetadata;
	    /**
	      * Gets a value indicating whether the target object has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasOwnMetadata = hasOwnMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getMetadata = getMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getOwnMetadata = getOwnMetadata;
	    /**
	      * Gets the metadata keys defined on the target object or its prototype chain.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryMetadataKeys(target, targetKey);
	    }
	    Reflect.getMetadataKeys = getMetadataKeys;
	    /**
	      * Gets the unique metadata keys defined on the target object.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getOwnMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryOwnMetadataKeys(target, targetKey);
	    }
	    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
	    /**
	      * Deletes the metadata entry from the target object with the provided key.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.deleteMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function deleteMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        if (IsUndefined(metadataMap)) {
	            return false;
	        }
	        if (!metadataMap.delete(metadataKey)) {
	            return false;
	        }
	        if (metadataMap.size > 0) {
	            return true;
	        }
	        var targetMetadata = __Metadata__.get(target);
	        targetMetadata.delete(targetKey);
	        if (targetMetadata.size > 0) {
	            return true;
	        }
	        __Metadata__.delete(target);
	        return true;
	    }
	    Reflect.deleteMetadata = deleteMetadata;
	    function DecorateConstructor(decorators, target) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target);
	            if (!IsUndefined(decorated)) {
	                if (!IsConstructor(decorated)) {
	                    throw new TypeError();
	                }
	                target = decorated;
	            }
	        }
	        return target;
	    }
	    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target, propertyKey, descriptor);
	            if (!IsUndefined(decorated)) {
	                if (!IsObject(decorated)) {
	                    throw new TypeError();
	                }
	                descriptor = decorated;
	            }
	        }
	        return descriptor;
	    }
	    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            decorator(target, propertyKey);
	        }
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-
	    function GetOrCreateMetadataMap(target, targetKey, create) {
	        var targetMetadata = __Metadata__.get(target);
	        if (!targetMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            targetMetadata = new _Map();
	            __Metadata__.set(target, targetMetadata);
	        }
	        var keyMetadata = targetMetadata.get(targetKey);
	        if (!keyMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            keyMetadata = new _Map();
	            targetMetadata.set(targetKey, keyMetadata);
	        }
	        return keyMetadata;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
	    function OrdinaryHasMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn) {
	            return true;
	        }
	        var parent = GetPrototypeOf(O);
	        if (parent !== null) {
	            return OrdinaryHasMetadata(MetadataKey, parent, P);
	        }
	        return false;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
	    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return false;
	        }
	        return Boolean(metadataMap.has(MetadataKey));
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-
	    function OrdinaryGetMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn) {
	            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
	        }
	        var parent = GetPrototypeOf(O);
	        if (parent !== null) {
	            return OrdinaryGetMetadata(MetadataKey, parent, P);
	        }
	        return undefined;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
	    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return undefined;
	        }
	        return metadataMap.get(MetadataKey);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
	    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, true);
	        metadataMap.set(MetadataKey, MetadataValue);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-
	    function OrdinaryMetadataKeys(O, P) {
	        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
	        var parent = GetPrototypeOf(O);
	        if (parent === null) {
	            return ownKeys;
	        }
	        var parentKeys = OrdinaryMetadataKeys(parent, P);
	        if (parentKeys.length <= 0) {
	            return ownKeys;
	        }
	        if (ownKeys.length <= 0) {
	            return parentKeys;
	        }
	        var set = new _Set();
	        var keys = [];
	        for (var _i = 0; _i < ownKeys.length; _i++) {
	            var key = ownKeys[_i];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        for (var _a = 0; _a < parentKeys.length; _a++) {
	            var key = parentKeys[_a];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        return keys;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-
	    function OrdinaryOwnMetadataKeys(target, targetKey) {
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        var keys = [];
	        if (metadataMap) {
	            metadataMap.forEach(function (_, key) { return keys.push(key); });
	        }
	        return keys;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type
	    function IsUndefined(x) {
	        return x === undefined;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
	    function IsArray(x) {
	        return Array.isArray(x);
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type
	    function IsObject(x) {
	        return typeof x === "object" ? x !== null : typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
	    function IsConstructor(x) {
	        return typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type
	    function IsSymbol(x) {
	        return typeof x === "symbol";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
	    function ToPropertyKey(value) {
	        if (IsSymbol(value)) {
	            return value;
	        }
	        return String(value);
	    }
	    function GetPrototypeOf(O) {
	        var proto = Object.getPrototypeOf(O);
	        if (typeof O !== "function" || O === functionPrototype) {
	            return proto;
	        }
	        // TypeScript doesn't set __proto__ in ES5, as it's non-standard. 
	        // Try to determine the superclass constructor. Compatible implementations
	        // must either set __proto__ on a subclass constructor to the superclass constructor,
	        // or ensure each class has a valid `constructor` property on its prototype that
	        // points back to the constructor.
	        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
	        // This is the case when in ES6 or when using __proto__ in a compatible browser.
	        if (proto !== functionPrototype) {
	            return proto;
	        }
	        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
	        var prototype = O.prototype;
	        var prototypeProto = Object.getPrototypeOf(prototype);
	        if (prototypeProto == null || prototypeProto === Object.prototype) {
	            return proto;
	        }
	        // if the constructor was not a function, then we cannot determine the heritage.
	        var constructor = prototypeProto.constructor;
	        if (typeof constructor !== "function") {
	            return proto;
	        }
	        // if we have some kind of self-reference, then we cannot determine the heritage.
	        if (constructor === O) {
	            return proto;
	        }
	        // we have a pretty good guess at the heritage.
	        return constructor;
	    }
	    // naive Map shim
	    function CreateMapPolyfill() {
	        var cacheSentinel = {};
	        function Map() {
	            this._keys = [];
	            this._values = [];
	            this._cache = cacheSentinel;
	        }
	        Map.prototype = {
	            get size() {
	                return this._keys.length;
	            },
	            has: function (key) {
	                if (key === this._cache) {
	                    return true;
	                }
	                if (this._find(key) >= 0) {
	                    this._cache = key;
	                    return true;
	                }
	                return false;
	            },
	            get: function (key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._cache = key;
	                    return this._values[index];
	                }
	                return undefined;
	            },
	            set: function (key, value) {
	                this.delete(key);
	                this._keys.push(key);
	                this._values.push(value);
	                this._cache = key;
	                return this;
	            },
	            delete: function (key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._keys.splice(index, 1);
	                    this._values.splice(index, 1);
	                    this._cache = cacheSentinel;
	                    return true;
	                }
	                return false;
	            },
	            clear: function () {
	                this._keys.length = 0;
	                this._values.length = 0;
	                this._cache = cacheSentinel;
	            },
	            forEach: function (callback, thisArg) {
	                var size = this.size;
	                for (var i = 0; i < size; ++i) {
	                    var key = this._keys[i];
	                    var value = this._values[i];
	                    this._cache = key;
	                    callback.call(this, value, key, this);
	                }
	            },
	            _find: function (key) {
	                var keys = this._keys;
	                var size = keys.length;
	                for (var i = 0; i < size; ++i) {
	                    if (keys[i] === key) {
	                        return i;
	                    }
	                }
	                return -1;
	            }
	        };
	        return Map;
	    }
	    // naive Set shim
	    function CreateSetPolyfill() {
	        var cacheSentinel = {};
	        function Set() {
	            this._map = new _Map();
	        }
	        Set.prototype = {
	            get size() {
	                return this._map.length;
	            },
	            has: function (value) {
	                return this._map.has(value);
	            },
	            add: function (value) {
	                this._map.set(value, value);
	                return this;
	            },
	            delete: function (value) {
	                return this._map.delete(value);
	            },
	            clear: function () {
	                this._map.clear();
	            },
	            forEach: function (callback, thisArg) {
	                this._map.forEach(callback, thisArg);
	            }
	        };
	        return Set;
	    }
	    // naive WeakMap shim
	    function CreateWeakMapPolyfill() {
	        var UUID_SIZE = 16;
	        var isNode = typeof global !== "undefined" && Object.prototype.toString.call(global.process) === '[object process]';
	        var nodeCrypto = isNode && require("crypto");
	        var hasOwn = Object.prototype.hasOwnProperty;
	        var keys = {};
	        var rootKey = CreateUniqueKey();
	        function WeakMap() {
	            this._key = CreateUniqueKey();
	        }
	        WeakMap.prototype = {
	            has: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return this._key in table;
	                }
	                return false;
	            },
	            get: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return table[this._key];
	                }
	                return undefined;
	            },
	            set: function (target, value) {
	                var table = GetOrCreateWeakMapTable(target, true);
	                table[this._key] = value;
	                return this;
	            },
	            delete: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table && this._key in table) {
	                    return delete table[this._key];
	                }
	                return false;
	            },
	            clear: function () {
	                // NOTE: not a real clear, just makes the previous data unreachable
	                this._key = CreateUniqueKey();
	            }
	        };
	        function FillRandomBytes(buffer, size) {
	            for (var i = 0; i < size; ++i) {
	                buffer[i] = Math.random() * 255 | 0;
	            }
	        }
	        function GenRandomBytes(size) {
	            if (nodeCrypto) {
	                var data = nodeCrypto.randomBytes(size);
	                return data;
	            }
	            else if (typeof Uint8Array === "function") {
	                var data = new Uint8Array(size);
	                if (typeof crypto !== "undefined") {
	                    crypto.getRandomValues(data);
	                }
	                else if (typeof msCrypto !== "undefined") {
	                    msCrypto.getRandomValues(data);
	                }
	                else {
	                    FillRandomBytes(data, size);
	                }
	                return data;
	            }
	            else {
	                var data = new Array(size);
	                FillRandomBytes(data, size);
	                return data;
	            }
	        }
	        function CreateUUID() {
	            var data = GenRandomBytes(UUID_SIZE);
	            // mark as random - RFC 4122 § 4.4
	            data[6] = data[6] & 0x4f | 0x40;
	            data[8] = data[8] & 0xbf | 0x80;
	            var result = "";
	            for (var offset = 0; offset < UUID_SIZE; ++offset) {
	                var byte = data[offset];
	                if (offset === 4 || offset === 6 || offset === 8) {
	                    result += "-";
	                }
	                if (byte < 16) {
	                    result += "0";
	                }
	                result += byte.toString(16).toLowerCase();
	            }
	            return result;
	        }
	        function CreateUniqueKey() {
	            var key;
	            do {
	                key = "@@WeakMap@@" + CreateUUID();
	            } while (hasOwn.call(keys, key));
	            keys[key] = true;
	            return key;
	        }
	        function GetOrCreateWeakMapTable(target, create) {
	            if (!hasOwn.call(target, rootKey)) {
	                if (!create) {
	                    return undefined;
	                }
	                Object.defineProperty(target, rootKey, { value: Object.create(null) });
	            }
	            return target[rootKey];
	        }
	        return WeakMap;
	    }
	    // hook global Reflect
	    (function (__global) {
	        if (typeof __global.Reflect !== "undefined") {
	            if (__global.Reflect !== Reflect) {
	                for (var p in Reflect) {
	                    __global.Reflect[p] = Reflect[p];
	                }
	            }
	        }
	        else {
	            __global.Reflect = Reflect;
	        }
	    })(typeof window !== "undefined" ? window :
	        typeof WorkerGlobalScope !== "undefined" ? self :
	            typeof global !== "undefined" ? global :
	                Function("return this;")());
	})(Reflect || (Reflect = {}));
	//# sourceMappingURLDisabled=Reflect.js.map

/***/ },
/* 299 */
/***/ function(module, exports, __webpack_require__) {

	/* tslint:disable:no-unused-variable */
	// Subject imported before Observable to bypass circular dependency issue since
	// Subject extends Observable and Observable references Subject in it's
	// definition
	var Subject_1 = __webpack_require__(50);
	exports.Subject = Subject_1.Subject;
	/* tslint:enable:no-unused-variable */
	var Observable_1 = __webpack_require__(51);
	exports.Observable = Observable_1.Observable;
	// statics
	/* tslint:disable:no-use-before-declare */
	__webpack_require__(300);
	__webpack_require__(307);
	__webpack_require__(310);
	__webpack_require__(312);
	__webpack_require__(315);
	__webpack_require__(317);
	__webpack_require__(318);
	__webpack_require__(321);
	__webpack_require__(266);
	__webpack_require__(326);
	__webpack_require__(328);
	__webpack_require__(330);
	__webpack_require__(331);
	__webpack_require__(340);
	__webpack_require__(342);
	__webpack_require__(344);
	__webpack_require__(345);
	__webpack_require__(348);
	//operators
	__webpack_require__(351);
	__webpack_require__(353);
	__webpack_require__(355);
	__webpack_require__(357);
	__webpack_require__(359);
	__webpack_require__(361);
	__webpack_require__(363);
	__webpack_require__(365);
	__webpack_require__(367);
	__webpack_require__(369);
	__webpack_require__(371);
	__webpack_require__(374);
	__webpack_require__(377);
	__webpack_require__(379);
	__webpack_require__(381);
	__webpack_require__(383);
	__webpack_require__(385);
	__webpack_require__(387);
	__webpack_require__(389);
	__webpack_require__(391);
	__webpack_require__(393);
	__webpack_require__(396);
	__webpack_require__(398);
	__webpack_require__(400);
	__webpack_require__(403);
	__webpack_require__(409);
	__webpack_require__(411);
	__webpack_require__(413);
	__webpack_require__(278);
	__webpack_require__(415);
	__webpack_require__(417);
	__webpack_require__(419);
	__webpack_require__(421);
	__webpack_require__(423);
	__webpack_require__(425);
	__webpack_require__(427);
	__webpack_require__(428);
	__webpack_require__(430);
	__webpack_require__(433);
	__webpack_require__(435);
	__webpack_require__(439);
	__webpack_require__(442);
	__webpack_require__(444);
	__webpack_require__(447);
	__webpack_require__(449);
	__webpack_require__(451);
	__webpack_require__(453);
	__webpack_require__(455);
	__webpack_require__(457);
	__webpack_require__(274);
	__webpack_require__(459);
	__webpack_require__(461);
	__webpack_require__(463);
	__webpack_require__(465);
	__webpack_require__(467);
	__webpack_require__(469);
	__webpack_require__(472);
	__webpack_require__(474);
	__webpack_require__(476);
	__webpack_require__(478);
	__webpack_require__(481);
	__webpack_require__(483);
	__webpack_require__(485);
	__webpack_require__(487);
	__webpack_require__(489);
	__webpack_require__(491);
	__webpack_require__(493);
	__webpack_require__(495);
	__webpack_require__(496);
	__webpack_require__(498);
	__webpack_require__(500);
	__webpack_require__(502);
	__webpack_require__(504);
	__webpack_require__(506);
	__webpack_require__(508);
	__webpack_require__(510);
	/* tslint:disable:no-unused-variable */
	var Subscription_1 = __webpack_require__(56);
	exports.Subscription = Subscription_1.Subscription;
	var Subscriber_1 = __webpack_require__(52);
	exports.Subscriber = Subscriber_1.Subscriber;
	var AsyncSubject_1 = __webpack_require__(314);
	exports.AsyncSubject = AsyncSubject_1.AsyncSubject;
	var ReplaySubject_1 = __webpack_require__(441);
	exports.ReplaySubject = ReplaySubject_1.ReplaySubject;
	var BehaviorSubject_1 = __webpack_require__(437);
	exports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;
	var ConnectableObservable_1 = __webpack_require__(277);
	exports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;
	var Notification_1 = __webpack_require__(325);
	exports.Notification = Notification_1.Notification;
	var EmptyError_1 = __webpack_require__(402);
	exports.EmptyError = EmptyError_1.EmptyError;
	var ArgumentOutOfRangeError_1 = __webpack_require__(480);
	exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
	var ObjectUnsubscribedError_1 = __webpack_require__(438);
	exports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;
	var asap_1 = __webpack_require__(334);
	var queue_1 = __webpack_require__(63);
	var rxSubscriber_1 = __webpack_require__(57);
	/* tslint:enable:no-unused-variable */
	/* tslint:disable:no-var-keyword */
	var Scheduler = {
	    asap: asap_1.asap,
	    queue: queue_1.queue
	};
	exports.Scheduler = Scheduler;
	var Symbol = {
	    rxSubscriber: rxSubscriber_1.rxSubscriber
	};
	exports.Symbol = Symbol;
	/* tslint:enable:no-var-keyword */
	//# sourceMappingURL=Rx.js.map

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var combineLatest_static_1 = __webpack_require__(301);
	Observable_1.Observable.combineLatest = combineLatest_static_1.combineLatest;
	//# sourceMappingURL=combineLatest-static.js.map

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	var fromArray_1 = __webpack_require__(267);
	var combineLatest_support_1 = __webpack_require__(302);
	var isScheduler_1 = __webpack_require__(273);
	var isArray_1 = __webpack_require__(306);
	/**
	 * Combines the values from observables passed as arguments. This is done by subscribing
	 * to each observable, in order, and collecting an array of each of the most recent values any time any of the observables
	 * emits, then either taking that array and passing it as arguments to an option `project` function and emitting the return
	 * value of that, or just emitting the array of recent values directly if there is no `project` function.
	 * @param {...Observable} observables the observables to combine
	 * @param {function} [project] an optional function to project the values from the combined recent values into a new value for emission.
	 * @returns {Observable} an observable of other projected values from the most recent values from each observable, or an array of each of
	 * the most recent values from each observable.
	 */
	function combineLatest() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var project = null;
	    var scheduler = null;
	    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {
	        scheduler = observables.pop();
	    }
	    if (typeof observables[observables.length - 1] === 'function') {
	        project = observables.pop();
	    }
	    // if the first and only other argument besides the resultSelector is an array
	    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
	    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
	        observables = observables[0];
	    }
	    return new fromArray_1.ArrayObservable(observables, scheduler).lift(new combineLatest_support_1.CombineLatestOperator(project));
	}
	exports.combineLatest = combineLatest;
	//# sourceMappingURL=combineLatest-static.js.map

/***/ },
/* 302 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var OuterSubscriber_1 = __webpack_require__(303);
	var subscribeToResult_1 = __webpack_require__(304);
	var CombineLatestOperator = (function () {
	    function CombineLatestOperator(project) {
	        this.project = project;
	    }
	    CombineLatestOperator.prototype.call = function (subscriber) {
	        return new CombineLatestSubscriber(subscriber, this.project);
	    };
	    return CombineLatestOperator;
	})();
	exports.CombineLatestOperator = CombineLatestOperator;
	var CombineLatestSubscriber = (function (_super) {
	    __extends(CombineLatestSubscriber, _super);
	    function CombineLatestSubscriber(destination, project) {
	        _super.call(this, destination);
	        this.project = project;
	        this.active = 0;
	        this.values = [];
	        this.observables = [];
	        this.toRespond = [];
	    }
	    CombineLatestSubscriber.prototype._next = function (observable) {
	        var toRespond = this.toRespond;
	        toRespond.push(toRespond.length);
	        this.observables.push(observable);
	    };
	    CombineLatestSubscriber.prototype._complete = function () {
	        var observables = this.observables;
	        var len = observables.length;
	        if (len === 0) {
	            this.destination.complete();
	        }
	        else {
	            this.active = len;
	            for (var i = 0; i < len; i++) {
	                var observable = observables[i];
	                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
	            }
	        }
	    };
	    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {
	        if ((this.active -= 1) === 0) {
	            this.destination.complete();
	        }
	    };
	    CombineLatestSubscriber.prototype.notifyNext = function (observable, value, outerIndex, innerIndex) {
	        var values = this.values;
	        values[outerIndex] = value;
	        var toRespond = this.toRespond;
	        if (toRespond.length > 0) {
	            var found = toRespond.indexOf(outerIndex);
	            if (found !== -1) {
	                toRespond.splice(found, 1);
	            }
	        }
	        if (toRespond.length === 0) {
	            var project = this.project;
	            var destination = this.destination;
	            if (project) {
	                var result = tryCatch_1.tryCatch(project).apply(this, values);
	                if (result === errorObject_1.errorObject) {
	                    destination.error(errorObject_1.errorObject.e);
	                }
	                else {
	                    destination.next(result);
	                }
	            }
	            else {
	                destination.next(values);
	            }
	        }
	    };
	    return CombineLatestSubscriber;
	})(OuterSubscriber_1.OuterSubscriber);
	exports.CombineLatestSubscriber = CombineLatestSubscriber;
	//# sourceMappingURL=combineLatest-support.js.map

/***/ },
/* 303 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var OuterSubscriber = (function (_super) {
	    __extends(OuterSubscriber, _super);
	    function OuterSubscriber() {
	        _super.apply(this, arguments);
	    }
	    OuterSubscriber.prototype.notifyComplete = function (inner) {
	        this.destination.complete();
	    };
	    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
	        this.destination.next(innerValue);
	    };
	    OuterSubscriber.prototype.notifyError = function (error, inner) {
	        this.destination.error(error);
	    };
	    return OuterSubscriber;
	})(Subscriber_1.Subscriber);
	exports.OuterSubscriber = OuterSubscriber;
	//# sourceMappingURL=OuterSubscriber.js.map

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var SymbolShim_1 = __webpack_require__(58);
	var InnerSubscriber_1 = __webpack_require__(305);
	var isArray = Array.isArray;
	function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
	    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
	    if (destination.isUnsubscribed) {
	        return;
	    }
	    if (result instanceof Observable_1.Observable) {
	        if (result._isScalar) {
	            destination.next(result.value);
	            destination.complete();
	            return;
	        }
	        else {
	            return result.subscribe(destination);
	        }
	    }
	    if (isArray(result)) {
	        for (var i = 0, len = result.length; i < len && !destination.isUnsubscribed; i++) {
	            destination.next(result[i]);
	        }
	        if (!destination.isUnsubscribed) {
	            destination.complete();
	        }
	    }
	    else if (typeof result.then === 'function') {
	        result.then(function (x) {
	            if (!destination.isUnsubscribed) {
	                destination.next(x);
	                destination.complete();
	            }
	        }, function (err) { return destination.error(err); })
	            .then(null, function (err) {
	            // Escaping the Promise trap: globally throw unhandled errors
	            setTimeout(function () { throw err; });
	        });
	        return destination;
	    }
	    else if (typeof result[SymbolShim_1.SymbolShim.iterator] === 'function') {
	        for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {
	            var item = result_1[_i];
	            destination.next(item);
	            if (destination.isUnsubscribed) {
	                break;
	            }
	        }
	        if (!destination.isUnsubscribed) {
	            destination.complete();
	        }
	    }
	    else if (typeof result[SymbolShim_1.SymbolShim.observable] === 'function') {
	        var obs = result[SymbolShim_1.SymbolShim.observable]();
	        if (typeof obs.subscribe !== 'function') {
	            destination.error('invalid observable');
	        }
	        else {
	            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
	        }
	    }
	    else {
	        destination.error(new TypeError('unknown type returned'));
	    }
	}
	exports.subscribeToResult = subscribeToResult;
	//# sourceMappingURL=subscribeToResult.js.map

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var InnerSubscriber = (function (_super) {
	    __extends(InnerSubscriber, _super);
	    function InnerSubscriber(parent, outerValue, outerIndex) {
	        _super.call(this);
	        this.parent = parent;
	        this.outerValue = outerValue;
	        this.outerIndex = outerIndex;
	        this.index = 0;
	    }
	    InnerSubscriber.prototype._next = function (value) {
	        var index = this.index++;
	        this.parent.notifyNext(this.outerValue, value, this.outerIndex, index);
	    };
	    InnerSubscriber.prototype._error = function (error) {
	        this.parent.notifyError(error, this);
	    };
	    InnerSubscriber.prototype._complete = function () {
	        this.parent.notifyComplete(this);
	    };
	    return InnerSubscriber;
	})(Subscriber_1.Subscriber);
	exports.InnerSubscriber = InnerSubscriber;
	//# sourceMappingURL=InnerSubscriber.js.map

/***/ },
/* 306 */
/***/ function(module, exports) {

	exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
	//# sourceMappingURL=isArray.js.map

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var concat_static_1 = __webpack_require__(308);
	Observable_1.Observable.concat = concat_static_1.concat;
	//# sourceMappingURL=concat-static.js.map

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	var queue_1 = __webpack_require__(63);
	var mergeAll_support_1 = __webpack_require__(309);
	var fromArray_1 = __webpack_require__(267);
	var isScheduler_1 = __webpack_require__(273);
	/**
	 * Joins multiple observables together by subscribing to them one at a time and merging their results
	 * into the returned observable. Will wait for each observable to complete before moving on to the next.
	 * @params {...Observable} the observables to concatenate
	 * @params {Scheduler} [scheduler] an optional scheduler to schedule each observable subscription on.
	 * @returns {Observable} All values of each passed observable merged into a single observable, in order, in serial fashion.
	 */
	function concat() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var scheduler = queue_1.queue;
	    var args = observables;
	    if (isScheduler_1.isScheduler(args[observables.length - 1])) {
	        scheduler = args.pop();
	    }
	    return new fromArray_1.ArrayObservable(observables, scheduler).lift(new mergeAll_support_1.MergeAllOperator(1));
	}
	exports.concat = concat;
	//# sourceMappingURL=concat-static.js.map

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(303);
	var subscribeToResult_1 = __webpack_require__(304);
	var MergeAllOperator = (function () {
	    function MergeAllOperator(concurrent) {
	        this.concurrent = concurrent;
	    }
	    MergeAllOperator.prototype.call = function (observer) {
	        return new MergeAllSubscriber(observer, this.concurrent);
	    };
	    return MergeAllOperator;
	})();
	exports.MergeAllOperator = MergeAllOperator;
	var MergeAllSubscriber = (function (_super) {
	    __extends(MergeAllSubscriber, _super);
	    function MergeAllSubscriber(destination, concurrent) {
	        _super.call(this, destination);
	        this.concurrent = concurrent;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	    }
	    MergeAllSubscriber.prototype._next = function (observable) {
	        if (this.active < this.concurrent) {
	            if (observable._isScalar) {
	                this.destination.next(observable.value);
	            }
	            else {
	                this.active++;
	                this.add(subscribeToResult_1.subscribeToResult(this, observable));
	            }
	        }
	        else {
	            this.buffer.push(observable);
	        }
	    };
	    MergeAllSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };
	    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeAllSubscriber;
	})(OuterSubscriber_1.OuterSubscriber);
	exports.MergeAllSubscriber = MergeAllSubscriber;
	//# sourceMappingURL=mergeAll-support.js.map

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var merge_static_1 = __webpack_require__(311);
	Observable_1.Observable.merge = merge_static_1.merge;
	//# sourceMappingURL=merge-static.js.map

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	var fromArray_1 = __webpack_require__(267);
	var mergeAll_support_1 = __webpack_require__(309);
	var queue_1 = __webpack_require__(63);
	var isScheduler_1 = __webpack_require__(273);
	function merge() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var concurrent = Number.POSITIVE_INFINITY;
	    var scheduler = queue_1.queue;
	    var last = observables[observables.length - 1];
	    if (isScheduler_1.isScheduler(last)) {
	        scheduler = observables.pop();
	        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
	            concurrent = observables.pop();
	        }
	    }
	    else if (typeof last === 'number') {
	        concurrent = observables.pop();
	    }
	    if (observables.length === 1) {
	        return observables[0];
	    }
	    return new fromArray_1.ArrayObservable(observables, scheduler).lift(new mergeAll_support_1.MergeAllOperator(concurrent));
	}
	exports.merge = merge;
	//# sourceMappingURL=merge-static.js.map

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var bindCallback_1 = __webpack_require__(313);
	Observable_1.Observable.bindCallback = bindCallback_1.BoundCallbackObservable.create;
	//# sourceMappingURL=bindCallback.js.map

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(51);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var AsyncSubject_1 = __webpack_require__(314);
	var BoundCallbackObservable = (function (_super) {
	    __extends(BoundCallbackObservable, _super);
	    function BoundCallbackObservable(callbackFunc, selector, args, scheduler) {
	        _super.call(this);
	        this.callbackFunc = callbackFunc;
	        this.selector = selector;
	        this.args = args;
	        this.scheduler = scheduler;
	    }
	    BoundCallbackObservable.create = function (callbackFunc, selector, scheduler) {
	        if (selector === void 0) { selector = undefined; }
	        return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            return new BoundCallbackObservable(callbackFunc, selector, args, scheduler);
	        };
	    };
	    BoundCallbackObservable.prototype._subscribe = function (subscriber) {
	        var callbackFunc = this.callbackFunc;
	        var args = this.args;
	        var scheduler = this.scheduler;
	        var subject = this.subject;
	        if (!scheduler) {
	            if (!subject) {
	                subject = this.subject = new AsyncSubject_1.AsyncSubject();
	                var handler = function handlerFn() {
	                    var innerArgs = [];
	                    for (var _i = 0; _i < arguments.length; _i++) {
	                        innerArgs[_i - 0] = arguments[_i];
	                    }
	                    var source = handlerFn.source;
	                    var selector = source.selector, subject = source.subject;
	                    if (selector) {
	                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
	                        if (result_1 === errorObject_1.errorObject) {
	                            subject.error(errorObject_1.errorObject.e);
	                        }
	                        else {
	                            subject.next(result_1);
	                            subject.complete();
	                        }
	                    }
	                    else {
	                        subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);
	                        subject.complete();
	                    }
	                };
	                // use named function instance to avoid closure.
	                handler.source = this;
	                var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
	                if (result === errorObject_1.errorObject) {
	                    subject.error(errorObject_1.errorObject.e);
	                }
	            }
	            return subject.subscribe(subscriber);
	        }
	        else {
	            subscriber.add(scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber }));
	            return subscriber;
	        }
	    };
	    return BoundCallbackObservable;
	})(Observable_1.Observable);
	exports.BoundCallbackObservable = BoundCallbackObservable;
	function dispatch(state) {
	    var source = state.source, subscriber = state.subscriber;
	    var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;
	    var subject = source.subject;
	    if (!subject) {
	        subject = source.subject = new AsyncSubject_1.AsyncSubject();
	        var handler = function handlerFn() {
	            var innerArgs = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                innerArgs[_i - 0] = arguments[_i];
	            }
	            var source = handlerFn.source;
	            var selector = source.selector, subject = source.subject;
	            if (selector) {
	                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);
	                if (result_2 === errorObject_1.errorObject) {
	                    subject.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));
	                }
	                else {
	                    subject.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));
	                }
	            }
	            else {
	                var value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;
	                subject.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));
	            }
	        };
	        // use named function to pass values in without closure
	        handler.source = source;
	        var result = tryCatch_1.tryCatch(callbackFunc).apply(this, args.concat(handler));
	        if (result === errorObject_1.errorObject) {
	            subject.error(errorObject_1.errorObject.e);
	        }
	    }
	    this.add(subject.subscribe(subscriber));
	}
	function dispatchNext(_a) {
	    var value = _a.value, subject = _a.subject;
	    subject.next(value);
	    subject.complete();
	}
	function dispatchError(_a) {
	    var err = _a.err, subject = _a.subject;
	    subject.error(err);
	}
	//# sourceMappingURL=bindCallback.js.map

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(50);
	var AsyncSubject = (function (_super) {
	    __extends(AsyncSubject, _super);
	    function AsyncSubject() {
	        _super.call(this);
	        this._value = void 0;
	        this._hasNext = false;
	        this._isScalar = false;
	    }
	    AsyncSubject.prototype._subscribe = function (subscriber) {
	        if (this.completeSignal && this._hasNext) {
	            subscriber.next(this._value);
	        }
	        return _super.prototype._subscribe.call(this, subscriber);
	    };
	    AsyncSubject.prototype._next = function (value) {
	        this._value = value;
	        this._hasNext = true;
	    };
	    AsyncSubject.prototype._complete = function () {
	        var index = -1;
	        var observers = this.observers;
	        var len = observers.length;
	        // optimization -- block next, complete, and unsubscribe while dispatching
	        this.observers = void 0; // optimization
	        this.isUnsubscribed = true;
	        if (this._hasNext) {
	            while (++index < len) {
	                var o = observers[index];
	                o.next(this._value);
	                o.complete();
	            }
	        }
	        else {
	            while (++index < len) {
	                observers[index].complete();
	            }
	        }
	        this.isUnsubscribed = false;
	    };
	    return AsyncSubject;
	})(Subject_1.Subject);
	exports.AsyncSubject = AsyncSubject;
	//# sourceMappingURL=AsyncSubject.js.map

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var defer_1 = __webpack_require__(316);
	Observable_1.Observable.defer = defer_1.DeferObservable.create;
	//# sourceMappingURL=defer.js.map

/***/ },
/* 316 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(51);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var DeferObservable = (function (_super) {
	    __extends(DeferObservable, _super);
	    function DeferObservable(observableFactory) {
	        _super.call(this);
	        this.observableFactory = observableFactory;
	    }
	    DeferObservable.create = function (observableFactory) {
	        return new DeferObservable(observableFactory);
	    };
	    DeferObservable.prototype._subscribe = function (subscriber) {
	        var result = tryCatch_1.tryCatch(this.observableFactory)();
	        if (result === errorObject_1.errorObject) {
	            subscriber.error(errorObject_1.errorObject.e);
	        }
	        else {
	            result.subscribe(subscriber);
	        }
	    };
	    return DeferObservable;
	})(Observable_1.Observable);
	exports.DeferObservable = DeferObservable;
	//# sourceMappingURL=defer.js.map

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var empty_1 = __webpack_require__(272);
	Observable_1.Observable.empty = empty_1.EmptyObservable.create;
	//# sourceMappingURL=empty.js.map

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var forkJoin_1 = __webpack_require__(319);
	Observable_1.Observable.forkJoin = forkJoin_1.ForkJoinObservable.create;
	//# sourceMappingURL=forkJoin.js.map

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(51);
	var Subscriber_1 = __webpack_require__(52);
	var fromPromise_1 = __webpack_require__(62);
	var empty_1 = __webpack_require__(272);
	var isPromise_1 = __webpack_require__(320);
	var isArray_1 = __webpack_require__(306);
	var ForkJoinObservable = (function (_super) {
	    __extends(ForkJoinObservable, _super);
	    function ForkJoinObservable(sources, resultSelector) {
	        _super.call(this);
	        this.sources = sources;
	        this.resultSelector = resultSelector;
	    }
	    ForkJoinObservable.create = function () {
	        var sources = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            sources[_i - 0] = arguments[_i];
	        }
	        if (sources === null || arguments.length === 0) {
	            return new empty_1.EmptyObservable();
	        }
	        var resultSelector = null;
	        if (typeof sources[sources.length - 1] === 'function') {
	            resultSelector = sources.pop();
	        }
	        // if the first and only other argument besides the resultSelector is an array
	        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`
	        if (sources.length === 1 && isArray_1.isArray(sources[0])) {
	            sources = sources[0];
	        }
	        return new ForkJoinObservable(sources, resultSelector);
	    };
	    ForkJoinObservable.prototype._subscribe = function (subscriber) {
	        var sources = this.sources;
	        var len = sources.length;
	        var context = { completed: 0, total: len, values: emptyArray(len), selector: this.resultSelector };
	        for (var i = 0; i < len; i++) {
	            var source = sources[i];
	            if (isPromise_1.isPromise(source)) {
	                source = new fromPromise_1.PromiseObservable(source);
	            }
	            source.subscribe(new AllSubscriber(subscriber, i, context));
	        }
	    };
	    return ForkJoinObservable;
	})(Observable_1.Observable);
	exports.ForkJoinObservable = ForkJoinObservable;
	var AllSubscriber = (function (_super) {
	    __extends(AllSubscriber, _super);
	    function AllSubscriber(destination, index, context) {
	        _super.call(this, destination);
	        this.index = index;
	        this.context = context;
	        this._value = null;
	    }
	    AllSubscriber.prototype._next = function (value) {
	        this._value = value;
	    };
	    AllSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (this._value == null) {
	            destination.complete();
	        }
	        var context = this.context;
	        context.completed++;
	        context.values[this.index] = this._value;
	        var values = context.values;
	        if (context.completed !== values.length) {
	            return;
	        }
	        if (values.every(hasValue)) {
	            var value = context.selector ? context.selector.apply(this, values) :
	                values;
	            destination.next(value);
	        }
	        destination.complete();
	    };
	    return AllSubscriber;
	})(Subscriber_1.Subscriber);
	function hasValue(x) {
	    return x !== null;
	}
	function emptyArray(len) {
	    var arr = [];
	    for (var i = 0; i < len; i++) {
	        arr.push(null);
	    }
	    return arr;
	}
	//# sourceMappingURL=forkJoin.js.map

/***/ },
/* 320 */
/***/ function(module, exports) {

	function isPromise(value) {
	    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
	}
	exports.isPromise = isPromise;
	//# sourceMappingURL=isPromise.js.map

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var from_1 = __webpack_require__(322);
	Observable_1.Observable.from = from_1.FromObservable.create;
	//# sourceMappingURL=from.js.map

/***/ },
/* 322 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var fromPromise_1 = __webpack_require__(62);
	var IteratorObservable_1 = __webpack_require__(323);
	var fromArray_1 = __webpack_require__(267);
	var SymbolShim_1 = __webpack_require__(58);
	var Observable_1 = __webpack_require__(51);
	var observeOn_support_1 = __webpack_require__(324);
	var queue_1 = __webpack_require__(63);
	var isArray = Array.isArray;
	var FromObservable = (function (_super) {
	    __extends(FromObservable, _super);
	    function FromObservable(ish, scheduler) {
	        _super.call(this, null);
	        this.ish = ish;
	        this.scheduler = scheduler;
	    }
	    FromObservable.create = function (ish, scheduler) {
	        if (scheduler === void 0) { scheduler = queue_1.queue; }
	        if (ish) {
	            if (isArray(ish)) {
	                return new fromArray_1.ArrayObservable(ish, scheduler);
	            }
	            else if (typeof ish.then === 'function') {
	                return new fromPromise_1.PromiseObservable(ish, scheduler);
	            }
	            else if (typeof ish[SymbolShim_1.SymbolShim.observable] === 'function') {
	                if (ish instanceof Observable_1.Observable) {
	                    return ish;
	                }
	                return new FromObservable(ish, scheduler);
	            }
	            else if (typeof ish[SymbolShim_1.SymbolShim.iterator] === 'function') {
	                return new IteratorObservable_1.IteratorObservable(ish, null, null, scheduler);
	            }
	        }
	        throw new TypeError((typeof ish) + ' is not observable');
	    };
	    FromObservable.prototype._subscribe = function (subscriber) {
	        var ish = this.ish;
	        var scheduler = this.scheduler;
	        if (scheduler === queue_1.queue) {
	            return ish[SymbolShim_1.SymbolShim.observable]().subscribe(subscriber);
	        }
	        else {
	            return ish[SymbolShim_1.SymbolShim.observable]().subscribe(new observeOn_support_1.ObserveOnSubscriber(subscriber, scheduler, 0));
	        }
	    };
	    return FromObservable;
	})(Observable_1.Observable);
	exports.FromObservable = FromObservable;
	//# sourceMappingURL=from.js.map

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(51);
	var root_1 = __webpack_require__(59);
	var SymbolShim_1 = __webpack_require__(58);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var IteratorObservable = (function (_super) {
	    __extends(IteratorObservable, _super);
	    function IteratorObservable(iterator, project, thisArg, scheduler) {
	        _super.call(this);
	        this.project = project;
	        this.thisArg = thisArg;
	        this.scheduler = scheduler;
	        if (iterator == null) {
	            throw new Error('iterator cannot be null.');
	        }
	        if (project && typeof project !== 'function') {
	            throw new Error('When provided, `project` must be a function.');
	        }
	        this.iterator = getIterator(iterator);
	    }
	    IteratorObservable.create = function (iterator, project, thisArg, scheduler) {
	        return new IteratorObservable(iterator, project, thisArg, scheduler);
	    };
	    IteratorObservable.dispatch = function (state) {
	        var index = state.index, hasError = state.hasError, thisArg = state.thisArg, project = state.project, iterator = state.iterator, subscriber = state.subscriber;
	        if (hasError) {
	            subscriber.error(state.error);
	            return;
	        }
	        var result = iterator.next();
	        if (result.done) {
	            subscriber.complete();
	            return;
	        }
	        if (project) {
	            result = tryCatch_1.tryCatch(project).call(thisArg, result.value, index);
	            if (result === errorObject_1.errorObject) {
	                state.error = errorObject_1.errorObject.e;
	                state.hasError = true;
	            }
	            else {
	                subscriber.next(result);
	                state.index = index + 1;
	            }
	        }
	        else {
	            subscriber.next(result.value);
	            state.index = index + 1;
	        }
	        if (subscriber.isUnsubscribed) {
	            return;
	        }
	        this.schedule(state);
	    };
	    IteratorObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var _a = this, iterator = _a.iterator, project = _a.project, thisArg = _a.thisArg, scheduler = _a.scheduler;
	        if (scheduler) {
	            subscriber.add(scheduler.schedule(IteratorObservable.dispatch, 0, {
	                index: index, thisArg: thisArg, project: project, iterator: iterator, subscriber: subscriber
	            }));
	        }
	        else {
	            do {
	                var result = iterator.next();
	                if (result.done) {
	                    subscriber.complete();
	                    break;
	                }
	                else if (project) {
	                    result = tryCatch_1.tryCatch(project).call(thisArg, result.value, index++);
	                    if (result === errorObject_1.errorObject) {
	                        subscriber.error(errorObject_1.errorObject.e);
	                        break;
	                    }
	                    subscriber.next(result);
	                }
	                else {
	                    subscriber.next(result.value);
	                }
	                if (subscriber.isUnsubscribed) {
	                    break;
	                }
	            } while (true);
	        }
	    };
	    return IteratorObservable;
	})(Observable_1.Observable);
	exports.IteratorObservable = IteratorObservable;
	var StringIterator = (function () {
	    function StringIterator(str, idx, len) {
	        if (idx === void 0) { idx = 0; }
	        if (len === void 0) { len = str.length; }
	        this.str = str;
	        this.idx = idx;
	        this.len = len;
	    }
	    StringIterator.prototype[SymbolShim_1.SymbolShim.iterator] = function () { return (this); };
	    StringIterator.prototype.next = function () {
	        return this.idx < this.len ? {
	            done: false,
	            value: this.str.charAt(this.idx++)
	        } : {
	            done: true,
	            value: undefined
	        };
	    };
	    return StringIterator;
	})();
	var ArrayIterator = (function () {
	    function ArrayIterator(arr, idx, len) {
	        if (idx === void 0) { idx = 0; }
	        if (len === void 0) { len = toLength(arr); }
	        this.arr = arr;
	        this.idx = idx;
	        this.len = len;
	    }
	    ArrayIterator.prototype[SymbolShim_1.SymbolShim.iterator] = function () { return this; };
	    ArrayIterator.prototype.next = function () {
	        return this.idx < this.len ? {
	            done: false,
	            value: this.arr[this.idx++]
	        } : {
	            done: true,
	            value: undefined
	        };
	    };
	    return ArrayIterator;
	})();
	function getIterator(obj) {
	    var i = obj[SymbolShim_1.SymbolShim.iterator];
	    if (!i && typeof obj === 'string') {
	        return new StringIterator(obj);
	    }
	    if (!i && obj.length !== undefined) {
	        return new ArrayIterator(obj);
	    }
	    if (!i) {
	        throw new TypeError('Object is not iterable');
	    }
	    return obj[SymbolShim_1.SymbolShim.iterator]();
	}
	var maxSafeInteger = Math.pow(2, 53) - 1;
	function toLength(o) {
	    var len = +o.length;
	    if (isNaN(len)) {
	        return 0;
	    }
	    if (len === 0 || !numberIsFinite(len)) {
	        return len;
	    }
	    len = sign(len) * Math.floor(Math.abs(len));
	    if (len <= 0) {
	        return 0;
	    }
	    if (len > maxSafeInteger) {
	        return maxSafeInteger;
	    }
	    return len;
	}
	function numberIsFinite(value) {
	    return typeof value === 'number' && root_1.root.isFinite(value);
	}
	function sign(value) {
	    var valueAsNumber = +value;
	    if (valueAsNumber === 0) {
	        return valueAsNumber;
	    }
	    if (isNaN(valueAsNumber)) {
	        return valueAsNumber;
	    }
	    return valueAsNumber < 0 ? -1 : 1;
	}
	//# sourceMappingURL=IteratorObservable.js.map

/***/ },
/* 324 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var Notification_1 = __webpack_require__(325);
	var ObserveOnOperator = (function () {
	    function ObserveOnOperator(scheduler, delay) {
	        if (delay === void 0) { delay = 0; }
	        this.scheduler = scheduler;
	        this.delay = delay;
	    }
	    ObserveOnOperator.prototype.call = function (subscriber) {
	        return new ObserveOnSubscriber(subscriber, this.scheduler, this.delay);
	    };
	    return ObserveOnOperator;
	})();
	exports.ObserveOnOperator = ObserveOnOperator;
	var ObserveOnSubscriber = (function (_super) {
	    __extends(ObserveOnSubscriber, _super);
	    function ObserveOnSubscriber(destination, scheduler, delay) {
	        if (delay === void 0) { delay = 0; }
	        _super.call(this, destination);
	        this.scheduler = scheduler;
	        this.delay = delay;
	    }
	    ObserveOnSubscriber.dispatch = function (_a) {
	        var notification = _a.notification, destination = _a.destination;
	        notification.observe(destination);
	    };
	    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
	        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
	    };
	    ObserveOnSubscriber.prototype._next = function (value) {
	        this.scheduleMessage(Notification_1.Notification.createNext(value));
	    };
	    ObserveOnSubscriber.prototype._error = function (err) {
	        this.scheduleMessage(Notification_1.Notification.createError(err));
	    };
	    ObserveOnSubscriber.prototype._complete = function () {
	        this.scheduleMessage(Notification_1.Notification.createComplete());
	    };
	    return ObserveOnSubscriber;
	})(Subscriber_1.Subscriber);
	exports.ObserveOnSubscriber = ObserveOnSubscriber;
	var ObserveOnMessage = (function () {
	    function ObserveOnMessage(notification, destination) {
	        this.notification = notification;
	        this.destination = destination;
	    }
	    return ObserveOnMessage;
	})();
	//# sourceMappingURL=observeOn-support.js.map

/***/ },
/* 325 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var Notification = (function () {
	    function Notification(kind, value, exception) {
	        this.kind = kind;
	        this.value = value;
	        this.exception = exception;
	        this.hasValue = kind === 'N';
	    }
	    Notification.prototype.observe = function (observer) {
	        switch (this.kind) {
	            case 'N':
	                return observer.next(this.value);
	            case 'E':
	                return observer.error(this.exception);
	            case 'C':
	                return observer.complete();
	        }
	    };
	    Notification.prototype.do = function (next, error, complete) {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return next(this.value);
	            case 'E':
	                return error(this.exception);
	            case 'C':
	                return complete();
	        }
	    };
	    Notification.prototype.accept = function (nextOrObserver, error, complete) {
	        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
	            return this.observe(nextOrObserver);
	        }
	        else {
	            return this.do(nextOrObserver, error, complete);
	        }
	    };
	    Notification.prototype.toObservable = function () {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return Observable_1.Observable.of(this.value);
	            case 'E':
	                return Observable_1.Observable.throw(this.exception);
	            case 'C':
	                return Observable_1.Observable.empty();
	        }
	    };
	    Notification.createNext = function (value) {
	        if (typeof value !== 'undefined') {
	            return new Notification('N', value);
	        }
	        return this.undefinedValueNotification;
	    };
	    Notification.createError = function (err) {
	        return new Notification('E', undefined, err);
	    };
	    Notification.createComplete = function () {
	        return this.completeNotification;
	    };
	    Notification.completeNotification = new Notification('C');
	    Notification.undefinedValueNotification = new Notification('N', undefined);
	    return Notification;
	})();
	exports.Notification = Notification;
	//# sourceMappingURL=Notification.js.map

/***/ },
/* 326 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var fromEvent_1 = __webpack_require__(327);
	Observable_1.Observable.fromEvent = fromEvent_1.FromEventObservable.create;
	//# sourceMappingURL=fromEvent.js.map

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(51);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var Subscription_1 = __webpack_require__(56);
	var FromEventObservable = (function (_super) {
	    __extends(FromEventObservable, _super);
	    function FromEventObservable(sourceObj, eventName, selector) {
	        _super.call(this);
	        this.sourceObj = sourceObj;
	        this.eventName = eventName;
	        this.selector = selector;
	    }
	    FromEventObservable.create = function (sourceObj, eventName, selector) {
	        return new FromEventObservable(sourceObj, eventName, selector);
	    };
	    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber) {
	        var unsubscribe;
	        var tag = sourceObj.toString();
	        if (tag === '[object NodeList]' || tag === '[object HTMLCollection]') {
	            for (var i = 0, len = sourceObj.length; i < len; i++) {
	                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber);
	            }
	        }
	        else if (typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function') {
	            sourceObj.addEventListener(eventName, handler);
	            unsubscribe = function () { return sourceObj.removeEventListener(eventName, handler); };
	        }
	        else if (typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function') {
	            sourceObj.on(eventName, handler);
	            unsubscribe = function () { return sourceObj.off(eventName, handler); };
	        }
	        else if (typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function') {
	            sourceObj.addListener(eventName, handler);
	            unsubscribe = function () { return sourceObj.removeListener(eventName, handler); };
	        }
	        subscriber.add(new Subscription_1.Subscription(unsubscribe));
	    };
	    FromEventObservable.prototype._subscribe = function (subscriber) {
	        var sourceObj = this.sourceObj;
	        var eventName = this.eventName;
	        var selector = this.selector;
	        var handler = selector ? function (e) {
	            var result = tryCatch_1.tryCatch(selector)(e);
	            if (result === errorObject_1.errorObject) {
	                subscriber.error(result.e);
	            }
	            else {
	                subscriber.next(result);
	            }
	        } : function (e) { return subscriber.next(e); };
	        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber);
	    };
	    return FromEventObservable;
	})(Observable_1.Observable);
	exports.FromEventObservable = FromEventObservable;
	//# sourceMappingURL=fromEvent.js.map

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var fromEventPattern_1 = __webpack_require__(329);
	Observable_1.Observable.fromEventPattern = fromEventPattern_1.FromEventPatternObservable.create;
	//# sourceMappingURL=fromEventPattern.js.map

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(51);
	var Subscription_1 = __webpack_require__(56);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var FromEventPatternObservable = (function (_super) {
	    __extends(FromEventPatternObservable, _super);
	    function FromEventPatternObservable(addHandler, removeHandler, selector) {
	        _super.call(this);
	        this.addHandler = addHandler;
	        this.removeHandler = removeHandler;
	        this.selector = selector;
	    }
	    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {
	        return new FromEventPatternObservable(addHandler, removeHandler, selector);
	    };
	    FromEventPatternObservable.prototype._subscribe = function (subscriber) {
	        var addHandler = this.addHandler;
	        var removeHandler = this.removeHandler;
	        var selector = this.selector;
	        var handler = selector ? function (e) {
	            var result = tryCatch_1.tryCatch(selector).apply(null, arguments);
	            if (result === errorObject_1.errorObject) {
	                subscriber.error(result.e);
	            }
	            else {
	                subscriber.next(result);
	            }
	        } : function (e) { subscriber.next(e); };
	        var result = tryCatch_1.tryCatch(addHandler)(handler);
	        if (result === errorObject_1.errorObject) {
	            subscriber.error(result.e);
	        }
	        subscriber.add(new Subscription_1.Subscription(function () {
	            //TODO: determine whether or not to forward to error handler
	            removeHandler(handler);
	        }));
	    };
	    return FromEventPatternObservable;
	})(Observable_1.Observable);
	exports.FromEventPatternObservable = FromEventPatternObservable;
	//# sourceMappingURL=fromEventPattern.js.map

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var fromPromise_1 = __webpack_require__(62);
	Observable_1.Observable.fromPromise = fromPromise_1.PromiseObservable.create;
	//# sourceMappingURL=fromPromise.js.map

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var interval_1 = __webpack_require__(332);
	Observable_1.Observable.interval = interval_1.IntervalObservable.create;
	//# sourceMappingURL=interval.js.map

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isNumeric_1 = __webpack_require__(333);
	var Observable_1 = __webpack_require__(51);
	var asap_1 = __webpack_require__(334);
	var IntervalObservable = (function (_super) {
	    __extends(IntervalObservable, _super);
	    function IntervalObservable(period, scheduler) {
	        if (period === void 0) { period = 0; }
	        if (scheduler === void 0) { scheduler = asap_1.asap; }
	        _super.call(this);
	        this.period = period;
	        this.scheduler = scheduler;
	        if (!isNumeric_1.isNumeric(period) || period < 0) {
	            this.period = 0;
	        }
	        if (!scheduler || typeof scheduler.schedule !== 'function') {
	            this.scheduler = asap_1.asap;
	        }
	    }
	    IntervalObservable.create = function (period, scheduler) {
	        if (period === void 0) { period = 0; }
	        if (scheduler === void 0) { scheduler = asap_1.asap; }
	        return new IntervalObservable(period, scheduler);
	    };
	    IntervalObservable.dispatch = function (state) {
	        var index = state.index, subscriber = state.subscriber, period = state.period;
	        subscriber.next(index);
	        if (subscriber.isUnsubscribed) {
	            return;
	        }
	        state.index += 1;
	        this.schedule(state, period);
	    };
	    IntervalObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var period = this.period;
	        var scheduler = this.scheduler;
	        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {
	            index: index, subscriber: subscriber, period: period
	        }));
	    };
	    return IntervalObservable;
	})(Observable_1.Observable);
	exports.IntervalObservable = IntervalObservable;
	//# sourceMappingURL=interval.js.map

/***/ },
/* 333 */
/***/ function(module, exports) {

	var is_array = Array.isArray;
	function isNumeric(val) {
	    // parseFloat NaNs numeric-cast false positives (null|true|false|"")
	    // ...but misinterprets leading-number strings, particularly hex literals ("0x...")
	    // subtraction forces infinities to NaN
	    // adding 1 corrects loss of precision from parseFloat (#15100)
	    return !is_array(val) && (val - parseFloat(val) + 1) >= 0;
	}
	exports.isNumeric = isNumeric;
	;
	//# sourceMappingURL=isNumeric.js.map

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	var AsapScheduler_1 = __webpack_require__(335);
	exports.asap = new AsapScheduler_1.AsapScheduler();
	//# sourceMappingURL=asap.js.map

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var QueueScheduler_1 = __webpack_require__(64);
	var AsapAction_1 = __webpack_require__(336);
	var QueueAction_1 = __webpack_require__(65);
	var AsapScheduler = (function (_super) {
	    __extends(AsapScheduler, _super);
	    function AsapScheduler() {
	        _super.apply(this, arguments);
	    }
	    AsapScheduler.prototype.scheduleNow = function (work, state) {
	        return (this.scheduled ?
	            new QueueAction_1.QueueAction(this, work) :
	            new AsapAction_1.AsapAction(this, work)).schedule(state);
	    };
	    return AsapScheduler;
	})(QueueScheduler_1.QueueScheduler);
	exports.AsapScheduler = AsapScheduler;
	//# sourceMappingURL=AsapScheduler.js.map

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Immediate_1 = __webpack_require__(337);
	var QueueAction_1 = __webpack_require__(65);
	var AsapAction = (function (_super) {
	    __extends(AsapAction, _super);
	    function AsapAction() {
	        _super.apply(this, arguments);
	    }
	    AsapAction.prototype.schedule = function (state) {
	        var _this = this;
	        if (this.isUnsubscribed) {
	            return this;
	        }
	        this.state = state;
	        var scheduler = this.scheduler;
	        scheduler.actions.push(this);
	        if (!scheduler.scheduled) {
	            scheduler.scheduled = true;
	            this.id = Immediate_1.Immediate.setImmediate(function () {
	                _this.id = null;
	                _this.scheduler.scheduled = false;
	                _this.scheduler.flush();
	            });
	        }
	        return this;
	    };
	    AsapAction.prototype.unsubscribe = function () {
	        var id = this.id;
	        var scheduler = this.scheduler;
	        _super.prototype.unsubscribe.call(this);
	        if (scheduler.actions.length === 0) {
	            scheduler.active = false;
	            scheduler.scheduled = false;
	        }
	        if (id) {
	            this.id = null;
	            Immediate_1.Immediate.clearImmediate(id);
	        }
	    };
	    return AsapAction;
	})(QueueAction_1.QueueAction);
	exports.AsapAction = AsapAction;
	//# sourceMappingURL=AsapAction.js.map

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(clearImmediate, setImmediate) {/**
	Some credit for this helper goes to http://github.com/YuzuJS/setImmediate
	*/
	var root_1 = __webpack_require__(59);
	var ImmediateDefinition = (function () {
	    function ImmediateDefinition(root) {
	        this.root = root;
	        if (root.setImmediate) {
	            this.setImmediate = root.setImmediate;
	            this.clearImmediate = root.clearImmediate;
	        }
	        else {
	            this.nextHandle = 1;
	            this.tasksByHandle = {};
	            this.currentlyRunningATask = false;
	            // Don't get fooled by e.g. browserify environments.
	            if (this.canUseProcessNextTick()) {
	                // For Node.js before 0.9
	                this.setImmediate = this.createProcessNextTickSetImmediate();
	            }
	            else if (this.canUsePostMessage()) {
	                // For non-IE10 modern browsers
	                this.setImmediate = this.createPostMessageSetImmediate();
	            }
	            else if (this.canUseMessageChannel()) {
	                // For web workers, where supported
	                this.setImmediate = this.createMessageChannelSetImmediate();
	            }
	            else if (this.canUseReadyStateChange()) {
	                // For IE 6–8
	                this.setImmediate = this.createReadyStateChangeSetImmediate();
	            }
	            else {
	                // For older browsers
	                this.setImmediate = this.createSetTimeoutSetImmediate();
	            }
	            var ci = function clearImmediate(handle) {
	                delete clearImmediate.instance.tasksByHandle[handle];
	            };
	            ci.instance = this;
	            this.clearImmediate = ci;
	        }
	    }
	    ImmediateDefinition.prototype.identify = function (o) {
	        return this.root.Object.prototype.toString.call(o);
	    };
	    ImmediateDefinition.prototype.canUseProcessNextTick = function () {
	        return this.identify(this.root.process) === '[object process]';
	    };
	    ImmediateDefinition.prototype.canUseMessageChannel = function () {
	        return Boolean(this.root.MessageChannel);
	    };
	    ImmediateDefinition.prototype.canUseReadyStateChange = function () {
	        var document = this.root.document;
	        return Boolean(document && 'onreadystatechange' in document.createElement('script'));
	    };
	    ImmediateDefinition.prototype.canUsePostMessage = function () {
	        var root = this.root;
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `root.postMessage` means something completely different and can't be used for this purpose.
	        if (root.postMessage && !root.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = root.onmessage;
	            root.onmessage = function () {
	                postMessageIsAsynchronous = false;
	            };
	            root.postMessage('', '*');
	            root.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	        return false;
	    };
	    // This function accepts the same arguments as setImmediate, but
	    // returns a function that requires no arguments.
	    ImmediateDefinition.prototype.partiallyApplied = function (handler) {
	        var args = [];
	        for (var _i = 1; _i < arguments.length; _i++) {
	            args[_i - 1] = arguments[_i];
	        }
	        var fn = function result() {
	            var _a = result, handler = _a.handler, args = _a.args;
	            if (typeof handler === 'function') {
	                handler.apply(undefined, args);
	            }
	            else {
	                (new Function('' + handler))();
	            }
	        };
	        fn.handler = handler;
	        fn.args = args;
	        return fn;
	    };
	    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {
	        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);
	        return this.nextHandle++;
	    };
	    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {
	        var fn = function setImmediate() {
	            var instance = setImmediate.instance;
	            var handle = instance.addFromSetImmediateArguments(arguments);
	            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));
	            return handle;
	        };
	        fn.instance = this;
	        return fn;
	    };
	    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages
	        var root = this.root;
	        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';
	        var onGlobalMessage = function globalMessageHandler(event) {
	            var instance = globalMessageHandler.instance;
	            if (event.source === root &&
	                typeof event.data === 'string' &&
	                event.data.indexOf(messagePrefix) === 0) {
	                instance.runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };
	        onGlobalMessage.instance = this;
	        root.addEventListener('message', onGlobalMessage, false);
	        var fn = function setImmediate() {
	            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;
	            var handle = instance.addFromSetImmediateArguments(arguments);
	            instance.root.postMessage(messagePrefix + handle, '*');
	            return handle;
	        };
	        fn.instance = this;
	        fn.messagePrefix = messagePrefix;
	        return fn;
	    };
	    ImmediateDefinition.prototype.runIfPresent = function (handle) {
	        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (this.currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // 'too much recursion' error.
	            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);
	        }
	        else {
	            var task = this.tasksByHandle[handle];
	            if (task) {
	                this.currentlyRunningATask = true;
	                try {
	                    task();
	                }
	                finally {
	                    this.clearImmediate(handle);
	                    this.currentlyRunningATask = false;
	                }
	            }
	        }
	    };
	    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {
	        var _this = this;
	        var channel = new this.root.MessageChannel();
	        channel.port1.onmessage = function (event) {
	            var handle = event.data;
	            _this.runIfPresent(handle);
	        };
	        var fn = function setImmediate() {
	            var _a = setImmediate, channel = _a.channel, instance = _a.instance;
	            var handle = instance.addFromSetImmediateArguments(arguments);
	            channel.port2.postMessage(handle);
	            return handle;
	        };
	        fn.channel = channel;
	        fn.instance = this;
	        return fn;
	    };
	    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {
	        var fn = function setImmediate() {
	            var instance = setImmediate.instance;
	            var root = instance.root;
	            var doc = root.document;
	            var html = doc.documentElement;
	            var handle = instance.addFromSetImmediateArguments(arguments);
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement('script');
	            script.onreadystatechange = function () {
	                instance.runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	            return handle;
	        };
	        fn.instance = this;
	        return fn;
	    };
	    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {
	        var fn = function setImmediate() {
	            var instance = setImmediate.instance;
	            var handle = instance.addFromSetImmediateArguments(arguments);
	            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);
	            return handle;
	        };
	        fn.instance = this;
	        return fn;
	    };
	    return ImmediateDefinition;
	})();
	exports.ImmediateDefinition = ImmediateDefinition;
	exports.Immediate = new ImmediateDefinition(root_1.root);
	//# sourceMappingURL=Immediate.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(338).clearImmediate, __webpack_require__(338).setImmediate))

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(setImmediate, clearImmediate) {var nextTick = __webpack_require__(339).nextTick;
	var apply = Function.prototype.apply;
	var slice = Array.prototype.slice;
	var immediateIds = {};
	var nextImmediateId = 0;
	
	// DOM APIs, for completeness
	
	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) { timeout.close(); };
	
	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};
	
	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};
	
	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};
	
	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);
	
	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};
	
	// That's not how node.js implements it but the exposed api is the same.
	exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
	  var id = nextImmediateId++;
	  var args = arguments.length < 2 ? false : slice.call(arguments, 1);
	
	  immediateIds[id] = true;
	
	  nextTick(function onNextTick() {
	    if (immediateIds[id]) {
	      // fn.call() is faster so we optimize for the common use-case
	      // @see http://jsperf.com/call-apply-segu
	      if (args) {
	        fn.apply(null, args);
	      } else {
	        fn.call(null);
	      }
	      // Prevent ids from leaking
	      exports.clearImmediate(id);
	    }
	  });
	
	  return id;
	};
	
	exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
	  delete immediateIds[id];
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(338).setImmediate, __webpack_require__(338).clearImmediate))

/***/ },
/* 339 */
/***/ function(module, exports) {

	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var never_1 = __webpack_require__(341);
	Observable_1.Observable.never = never_1.InfiniteObservable.create;
	//# sourceMappingURL=never.js.map

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(51);
	var noop_1 = __webpack_require__(53);
	var InfiniteObservable = (function (_super) {
	    __extends(InfiniteObservable, _super);
	    function InfiniteObservable() {
	        _super.call(this);
	    }
	    InfiniteObservable.create = function () {
	        return new InfiniteObservable();
	    };
	    InfiniteObservable.prototype._subscribe = function (subscriber) {
	        noop_1.noop();
	    };
	    return InfiniteObservable;
	})(Observable_1.Observable);
	exports.InfiniteObservable = InfiniteObservable;
	//# sourceMappingURL=never.js.map

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var range_1 = __webpack_require__(343);
	Observable_1.Observable.range = range_1.RangeObservable.create;
	//# sourceMappingURL=range.js.map

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(51);
	var RangeObservable = (function (_super) {
	    __extends(RangeObservable, _super);
	    function RangeObservable(start, end, scheduler) {
	        _super.call(this);
	        this.start = start;
	        this.end = end;
	        this.scheduler = scheduler;
	    }
	    RangeObservable.create = function (start, end, scheduler) {
	        if (start === void 0) { start = 0; }
	        if (end === void 0) { end = 0; }
	        return new RangeObservable(start, end, scheduler);
	    };
	    RangeObservable.dispatch = function (state) {
	        var start = state.start, index = state.index, end = state.end, subscriber = state.subscriber;
	        if (index >= end) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(start);
	        if (subscriber.isUnsubscribed) {
	            return;
	        }
	        state.index = index + 1;
	        state.start = start + 1;
	        this.schedule(state);
	    };
	    RangeObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var start = this.start;
	        var end = this.end;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            subscriber.add(scheduler.schedule(RangeObservable.dispatch, 0, {
	                index: index, end: end, start: start, subscriber: subscriber
	            }));
	        }
	        else {
	            do {
	                if (index++ >= end) {
	                    subscriber.complete();
	                    break;
	                }
	                subscriber.next(start++);
	                if (subscriber.isUnsubscribed) {
	                    break;
	                }
	            } while (true);
	        }
	    };
	    return RangeObservable;
	})(Observable_1.Observable);
	exports.RangeObservable = RangeObservable;
	//# sourceMappingURL=range.js.map

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var throw_1 = __webpack_require__(271);
	Observable_1.Observable.throw = throw_1.ErrorObservable.create;
	//# sourceMappingURL=throw.js.map

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var timer_1 = __webpack_require__(346);
	Observable_1.Observable.timer = timer_1.TimerObservable.create;
	//# sourceMappingURL=timer.js.map

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isNumeric_1 = __webpack_require__(333);
	var Observable_1 = __webpack_require__(51);
	var asap_1 = __webpack_require__(334);
	var isScheduler_1 = __webpack_require__(273);
	var isDate_1 = __webpack_require__(347);
	var TimerObservable = (function (_super) {
	    __extends(TimerObservable, _super);
	    function TimerObservable(dueTime, period, scheduler) {
	        if (dueTime === void 0) { dueTime = 0; }
	        _super.call(this);
	        this.period = period;
	        this.scheduler = scheduler;
	        this.dueTime = 0;
	        if (isNumeric_1.isNumeric(period)) {
	            this._period = Number(period) < 1 && 1 || Number(period);
	        }
	        else if (isScheduler_1.isScheduler(period)) {
	            scheduler = period;
	        }
	        if (!isScheduler_1.isScheduler(scheduler)) {
	            scheduler = asap_1.asap;
	        }
	        this.scheduler = scheduler;
	        var absoluteDueTime = isDate_1.isDate(dueTime);
	        this.dueTime = absoluteDueTime ? (+dueTime - this.scheduler.now()) : dueTime;
	    }
	    TimerObservable.create = function (dueTime, period, scheduler) {
	        if (dueTime === void 0) { dueTime = 0; }
	        return new TimerObservable(dueTime, period, scheduler);
	    };
	    TimerObservable.dispatch = function (state) {
	        var index = state.index, period = state.period, subscriber = state.subscriber;
	        var action = this;
	        subscriber.next(index);
	        if (typeof period === 'undefined') {
	            subscriber.complete();
	            return;
	        }
	        else if (subscriber.isUnsubscribed) {
	            return;
	        }
	        if (typeof action.delay === 'undefined') {
	            action.add(action.scheduler.schedule(TimerObservable.dispatch, period, {
	                index: index + 1, period: period, subscriber: subscriber
	            }));
	        }
	        else {
	            state.index = index + 1;
	            action.schedule(state, period);
	        }
	    };
	    TimerObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var period = this._period;
	        var dueTime = this.dueTime;
	        var scheduler = this.scheduler;
	        subscriber.add(scheduler.schedule(TimerObservable.dispatch, dueTime, { index: index, period: period, subscriber: subscriber }));
	    };
	    return TimerObservable;
	})(Observable_1.Observable);
	exports.TimerObservable = TimerObservable;
	//# sourceMappingURL=timer.js.map

/***/ },
/* 347 */
/***/ function(module, exports) {

	function isDate(value) {
	    return value instanceof Date && !isNaN(+value);
	}
	exports.isDate = isDate;
	//# sourceMappingURL=isDate.js.map

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var zip_static_1 = __webpack_require__(349);
	Observable_1.Observable.zip = zip_static_1.zip;
	//# sourceMappingURL=zip-static.js.map

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	var fromArray_1 = __webpack_require__(267);
	var zip_support_1 = __webpack_require__(350);
	function zip() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var project = observables[observables.length - 1];
	    if (typeof project === 'function') {
	        observables.pop();
	    }
	    return new fromArray_1.ArrayObservable(observables).lift(new zip_support_1.ZipOperator(project));
	}
	exports.zip = zip;
	//# sourceMappingURL=zip-static.js.map

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var OuterSubscriber_1 = __webpack_require__(303);
	var subscribeToResult_1 = __webpack_require__(304);
	var SymbolShim_1 = __webpack_require__(58);
	var isArray = Array.isArray;
	var ZipOperator = (function () {
	    function ZipOperator(project) {
	        this.project = project;
	    }
	    ZipOperator.prototype.call = function (subscriber) {
	        return new ZipSubscriber(subscriber, this.project);
	    };
	    return ZipOperator;
	})();
	exports.ZipOperator = ZipOperator;
	var ZipSubscriber = (function (_super) {
	    __extends(ZipSubscriber, _super);
	    function ZipSubscriber(destination, project, values) {
	        if (values === void 0) { values = Object.create(null); }
	        _super.call(this, destination);
	        this.index = 0;
	        this.iterators = [];
	        this.active = 0;
	        this.project = (typeof project === 'function') ? project : null;
	        this.values = values;
	    }
	    ZipSubscriber.prototype._next = function (value) {
	        var iterators = this.iterators;
	        var index = this.index++;
	        if (isArray(value)) {
	            iterators.push(new StaticArrayIterator(value));
	        }
	        else if (typeof value[SymbolShim_1.SymbolShim.iterator] === 'function') {
	            iterators.push(new StaticIterator(value[SymbolShim_1.SymbolShim.iterator]()));
	        }
	        else {
	            iterators.push(new ZipBufferIterator(this.destination, this, value, index));
	        }
	    };
	    ZipSubscriber.prototype._complete = function () {
	        var iterators = this.iterators;
	        var len = iterators.length;
	        this.active = len;
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            if (iterator.stillUnsubscribed) {
	                iterator.subscribe(iterator, i);
	            }
	            else {
	                this.active--; // not an observable
	            }
	        }
	    };
	    ZipSubscriber.prototype.notifyInactive = function () {
	        this.active--;
	        if (this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    ZipSubscriber.prototype.checkIterators = function () {
	        var iterators = this.iterators;
	        var len = iterators.length;
	        var destination = this.destination;
	        // abort if not all of them have values
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
	                return;
	            }
	        }
	        var shouldComplete = false;
	        var args = [];
	        for (var i = 0; i < len; i++) {
	            var iterator = iterators[i];
	            var result = iterator.next();
	            // check to see if it's completed now that you've gotten
	            // the next value.
	            if (iterator.hasCompleted()) {
	                shouldComplete = true;
	            }
	            if (result.done) {
	                destination.complete();
	                return;
	            }
	            args.push(result.value);
	        }
	        var project = this.project;
	        if (project) {
	            var result = tryCatch_1.tryCatch(project).apply(this, args);
	            if (result === errorObject_1.errorObject) {
	                destination.error(errorObject_1.errorObject.e);
	            }
	            else {
	                destination.next(result);
	            }
	        }
	        else {
	            destination.next(args);
	        }
	        if (shouldComplete) {
	            destination.complete();
	        }
	    };
	    return ZipSubscriber;
	})(Subscriber_1.Subscriber);
	exports.ZipSubscriber = ZipSubscriber;
	var StaticIterator = (function () {
	    function StaticIterator(iterator) {
	        this.iterator = iterator;
	        this.nextResult = iterator.next();
	    }
	    StaticIterator.prototype.hasValue = function () {
	        return true;
	    };
	    StaticIterator.prototype.next = function () {
	        var result = this.nextResult;
	        this.nextResult = this.iterator.next();
	        return result;
	    };
	    StaticIterator.prototype.hasCompleted = function () {
	        var nextResult = this.nextResult;
	        return nextResult && nextResult.done;
	    };
	    return StaticIterator;
	})();
	var StaticArrayIterator = (function () {
	    function StaticArrayIterator(array) {
	        this.array = array;
	        this.index = 0;
	        this.length = 0;
	        this.length = array.length;
	    }
	    StaticArrayIterator.prototype[SymbolShim_1.SymbolShim.iterator] = function () {
	        return this;
	    };
	    StaticArrayIterator.prototype.next = function (value) {
	        var i = this.index++;
	        var array = this.array;
	        return i < this.length ? { value: array[i], done: false } : { done: true };
	    };
	    StaticArrayIterator.prototype.hasValue = function () {
	        return this.array.length > this.index;
	    };
	    StaticArrayIterator.prototype.hasCompleted = function () {
	        return this.array.length === this.index;
	    };
	    return StaticArrayIterator;
	})();
	var ZipBufferIterator = (function (_super) {
	    __extends(ZipBufferIterator, _super);
	    function ZipBufferIterator(destination, parent, observable, index) {
	        _super.call(this, destination);
	        this.parent = parent;
	        this.observable = observable;
	        this.index = index;
	        this.stillUnsubscribed = true;
	        this.buffer = [];
	        this.isComplete = false;
	    }
	    ZipBufferIterator.prototype[SymbolShim_1.SymbolShim.iterator] = function () {
	        return this;
	    };
	    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next
	    //    this is legit because `next()` will never be called by a subscription in this case.
	    ZipBufferIterator.prototype.next = function () {
	        var buffer = this.buffer;
	        if (buffer.length === 0 && this.isComplete) {
	            return { done: true };
	        }
	        else {
	            return { value: buffer.shift(), done: false };
	        }
	    };
	    ZipBufferIterator.prototype.hasValue = function () {
	        return this.buffer.length > 0;
	    };
	    ZipBufferIterator.prototype.hasCompleted = function () {
	        return this.buffer.length === 0 && this.isComplete;
	    };
	    ZipBufferIterator.prototype.notifyComplete = function () {
	        if (this.buffer.length > 0) {
	            this.isComplete = true;
	            this.parent.notifyInactive();
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
	        this.buffer.push(innerValue);
	        this.parent.checkIterators();
	    };
	    ZipBufferIterator.prototype.subscribe = function (value, index) {
	        this.add(subscribeToResult_1.subscribeToResult(this, this.observable, this, index));
	    };
	    return ZipBufferIterator;
	})(OuterSubscriber_1.OuterSubscriber);
	//# sourceMappingURL=zip-support.js.map

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var buffer_1 = __webpack_require__(352);
	Observable_1.Observable.prototype.buffer = buffer_1.buffer;
	//# sourceMappingURL=buffer.js.map

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	/**
	 * buffers the incoming observable values until the passed `closingNotifier` emits a value, at which point
	 * it emits the buffer on the returned observable and starts a new buffer internally, awaiting the
	 * next time `closingNotifier` emits
	 *
	 * @param {Observable<any>} closingNotifier an observable, that signals the buffer to be emitted} from the returned observable
	 * @returns {Observable<T[]>} an observable of buffers, which are arrays of values
	 */
	function buffer(closingNotifier) {
	    return this.lift(new BufferOperator(closingNotifier));
	}
	exports.buffer = buffer;
	var BufferOperator = (function () {
	    function BufferOperator(closingNotifier) {
	        this.closingNotifier = closingNotifier;
	    }
	    BufferOperator.prototype.call = function (subscriber) {
	        return new BufferSubscriber(subscriber, this.closingNotifier);
	    };
	    return BufferOperator;
	})();
	var BufferSubscriber = (function (_super) {
	    __extends(BufferSubscriber, _super);
	    function BufferSubscriber(destination, closingNotifier) {
	        _super.call(this, destination);
	        this.buffer = [];
	        this.notifierSubscriber = null;
	        this.notifierSubscriber = new BufferClosingNotifierSubscriber(this);
	        this.add(closingNotifier._subscribe(this.notifierSubscriber));
	    }
	    BufferSubscriber.prototype._next = function (value) {
	        this.buffer.push(value);
	    };
	    BufferSubscriber.prototype._error = function (err) {
	        this.destination.error(err);
	    };
	    BufferSubscriber.prototype._complete = function () {
	        this.destination.complete();
	    };
	    BufferSubscriber.prototype.flushBuffer = function () {
	        var buffer = this.buffer;
	        this.buffer = [];
	        this.destination.next(buffer);
	        if (this.isUnsubscribed) {
	            this.notifierSubscriber.unsubscribe();
	        }
	    };
	    return BufferSubscriber;
	})(Subscriber_1.Subscriber);
	var BufferClosingNotifierSubscriber = (function (_super) {
	    __extends(BufferClosingNotifierSubscriber, _super);
	    function BufferClosingNotifierSubscriber(parent) {
	        _super.call(this, null);
	        this.parent = parent;
	    }
	    BufferClosingNotifierSubscriber.prototype._next = function (value) {
	        this.parent.flushBuffer();
	    };
	    BufferClosingNotifierSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	    };
	    BufferClosingNotifierSubscriber.prototype._complete = function () {
	        this.parent.complete();
	    };
	    return BufferClosingNotifierSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=buffer.js.map

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var bufferCount_1 = __webpack_require__(354);
	Observable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;
	//# sourceMappingURL=bufferCount.js.map

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	/**
	 * buffers a number of values from the source observable by `bufferSize` then emits the buffer and clears it, and starts a
	 * new buffer each `startBufferEvery` values. If `startBufferEvery` is not provided or is `null`, then new buffers are
	 * started immediately at the start of the source and when each buffer closes and is emitted.
	 * @param {number} bufferSize the maximum size of the buffer emitted.
	 * @param {number} [startBufferEvery] optional interval at which to start a new buffer. (e.g. if `startBufferEvery` is `2`,asdf then a
	 *   new buffer will be started on every other value from the source.) A new buffer is started at the beginning of the source by default.
	 * @returns {Observable<T[]>} an observable of arrays of buffered values.
	 */
	function bufferCount(bufferSize, startBufferEvery) {
	    if (startBufferEvery === void 0) { startBufferEvery = null; }
	    return this.lift(new BufferCountOperator(bufferSize, startBufferEvery));
	}
	exports.bufferCount = bufferCount;
	var BufferCountOperator = (function () {
	    function BufferCountOperator(bufferSize, startBufferEvery) {
	        this.bufferSize = bufferSize;
	        this.startBufferEvery = startBufferEvery;
	    }
	    BufferCountOperator.prototype.call = function (subscriber) {
	        return new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery);
	    };
	    return BufferCountOperator;
	})();
	var BufferCountSubscriber = (function (_super) {
	    __extends(BufferCountSubscriber, _super);
	    function BufferCountSubscriber(destination, bufferSize, startBufferEvery) {
	        _super.call(this, destination);
	        this.bufferSize = bufferSize;
	        this.startBufferEvery = startBufferEvery;
	        this.buffers = [[]];
	        this.count = 0;
	    }
	    BufferCountSubscriber.prototype._next = function (value) {
	        var count = (this.count += 1);
	        var destination = this.destination;
	        var bufferSize = this.bufferSize;
	        var startBufferEvery = (this.startBufferEvery == null) ? bufferSize : this.startBufferEvery;
	        var buffers = this.buffers;
	        var len = buffers.length;
	        var remove = -1;
	        if (count % startBufferEvery === 0) {
	            buffers.push([]);
	        }
	        for (var i = 0; i < len; i++) {
	            var buffer = buffers[i];
	            buffer.push(value);
	            if (buffer.length === bufferSize) {
	                remove = i;
	                destination.next(buffer);
	            }
	        }
	        if (remove !== -1) {
	            buffers.splice(remove, 1);
	        }
	    };
	    BufferCountSubscriber.prototype._error = function (err) {
	        this.destination.error(err);
	    };
	    BufferCountSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        var buffers = this.buffers;
	        while (buffers.length > 0) {
	            var buffer = buffers.shift();
	            if (buffer.length > 0) {
	                destination.next(buffer);
	            }
	        }
	        destination.complete();
	    };
	    return BufferCountSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=bufferCount.js.map

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var bufferTime_1 = __webpack_require__(356);
	Observable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;
	//# sourceMappingURL=bufferTime.js.map

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var asap_1 = __webpack_require__(334);
	/**
	 * buffers values from the source for a specific time period. Optionally allows new buffers to be set up at an interval.
	 * @param {number} the amount of time to fill each buffer for before emitting them and clearing them.
	 * @param {number} [bufferCreationInterval] the interval at which to start new buffers.
	 * @param {Scheduler} [scheduler] (optional, defaults to `asap` scheduler) The scheduler on which to schedule the
	 *  intervals that determine buffer boundaries.
	 * @returns {Observable<T[]>} an observable of arrays of buffered values.
	 */
	function bufferTime(bufferTimeSpan, bufferCreationInterval, scheduler) {
	    if (bufferCreationInterval === void 0) { bufferCreationInterval = null; }
	    if (scheduler === void 0) { scheduler = asap_1.asap; }
	    return this.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, scheduler));
	}
	exports.bufferTime = bufferTime;
	var BufferTimeOperator = (function () {
	    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, scheduler) {
	        this.bufferTimeSpan = bufferTimeSpan;
	        this.bufferCreationInterval = bufferCreationInterval;
	        this.scheduler = scheduler;
	    }
	    BufferTimeOperator.prototype.call = function (subscriber) {
	        return new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.scheduler);
	    };
	    return BufferTimeOperator;
	})();
	var BufferTimeSubscriber = (function (_super) {
	    __extends(BufferTimeSubscriber, _super);
	    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, scheduler) {
	        _super.call(this, destination);
	        this.bufferTimeSpan = bufferTimeSpan;
	        this.bufferCreationInterval = bufferCreationInterval;
	        this.scheduler = scheduler;
	        this.buffers = [];
	        var buffer = this.openBuffer();
	        if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {
	            var closeState = { subscriber: this, buffer: buffer };
	            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };
	            this.add(scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
	            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
	        }
	        else {
	            var timeSpanOnlyState = { subscriber: this, buffer: buffer, bufferTimeSpan: bufferTimeSpan };
	            this.add(scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
	        }
	    }
	    BufferTimeSubscriber.prototype._next = function (value) {
	        var buffers = this.buffers;
	        var len = buffers.length;
	        for (var i = 0; i < len; i++) {
	            buffers[i].push(value);
	        }
	    };
	    BufferTimeSubscriber.prototype._error = function (err) {
	        this.buffers.length = 0;
	        this.destination.error(err);
	    };
	    BufferTimeSubscriber.prototype._complete = function () {
	        var buffers = this.buffers;
	        while (buffers.length > 0) {
	            this.destination.next(buffers.shift());
	        }
	        this.destination.complete();
	    };
	    BufferTimeSubscriber.prototype.openBuffer = function () {
	        var buffer = [];
	        this.buffers.push(buffer);
	        return buffer;
	    };
	    BufferTimeSubscriber.prototype.closeBuffer = function (buffer) {
	        this.destination.next(buffer);
	        var buffers = this.buffers;
	        buffers.splice(buffers.indexOf(buffer), 1);
	    };
	    return BufferTimeSubscriber;
	})(Subscriber_1.Subscriber);
	function dispatchBufferTimeSpanOnly(state) {
	    var subscriber = state.subscriber;
	    var prevBuffer = state.buffer;
	    if (prevBuffer) {
	        subscriber.closeBuffer(prevBuffer);
	    }
	    state.buffer = subscriber.openBuffer();
	    if (!subscriber.isUnsubscribed) {
	        this.schedule(state, state.bufferTimeSpan);
	    }
	}
	function dispatchBufferCreation(state) {
	    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;
	    var buffer = subscriber.openBuffer();
	    var action = this;
	    if (!subscriber.isUnsubscribed) {
	        action.add(scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, buffer: buffer }));
	        action.schedule(state, bufferCreationInterval);
	    }
	}
	function dispatchBufferClose(_a) {
	    var subscriber = _a.subscriber, buffer = _a.buffer;
	    subscriber.closeBuffer(buffer);
	}
	//# sourceMappingURL=bufferTime.js.map

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var bufferToggle_1 = __webpack_require__(358);
	Observable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;
	//# sourceMappingURL=bufferToggle.js.map

/***/ },
/* 358 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var Subscription_1 = __webpack_require__(56);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	/**
	 * buffers values from the source by opening the buffer via signals from an observable provided to `openings`, and closing
	 * and sending the buffers when an observable returned by the `closingSelector` emits.
	 * @param {Observable<O>} openings An observable of notifications to start new buffers
	 * @param {Function} an function, that takes the value emitted by the `openings` observable and returns an Observable, which,
	 *  when it emits, signals that the associated buffer should be emitted and cleared.
	 * @returns {Observable<T[]>} an observable of arrays of buffered values.
	 */
	function bufferToggle(openings, closingSelector) {
	    return this.lift(new BufferToggleOperator(openings, closingSelector));
	}
	exports.bufferToggle = bufferToggle;
	var BufferToggleOperator = (function () {
	    function BufferToggleOperator(openings, closingSelector) {
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	    }
	    BufferToggleOperator.prototype.call = function (subscriber) {
	        return new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector);
	    };
	    return BufferToggleOperator;
	})();
	var BufferToggleSubscriber = (function (_super) {
	    __extends(BufferToggleSubscriber, _super);
	    function BufferToggleSubscriber(destination, openings, closingSelector) {
	        _super.call(this, destination);
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	        this.contexts = [];
	        this.add(this.openings._subscribe(new BufferToggleOpeningsSubscriber(this)));
	    }
	    BufferToggleSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        var len = contexts.length;
	        for (var i = 0; i < len; i++) {
	            contexts[i].buffer.push(value);
	        }
	    };
	    BufferToggleSubscriber.prototype._error = function (err) {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            var context = contexts.shift();
	            context.subscription.unsubscribe();
	            context.buffer = null;
	            context.subscription = null;
	        }
	        this.contexts = null;
	        this.destination.error(err);
	    };
	    BufferToggleSubscriber.prototype._complete = function () {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            var context = contexts.shift();
	            this.destination.next(context.buffer);
	            context.subscription.unsubscribe();
	            context.buffer = null;
	            context.subscription = null;
	        }
	        this.contexts = null;
	        this.destination.complete();
	    };
	    BufferToggleSubscriber.prototype.openBuffer = function (value) {
	        var closingSelector = this.closingSelector;
	        var contexts = this.contexts;
	        var closingNotifier = tryCatch_1.tryCatch(closingSelector)(value);
	        if (closingNotifier === errorObject_1.errorObject) {
	            this._error(closingNotifier.e);
	        }
	        else {
	            var context = {
	                buffer: [],
	                subscription: new Subscription_1.Subscription()
	            };
	            contexts.push(context);
	            var subscriber = new BufferToggleClosingsSubscriber(this, context);
	            var subscription = closingNotifier._subscribe(subscriber);
	            context.subscription.add(subscription);
	            this.add(subscription);
	        }
	    };
	    BufferToggleSubscriber.prototype.closeBuffer = function (context) {
	        var contexts = this.contexts;
	        if (contexts === null) {
	            return;
	        }
	        var buffer = context.buffer, subscription = context.subscription;
	        this.destination.next(buffer);
	        contexts.splice(contexts.indexOf(context), 1);
	        this.remove(subscription);
	        subscription.unsubscribe();
	    };
	    return BufferToggleSubscriber;
	})(Subscriber_1.Subscriber);
	var BufferToggleOpeningsSubscriber = (function (_super) {
	    __extends(BufferToggleOpeningsSubscriber, _super);
	    function BufferToggleOpeningsSubscriber(parent) {
	        _super.call(this, null);
	        this.parent = parent;
	    }
	    BufferToggleOpeningsSubscriber.prototype._next = function (value) {
	        this.parent.openBuffer(value);
	    };
	    BufferToggleOpeningsSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	    };
	    BufferToggleOpeningsSubscriber.prototype._complete = function () {
	        // noop
	    };
	    return BufferToggleOpeningsSubscriber;
	})(Subscriber_1.Subscriber);
	var BufferToggleClosingsSubscriber = (function (_super) {
	    __extends(BufferToggleClosingsSubscriber, _super);
	    function BufferToggleClosingsSubscriber(parent, context) {
	        _super.call(this, null);
	        this.parent = parent;
	        this.context = context;
	    }
	    BufferToggleClosingsSubscriber.prototype._next = function () {
	        this.parent.closeBuffer(this.context);
	    };
	    BufferToggleClosingsSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	    };
	    BufferToggleClosingsSubscriber.prototype._complete = function () {
	        this.parent.closeBuffer(this.context);
	    };
	    return BufferToggleClosingsSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=bufferToggle.js.map

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var bufferWhen_1 = __webpack_require__(360);
	Observable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;
	//# sourceMappingURL=bufferWhen.js.map

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	/**
	 * Opens a buffer immediately, then closes the buffer when the observable returned by calling `closingSelector` emits a value.
	 * It that immediately opens a new buffer and repeats the process
	 * @param {function} a function that takes no arguments and returns an Observable that signals buffer closure
	 * @returns {Observable<T[]>} an observable of arrays of buffered values.
	 */
	function bufferWhen(closingSelector) {
	    return this.lift(new BufferWhenOperator(closingSelector));
	}
	exports.bufferWhen = bufferWhen;
	var BufferWhenOperator = (function () {
	    function BufferWhenOperator(closingSelector) {
	        this.closingSelector = closingSelector;
	    }
	    BufferWhenOperator.prototype.call = function (subscriber) {
	        return new BufferWhenSubscriber(subscriber, this.closingSelector);
	    };
	    return BufferWhenOperator;
	})();
	var BufferWhenSubscriber = (function (_super) {
	    __extends(BufferWhenSubscriber, _super);
	    function BufferWhenSubscriber(destination, closingSelector) {
	        _super.call(this, destination);
	        this.closingSelector = closingSelector;
	        this.openBuffer();
	    }
	    BufferWhenSubscriber.prototype._next = function (value) {
	        this.buffer.push(value);
	    };
	    BufferWhenSubscriber.prototype._error = function (err) {
	        this.buffer = null;
	        this.destination.error(err);
	    };
	    BufferWhenSubscriber.prototype._complete = function () {
	        var buffer = this.buffer;
	        this.destination.next(buffer);
	        this.buffer = null;
	        this.destination.complete();
	    };
	    BufferWhenSubscriber.prototype.openBuffer = function () {
	        var prevClosingNotification = this.closingNotification;
	        if (prevClosingNotification) {
	            this.remove(prevClosingNotification);
	            prevClosingNotification.unsubscribe();
	        }
	        var buffer = this.buffer;
	        if (buffer) {
	            this.destination.next(buffer);
	        }
	        this.buffer = [];
	        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
	        if (closingNotifier === errorObject_1.errorObject) {
	            var err = closingNotifier.e;
	            this.buffer = null;
	            this.destination.error(err);
	        }
	        else {
	            this.add(this.closingNotification = closingNotifier._subscribe(new BufferClosingNotifierSubscriber(this)));
	        }
	    };
	    return BufferWhenSubscriber;
	})(Subscriber_1.Subscriber);
	var BufferClosingNotifierSubscriber = (function (_super) {
	    __extends(BufferClosingNotifierSubscriber, _super);
	    function BufferClosingNotifierSubscriber(parent) {
	        _super.call(this, null);
	        this.parent = parent;
	    }
	    BufferClosingNotifierSubscriber.prototype._next = function () {
	        this.parent.openBuffer();
	    };
	    BufferClosingNotifierSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	    };
	    BufferClosingNotifierSubscriber.prototype._complete = function () {
	        this.parent.openBuffer();
	    };
	    return BufferClosingNotifierSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=bufferWhen.js.map

/***/ },
/* 361 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var catch_1 = __webpack_require__(362);
	Observable_1.Observable.prototype.catch = catch_1._catch;
	//# sourceMappingURL=catch.js.map

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	/**
	 * Catches errors on the observable to be handled by returning a new observable or throwing an error.
	 * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
	 *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
	 *  is returned by the `selector` will be used to continue the observable chain.
	 * @return {Observable} an observable that originates from either the source or the observable returned by the
	 *  catch `selector` function.
	 */
	function _catch(selector) {
	    var catchOperator = new CatchOperator(selector);
	    var caught = this.lift(catchOperator);
	    catchOperator.caught = caught;
	    return caught;
	}
	exports._catch = _catch;
	var CatchOperator = (function () {
	    function CatchOperator(selector) {
	        this.selector = selector;
	    }
	    CatchOperator.prototype.call = function (subscriber) {
	        return new CatchSubscriber(subscriber, this.selector, this.caught);
	    };
	    return CatchOperator;
	})();
	var CatchSubscriber = (function (_super) {
	    __extends(CatchSubscriber, _super);
	    function CatchSubscriber(destination, selector, caught) {
	        _super.call(this, null);
	        this.destination = destination;
	        this.selector = selector;
	        this.caught = caught;
	        this.lastSubscription = this;
	        this.destination.add(this);
	    }
	    CatchSubscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    CatchSubscriber.prototype._error = function (err) {
	        var result = tryCatch_1.tryCatch(this.selector)(err, this.caught);
	        if (result === errorObject_1.errorObject) {
	            this.destination.error(errorObject_1.errorObject.e);
	        }
	        else {
	            this.lastSubscription.unsubscribe();
	            this.lastSubscription = result.subscribe(this.destination);
	        }
	    };
	    CatchSubscriber.prototype._complete = function () {
	        this.lastSubscription.unsubscribe();
	        this.destination.complete();
	    };
	    CatchSubscriber.prototype._unsubscribe = function () {
	        this.lastSubscription.unsubscribe();
	    };
	    return CatchSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=catch.js.map

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var combineAll_1 = __webpack_require__(364);
	Observable_1.Observable.prototype.combineAll = combineAll_1.combineAll;
	//# sourceMappingURL=combineAll.js.map

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	var combineLatest_support_1 = __webpack_require__(302);
	/**
	 * Takes an Observable of Observables, and collects all observables from it. Once the outer observable
	 * completes, it subscribes to all collected observables and "combines" their values, such that:
	 *  - every time an observable emits, the returned observable emits
	 *  - when the returned observable emits, it emits all of the most recent values by:
	 *    - if a `project` function is provided, it is called with each recent value from each observable in whatever order they arrived,
	 *      and the result of the `project` function is what is emitted by the returned observable
	 *    - if there is no `project` function, an array of all of the most recent values is emitted by the returned observable.
	 * @param {function} [project] an optional function to map the most recent values from each observable into a new result. Takes each of the
	 *   most recent values from each collected observable as arguments, in order.
	 * @returns {Observable} an observable of projected results or arrays of recent values.
	 */
	function combineAll(project) {
	    return this.lift(new combineLatest_support_1.CombineLatestOperator(project));
	}
	exports.combineAll = combineAll;
	//# sourceMappingURL=combineAll.js.map

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var combineLatest_1 = __webpack_require__(366);
	Observable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;
	//# sourceMappingURL=combineLatest.js.map

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	var fromArray_1 = __webpack_require__(267);
	var combineLatest_support_1 = __webpack_require__(302);
	var isArray_1 = __webpack_require__(306);
	/**
	 * Combines the values from this observable with values from observables passed as arguments. This is done by subscribing
	 * to each observable, in order, and collecting an array of each of the most recent values any time any of the observables
	 * emits, then either taking that array and passing it as arguments to an option `project` function and emitting the return
	 * value of that, or just emitting the array of recent values directly if there is no `project` function.
	 * @param {...Observable} observables the observables to combine the source with
	 * @param {function} [project] an optional function to project the values from the combined recent values into a new value for emission.
	 * @returns {Observable} an observable of other projected values from the most recent values from each observable, or an array of each of
	 * the most recent values from each observable.
	 */
	function combineLatest() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var project = null;
	    if (typeof observables[observables.length - 1] === 'function') {
	        project = observables.pop();
	    }
	    // if the first and only other argument besides the resultSelector is an array
	    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`
	    if (observables.length === 1 && isArray_1.isArray(observables[0])) {
	        observables = observables[0];
	    }
	    observables.unshift(this);
	    return new fromArray_1.ArrayObservable(observables).lift(new combineLatest_support_1.CombineLatestOperator(project));
	}
	exports.combineLatest = combineLatest;
	//# sourceMappingURL=combineLatest.js.map

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var concat_1 = __webpack_require__(368);
	Observable_1.Observable.prototype.concat = concat_1.concat;
	//# sourceMappingURL=concat.js.map

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	var isScheduler_1 = __webpack_require__(273);
	var fromArray_1 = __webpack_require__(267);
	var mergeAll_support_1 = __webpack_require__(309);
	/**
	 * Joins this observable with multiple other observables by subscribing to them one at a time, starting with the source,
	 * and merging their results into the returned observable. Will wait for each observable to complete before moving
	 * on to the next.
	 * @params {...Observable} the observables to concatenate
	 * @params {Scheduler} [scheduler] an optional scheduler to schedule each observable subscription on.
	 * @returns {Observable} All values of each passed observable merged into a single observable, in order, in serial fashion.
	 */
	function concat() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    var args = observables;
	    args.unshift(this);
	    var scheduler = null;
	    if (isScheduler_1.isScheduler(args[args.length - 1])) {
	        scheduler = args.pop();
	    }
	    return new fromArray_1.ArrayObservable(args, scheduler).lift(new mergeAll_support_1.MergeAllOperator(1));
	}
	exports.concat = concat;
	//# sourceMappingURL=concat.js.map

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var concatAll_1 = __webpack_require__(370);
	Observable_1.Observable.prototype.concatAll = concatAll_1.concatAll;
	//# sourceMappingURL=concatAll.js.map

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	var mergeAll_support_1 = __webpack_require__(309);
	/**
	 * Joins every Observable emitted by the source (an Observable of Observables), in a serial
	 * fashion. Subscribing to each one only when the previous one has completed, and merging
	 * all of their values into the returned observable.
	 *
	 * __Warning:__ If the source Observable emits Observables quickly and endlessly, and the
	 * Observables it emits generally complete slower than the source emits, you can run into
	 * memory issues as the incoming observables collect in an unbounded buffer.
	 *
	 * @returns {Observable} an observable of values merged from the incoming observables.
	 */
	function concatAll() {
	    return this.lift(new mergeAll_support_1.MergeAllOperator(1));
	}
	exports.concatAll = concatAll;
	//# sourceMappingURL=concatAll.js.map

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var concatMap_1 = __webpack_require__(372);
	Observable_1.Observable.prototype.concatMap = concatMap_1.concatMap;
	//# sourceMappingURL=concatMap.js.map

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	var mergeMap_support_1 = __webpack_require__(373);
	/**
	 * Maps values from the source observable into new Observables, then merges them in a serialized fashion,
	 * waiting for each one to complete before merging the next.
	 *
	 * __Warning:__ if incoming values arrive endlessly and faster than the observables they're being mapped
	 * to can complete, it will result in memory issues as created observables amass in an unbounded buffer
	 * waiting for their turn to be subscribed to.
	 *
	 * @param {function} project a function to map incoming values into Observables to be concatenated. accepts
	 * the `value` and the `index` as arguments.
	 * @param {function} [projectResult] an optional result selector that is applied to values before they're
	 * merged into the returned observable. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @returns {Observable} an observable of values merged from the projected Observables as they were subscribed to,
	 * one at a time. Optionally, these values may have been projected from a passed `projectResult` argument.
	 */
	function concatMap(project, projectResult) {
	    return this.lift(new mergeMap_support_1.MergeMapOperator(project, projectResult, 1));
	}
	exports.concatMap = concatMap;
	//# sourceMappingURL=concatMap.js.map

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var subscribeToResult_1 = __webpack_require__(304);
	var OuterSubscriber_1 = __webpack_require__(303);
	var MergeMapOperator = (function () {
	    function MergeMapOperator(project, resultSelector, concurrent) {
	        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	        this.project = project;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	    }
	    MergeMapOperator.prototype.call = function (observer) {
	        return new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent);
	    };
	    return MergeMapOperator;
	})();
	exports.MergeMapOperator = MergeMapOperator;
	var MergeMapSubscriber = (function (_super) {
	    __extends(MergeMapSubscriber, _super);
	    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
	        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	        _super.call(this, destination);
	        this.project = project;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	        this.index = 0;
	    }
	    MergeMapSubscriber.prototype._next = function (value) {
	        if (this.active < this.concurrent) {
	            var index = this.index++;
	            var ish = tryCatch_1.tryCatch(this.project)(value, index);
	            var destination = this.destination;
	            if (ish === errorObject_1.errorObject) {
	                destination.error(ish.e);
	            }
	            else {
	                this.active++;
	                this._innerSub(ish, value, index);
	            }
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
	        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
	    };
	    MergeMapSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };
	    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
	        var _a = this, destination = _a.destination, resultSelector = _a.resultSelector;
	        if (resultSelector) {
	            var result = tryCatch_1.tryCatch(resultSelector)(outerValue, innerValue, outerIndex, innerIndex);
	            if (result === errorObject_1.errorObject) {
	                destination.error(errorObject_1.errorObject.e);
	            }
	            else {
	                destination.next(result);
	            }
	        }
	        else {
	            destination.next(innerValue);
	        }
	    };
	    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeMapSubscriber;
	})(OuterSubscriber_1.OuterSubscriber);
	exports.MergeMapSubscriber = MergeMapSubscriber;
	//# sourceMappingURL=mergeMap-support.js.map

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var concatMapTo_1 = __webpack_require__(375);
	Observable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;
	//# sourceMappingURL=concatMapTo.js.map

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	var mergeMapTo_support_1 = __webpack_require__(376);
	/**
	 * Maps values from the source to a specific observable, and merges them together in a serialized fashion.
	 *
	 * @param {Observable} observable the observable to map each source value to
	 * @param {function} [projectResult] an optional result selector that is applied to values before they're
	 * merged into the returned observable. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @returns {Observable} an observable of values merged together by joining the passed observable
	 * with itself, one after the other, for each value emitted from the source.
	 */
	function concatMapTo(observable, projectResult) {
	    return this.lift(new mergeMapTo_support_1.MergeMapToOperator(observable, projectResult, 1));
	}
	exports.concatMapTo = concatMapTo;
	//# sourceMappingURL=concatMapTo.js.map

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var OuterSubscriber_1 = __webpack_require__(303);
	var subscribeToResult_1 = __webpack_require__(304);
	var MergeMapToOperator = (function () {
	    function MergeMapToOperator(ish, resultSelector, concurrent) {
	        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	        this.ish = ish;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	    }
	    MergeMapToOperator.prototype.call = function (observer) {
	        return new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent);
	    };
	    return MergeMapToOperator;
	})();
	exports.MergeMapToOperator = MergeMapToOperator;
	var MergeMapToSubscriber = (function (_super) {
	    __extends(MergeMapToSubscriber, _super);
	    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {
	        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	        _super.call(this, destination);
	        this.ish = ish;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	        this.index = 0;
	    }
	    MergeMapToSubscriber.prototype._next = function (value) {
	        if (this.active < this.concurrent) {
	            var resultSelector = this.resultSelector;
	            var index = this.index++;
	            var ish = this.ish;
	            var destination = this.destination;
	            this.active++;
	            this._innerSub(ish, destination, resultSelector, value, index);
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {
	        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
	    };
	    MergeMapToSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };
	    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
	        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
	        if (resultSelector) {
	            var result = tryCatch_1.tryCatch(resultSelector)(outerValue, innerValue, outerIndex, innerIndex);
	            if (result === errorObject_1.errorObject) {
	                destination.error(errorObject_1.errorObject.e);
	            }
	            else {
	                destination.next(result);
	            }
	        }
	        else {
	            destination.next(innerValue);
	        }
	    };
	    MergeMapToSubscriber.prototype.notifyError = function (err) {
	        this.destination.error(err);
	    };
	    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeMapToSubscriber;
	})(OuterSubscriber_1.OuterSubscriber);
	exports.MergeMapToSubscriber = MergeMapToSubscriber;
	//# sourceMappingURL=mergeMapTo-support.js.map

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var count_1 = __webpack_require__(378);
	Observable_1.Observable.prototype.count = count_1.count;
	//# sourceMappingURL=count.js.map

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	/**
	 * Returns an observable of a single number that represents the number of items that either:
	 * Match a provided predicate function, _or_ if a predicate is not provided, the number
	 * represents the total count of all items in the source observable. The count is emitted
	 * by the returned observable when the source observable completes.
	 * @param {function} [predicate] a boolean function to select what values are to be counted.
	 * it is provided with arguments of:
	 *   - `value`: the value from the source observable
	 *   - `index`: the "index" of the value from the source observable
	 *   - `source`: the source observable instance itself.
	 * @returns {Observable} an observable of one number that represents the count as described
	 * above
	 */
	function count(predicate) {
	    return this.lift(new CountOperator(predicate, this));
	}
	exports.count = count;
	var CountOperator = (function () {
	    function CountOperator(predicate, source) {
	        this.predicate = predicate;
	        this.source = source;
	    }
	    CountOperator.prototype.call = function (subscriber) {
	        return new CountSubscriber(subscriber, this.predicate, this.source);
	    };
	    return CountOperator;
	})();
	var CountSubscriber = (function (_super) {
	    __extends(CountSubscriber, _super);
	    function CountSubscriber(destination, predicate, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.source = source;
	        this.count = 0;
	        this.index = 0;
	    }
	    CountSubscriber.prototype._next = function (value) {
	        var predicate = this.predicate;
	        var passed = true;
	        if (predicate) {
	            passed = tryCatch_1.tryCatch(predicate)(value, this.index++, this.source);
	            if (passed === errorObject_1.errorObject) {
	                this.destination.error(passed.e);
	                return;
	            }
	        }
	        if (passed) {
	            this.count += 1;
	        }
	    };
	    CountSubscriber.prototype._complete = function () {
	        this.destination.next(this.count);
	        this.destination.complete();
	    };
	    return CountSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=count.js.map

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var dematerialize_1 = __webpack_require__(380);
	Observable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;
	//# sourceMappingURL=dematerialize.js.map

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	function dematerialize() {
	    return this.lift(new DeMaterializeOperator());
	}
	exports.dematerialize = dematerialize;
	var DeMaterializeOperator = (function () {
	    function DeMaterializeOperator() {
	    }
	    DeMaterializeOperator.prototype.call = function (subscriber) {
	        return new DeMaterializeSubscriber(subscriber);
	    };
	    return DeMaterializeOperator;
	})();
	var DeMaterializeSubscriber = (function (_super) {
	    __extends(DeMaterializeSubscriber, _super);
	    function DeMaterializeSubscriber(destination) {
	        _super.call(this, destination);
	    }
	    DeMaterializeSubscriber.prototype._next = function (value) {
	        value.observe(this.destination);
	    };
	    return DeMaterializeSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=dematerialize.js.map

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var debounce_1 = __webpack_require__(382);
	Observable_1.Observable.prototype.debounce = debounce_1.debounce;
	//# sourceMappingURL=debounce.js.map

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var fromPromise_1 = __webpack_require__(62);
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var isPromise_1 = __webpack_require__(320);
	var errorObject_1 = __webpack_require__(270);
	function debounce(durationSelector) {
	    return this.lift(new DebounceOperator(durationSelector));
	}
	exports.debounce = debounce;
	var DebounceOperator = (function () {
	    function DebounceOperator(durationSelector) {
	        this.durationSelector = durationSelector;
	    }
	    DebounceOperator.prototype.call = function (observer) {
	        return new DebounceSubscriber(observer, this.durationSelector);
	    };
	    return DebounceOperator;
	})();
	var DebounceSubscriber = (function (_super) {
	    __extends(DebounceSubscriber, _super);
	    function DebounceSubscriber(destination, durationSelector) {
	        _super.call(this, destination);
	        this.durationSelector = durationSelector;
	        this.debouncedSubscription = null;
	        this.lastValue = null;
	        this._index = 0;
	    }
	    Object.defineProperty(DebounceSubscriber.prototype, "index", {
	        get: function () {
	            return this._index;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    DebounceSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        var currentIndex = ++this._index;
	        var debounce = tryCatch_1.tryCatch(this.durationSelector)(value);
	        if (debounce === errorObject_1.errorObject) {
	            destination.error(errorObject_1.errorObject.e);
	        }
	        else {
	            if (isPromise_1.isPromise(debounce)) {
	                debounce = fromPromise_1.PromiseObservable.create(debounce);
	            }
	            this.lastValue = value;
	            this.clearDebounce();
	            this.add(this.debouncedSubscription = debounce._subscribe(new DurationSelectorSubscriber(this, currentIndex)));
	        }
	    };
	    DebounceSubscriber.prototype._complete = function () {
	        this.debouncedNext();
	        this.destination.complete();
	    };
	    DebounceSubscriber.prototype.debouncedNext = function () {
	        this.clearDebounce();
	        if (this.lastValue != null) {
	            this.destination.next(this.lastValue);
	            this.lastValue = null;
	        }
	    };
	    DebounceSubscriber.prototype.clearDebounce = function () {
	        var debouncedSubscription = this.debouncedSubscription;
	        if (debouncedSubscription) {
	            debouncedSubscription.unsubscribe();
	            this.remove(debouncedSubscription);
	            this.debouncedSubscription = null;
	        }
	    };
	    return DebounceSubscriber;
	})(Subscriber_1.Subscriber);
	var DurationSelectorSubscriber = (function (_super) {
	    __extends(DurationSelectorSubscriber, _super);
	    function DurationSelectorSubscriber(parent, currentIndex) {
	        _super.call(this, null);
	        this.parent = parent;
	        this.currentIndex = currentIndex;
	    }
	    DurationSelectorSubscriber.prototype.debounceNext = function () {
	        var parent = this.parent;
	        if (this.currentIndex === parent.index) {
	            parent.debouncedNext();
	            if (!this.isUnsubscribed) {
	                this.unsubscribe();
	            }
	        }
	    };
	    DurationSelectorSubscriber.prototype._next = function (unused) {
	        this.debounceNext();
	    };
	    DurationSelectorSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	    };
	    DurationSelectorSubscriber.prototype._complete = function () {
	        this.debounceNext();
	    };
	    return DurationSelectorSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=debounce.js.map

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var debounceTime_1 = __webpack_require__(384);
	Observable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;
	//# sourceMappingURL=debounceTime.js.map

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var asap_1 = __webpack_require__(334);
	function debounceTime(dueTime, scheduler) {
	    if (scheduler === void 0) { scheduler = asap_1.asap; }
	    return this.lift(new DebounceTimeOperator(dueTime, scheduler));
	}
	exports.debounceTime = debounceTime;
	var DebounceTimeOperator = (function () {
	    function DebounceTimeOperator(dueTime, scheduler) {
	        this.dueTime = dueTime;
	        this.scheduler = scheduler;
	    }
	    DebounceTimeOperator.prototype.call = function (subscriber) {
	        return new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler);
	    };
	    return DebounceTimeOperator;
	})();
	var DebounceTimeSubscriber = (function (_super) {
	    __extends(DebounceTimeSubscriber, _super);
	    function DebounceTimeSubscriber(destination, dueTime, scheduler) {
	        _super.call(this, destination);
	        this.dueTime = dueTime;
	        this.scheduler = scheduler;
	        this.debouncedSubscription = null;
	        this.lastValue = null;
	    }
	    DebounceTimeSubscriber.prototype._next = function (value) {
	        this.clearDebounce();
	        this.lastValue = value;
	        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
	    };
	    DebounceTimeSubscriber.prototype._complete = function () {
	        this.debouncedNext();
	        this.destination.complete();
	    };
	    DebounceTimeSubscriber.prototype.debouncedNext = function () {
	        this.clearDebounce();
	        if (this.lastValue != null) {
	            this.destination.next(this.lastValue);
	            this.lastValue = null;
	        }
	    };
	    DebounceTimeSubscriber.prototype.clearDebounce = function () {
	        var debouncedSubscription = this.debouncedSubscription;
	        if (debouncedSubscription !== null) {
	            this.remove(debouncedSubscription);
	            debouncedSubscription.unsubscribe();
	            this.debouncedSubscription = null;
	        }
	    };
	    return DebounceTimeSubscriber;
	})(Subscriber_1.Subscriber);
	function dispatchNext(subscriber) {
	    subscriber.debouncedNext();
	}
	//# sourceMappingURL=debounceTime.js.map

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var defaultIfEmpty_1 = __webpack_require__(386);
	Observable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;
	//# sourceMappingURL=defaultIfEmpty.js.map

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	function defaultIfEmpty(defaultValue) {
	    if (defaultValue === void 0) { defaultValue = null; }
	    return this.lift(new DefaultIfEmptyOperator(defaultValue));
	}
	exports.defaultIfEmpty = defaultIfEmpty;
	var DefaultIfEmptyOperator = (function () {
	    function DefaultIfEmptyOperator(defaultValue) {
	        this.defaultValue = defaultValue;
	    }
	    DefaultIfEmptyOperator.prototype.call = function (subscriber) {
	        return new DefaultIfEmptySubscriber(subscriber, this.defaultValue);
	    };
	    return DefaultIfEmptyOperator;
	})();
	var DefaultIfEmptySubscriber = (function (_super) {
	    __extends(DefaultIfEmptySubscriber, _super);
	    function DefaultIfEmptySubscriber(destination, defaultValue) {
	        _super.call(this, destination);
	        this.defaultValue = defaultValue;
	        this.isEmpty = true;
	    }
	    DefaultIfEmptySubscriber.prototype._next = function (value) {
	        this.isEmpty = false;
	        this.destination.next(value);
	    };
	    DefaultIfEmptySubscriber.prototype._complete = function () {
	        if (this.isEmpty) {
	            this.destination.next(this.defaultValue);
	        }
	        this.destination.complete();
	    };
	    return DefaultIfEmptySubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=defaultIfEmpty.js.map

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var delay_1 = __webpack_require__(388);
	Observable_1.Observable.prototype.delay = delay_1.delay;
	//# sourceMappingURL=delay.js.map

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var Notification_1 = __webpack_require__(325);
	var queue_1 = __webpack_require__(63);
	var isDate_1 = __webpack_require__(347);
	function delay(delay, scheduler) {
	    if (scheduler === void 0) { scheduler = queue_1.queue; }
	    var absoluteDelay = isDate_1.isDate(delay);
	    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : delay;
	    return this.lift(new DelayOperator(delayFor, scheduler));
	}
	exports.delay = delay;
	var DelayOperator = (function () {
	    function DelayOperator(delay, scheduler) {
	        this.delay = delay;
	        this.scheduler = scheduler;
	    }
	    DelayOperator.prototype.call = function (subscriber) {
	        return new DelaySubscriber(subscriber, this.delay, this.scheduler);
	    };
	    return DelayOperator;
	})();
	var DelaySubscriber = (function (_super) {
	    __extends(DelaySubscriber, _super);
	    function DelaySubscriber(destination, delay, scheduler) {
	        _super.call(this, destination);
	        this.delay = delay;
	        this.scheduler = scheduler;
	        this.queue = [];
	        this.active = false;
	        this.errored = false;
	    }
	    DelaySubscriber.dispatch = function (state) {
	        var source = state.source;
	        var queue = source.queue;
	        var scheduler = state.scheduler;
	        var destination = state.destination;
	        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
	            queue.shift().notification.observe(destination);
	        }
	        if (queue.length > 0) {
	            var delay_1 = Math.max(0, queue[0].time - scheduler.now());
	            this.schedule(state, delay_1);
	        }
	        else {
	            source.active = false;
	        }
	    };
	    DelaySubscriber.prototype._schedule = function (scheduler) {
	        this.active = true;
	        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
	            source: this, destination: this.destination, scheduler: scheduler
	        }));
	    };
	    DelaySubscriber.prototype.scheduleNotification = function (notification) {
	        if (this.errored === true) {
	            return;
	        }
	        var scheduler = this.scheduler;
	        var message = new DelayMessage(scheduler.now() + this.delay, notification);
	        this.queue.push(message);
	        if (this.active === false) {
	            this._schedule(scheduler);
	        }
	    };
	    DelaySubscriber.prototype._next = function (value) {
	        this.scheduleNotification(Notification_1.Notification.createNext(value));
	    };
	    DelaySubscriber.prototype._error = function (err) {
	        this.errored = true;
	        this.queue = [];
	        this.destination.error(err);
	    };
	    DelaySubscriber.prototype._complete = function () {
	        this.scheduleNotification(Notification_1.Notification.createComplete());
	    };
	    return DelaySubscriber;
	})(Subscriber_1.Subscriber);
	var DelayMessage = (function () {
	    function DelayMessage(time, notification) {
	        this.time = time;
	        this.notification = notification;
	    }
	    return DelayMessage;
	})();
	//# sourceMappingURL=delay.js.map

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var distinctUntilChanged_1 = __webpack_require__(390);
	Observable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;
	//# sourceMappingURL=distinctUntilChanged.js.map

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	function distinctUntilChanged(compare) {
	    return this.lift(new DistinctUntilChangedOperator(compare));
	}
	exports.distinctUntilChanged = distinctUntilChanged;
	var DistinctUntilChangedOperator = (function () {
	    function DistinctUntilChangedOperator(compare) {
	        this.compare = compare;
	    }
	    DistinctUntilChangedOperator.prototype.call = function (subscriber) {
	        return new DistinctUntilChangedSubscriber(subscriber, this.compare);
	    };
	    return DistinctUntilChangedOperator;
	})();
	var DistinctUntilChangedSubscriber = (function (_super) {
	    __extends(DistinctUntilChangedSubscriber, _super);
	    function DistinctUntilChangedSubscriber(destination, compare) {
	        _super.call(this, destination);
	        this.hasValue = false;
	        if (typeof compare === 'function') {
	            this.compare = compare;
	        }
	    }
	    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {
	        return x === y;
	    };
	    DistinctUntilChangedSubscriber.prototype._next = function (value) {
	        var result = false;
	        if (this.hasValue) {
	            result = tryCatch_1.tryCatch(this.compare)(this.value, value);
	            if (result === errorObject_1.errorObject) {
	                this.destination.error(errorObject_1.errorObject.e);
	                return;
	            }
	        }
	        else {
	            this.hasValue = true;
	        }
	        if (Boolean(result) === false) {
	            this.value = value;
	            this.destination.next(value);
	        }
	    };
	    return DistinctUntilChangedSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=distinctUntilChanged.js.map

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var do_1 = __webpack_require__(392);
	Observable_1.Observable.prototype.do = do_1._do;
	//# sourceMappingURL=do.js.map

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var noop_1 = __webpack_require__(53);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	function _do(nextOrObserver, error, complete) {
	    var next;
	    if (nextOrObserver && typeof nextOrObserver === 'object') {
	        next = nextOrObserver.next;
	        error = nextOrObserver.error;
	        complete = nextOrObserver.complete;
	    }
	    else {
	        next = nextOrObserver;
	    }
	    return this.lift(new DoOperator(next || noop_1.noop, error || noop_1.noop, complete || noop_1.noop));
	}
	exports._do = _do;
	var DoOperator = (function () {
	    function DoOperator(next, error, complete) {
	        this.next = next;
	        this.error = error;
	        this.complete = complete;
	    }
	    DoOperator.prototype.call = function (subscriber) {
	        return new DoSubscriber(subscriber, this.next, this.error, this.complete);
	    };
	    return DoOperator;
	})();
	var DoSubscriber = (function (_super) {
	    __extends(DoSubscriber, _super);
	    function DoSubscriber(destination, next, error, complete) {
	        _super.call(this, destination);
	        this.__next = next;
	        this.__error = error;
	        this.__complete = complete;
	    }
	    DoSubscriber.prototype._next = function (x) {
	        var result = tryCatch_1.tryCatch(this.__next)(x);
	        if (result === errorObject_1.errorObject) {
	            this.destination.error(errorObject_1.errorObject.e);
	        }
	        else {
	            this.destination.next(x);
	        }
	    };
	    DoSubscriber.prototype._error = function (e) {
	        var result = tryCatch_1.tryCatch(this.__error)(e);
	        if (result === errorObject_1.errorObject) {
	            this.destination.error(errorObject_1.errorObject.e);
	        }
	        else {
	            this.destination.error(e);
	        }
	    };
	    DoSubscriber.prototype._complete = function () {
	        var result = tryCatch_1.tryCatch(this.__complete)();
	        if (result === errorObject_1.errorObject) {
	            this.destination.error(errorObject_1.errorObject.e);
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    return DoSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=do.js.map

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var expand_1 = __webpack_require__(394);
	Observable_1.Observable.prototype.expand = expand_1.expand;
	//# sourceMappingURL=expand.js.map

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	var expand_support_1 = __webpack_require__(395);
	function expand(project, concurrent, scheduler) {
	    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	    if (scheduler === void 0) { scheduler = undefined; }
	    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
	    return this.lift(new expand_support_1.ExpandOperator(project, concurrent, scheduler));
	}
	exports.expand = expand;
	//# sourceMappingURL=expand.js.map

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var OuterSubscriber_1 = __webpack_require__(303);
	var subscribeToResult_1 = __webpack_require__(304);
	var ExpandOperator = (function () {
	    function ExpandOperator(project, concurrent, scheduler) {
	        this.project = project;
	        this.concurrent = concurrent;
	        this.scheduler = scheduler;
	    }
	    ExpandOperator.prototype.call = function (subscriber) {
	        return new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler);
	    };
	    return ExpandOperator;
	})();
	exports.ExpandOperator = ExpandOperator;
	var ExpandSubscriber = (function (_super) {
	    __extends(ExpandSubscriber, _super);
	    function ExpandSubscriber(destination, project, concurrent, scheduler) {
	        _super.call(this, destination);
	        this.project = project;
	        this.concurrent = concurrent;
	        this.scheduler = scheduler;
	        this.index = 0;
	        this.active = 0;
	        this.hasCompleted = false;
	        if (concurrent < Number.POSITIVE_INFINITY) {
	            this.buffer = [];
	        }
	    }
	    ExpandSubscriber.dispatch = function (_a) {
	        var subscriber = _a.subscriber, result = _a.result, value = _a.value, index = _a.index;
	        subscriber.subscribeToProjection(result, value, index);
	    };
	    ExpandSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        if (destination.isUnsubscribed) {
	            this._complete();
	            return;
	        }
	        var index = this.index++;
	        if (this.active < this.concurrent) {
	            destination.next(value);
	            var result = tryCatch_1.tryCatch(this.project)(value, index);
	            if (result === errorObject_1.errorObject) {
	                destination.error(result.e);
	            }
	            else if (!this.scheduler) {
	                this.subscribeToProjection(result, value, index);
	            }
	            else {
	                var state = { subscriber: this, result: result, value: value, index: index };
	                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
	            }
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {
	        if (result._isScalar) {
	            this._next(result.value);
	        }
	        else {
	            this.active++;
	            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));
	        }
	    };
	    ExpandSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer && buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
	        this._next(innerValue);
	    };
	    return ExpandSubscriber;
	})(OuterSubscriber_1.OuterSubscriber);
	exports.ExpandSubscriber = ExpandSubscriber;
	//# sourceMappingURL=expand-support.js.map

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var filter_1 = __webpack_require__(397);
	Observable_1.Observable.prototype.filter = filter_1.filter;
	//# sourceMappingURL=filter.js.map

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	/**
	 * Similar to the well-known `Array.prototype.filter` method, this operator filters values down to a set
	 * allowed by a `select` function
	 *
	 * @param {Function} select a function that is used to select the resulting values
	 *  if it returns `true`, the value is emitted, if `false` the value is not passed to the resulting observable
	 * @param {any} [thisArg] an optional argument to determine the value of `this` in the `select` function
	 * @returns {Observable} an observable of values allowed by the select function
	 */
	function filter(select, thisArg) {
	    return this.lift(new FilterOperator(select, thisArg));
	}
	exports.filter = filter;
	var FilterOperator = (function () {
	    function FilterOperator(select, thisArg) {
	        this.select = select;
	        this.thisArg = thisArg;
	    }
	    FilterOperator.prototype.call = function (subscriber) {
	        return new FilterSubscriber(subscriber, this.select, this.thisArg);
	    };
	    return FilterOperator;
	})();
	var FilterSubscriber = (function (_super) {
	    __extends(FilterSubscriber, _super);
	    function FilterSubscriber(destination, select, thisArg) {
	        _super.call(this, destination);
	        this.thisArg = thisArg;
	        this.count = 0;
	        this.select = select;
	    }
	    FilterSubscriber.prototype._next = function (x) {
	        var result = tryCatch_1.tryCatch(this.select).call(this.thisArg || this, x, this.count++);
	        if (result === errorObject_1.errorObject) {
	            this.destination.error(errorObject_1.errorObject.e);
	        }
	        else if (Boolean(result)) {
	            this.destination.next(x);
	        }
	    };
	    return FilterSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=filter.js.map

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var finally_1 = __webpack_require__(399);
	Observable_1.Observable.prototype.finally = finally_1._finally;
	//# sourceMappingURL=finally.js.map

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var Subscription_1 = __webpack_require__(56);
	function _finally(finallySelector) {
	    return this.lift(new FinallyOperator(finallySelector));
	}
	exports._finally = _finally;
	var FinallyOperator = (function () {
	    function FinallyOperator(finallySelector) {
	        this.finallySelector = finallySelector;
	    }
	    FinallyOperator.prototype.call = function (subscriber) {
	        return new FinallySubscriber(subscriber, this.finallySelector);
	    };
	    return FinallyOperator;
	})();
	var FinallySubscriber = (function (_super) {
	    __extends(FinallySubscriber, _super);
	    function FinallySubscriber(destination, finallySelector) {
	        _super.call(this, destination);
	        this.add(new Subscription_1.Subscription(finallySelector));
	    }
	    return FinallySubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=finally.js.map

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var first_1 = __webpack_require__(401);
	Observable_1.Observable.prototype.first = first_1.first;
	//# sourceMappingURL=first.js.map

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var EmptyError_1 = __webpack_require__(402);
	function first(predicate, resultSelector, defaultValue) {
	    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
	}
	exports.first = first;
	var FirstOperator = (function () {
	    function FirstOperator(predicate, resultSelector, defaultValue, source) {
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	    }
	    FirstOperator.prototype.call = function (observer) {
	        return new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source);
	    };
	    return FirstOperator;
	})();
	var FirstSubscriber = (function (_super) {
	    __extends(FirstSubscriber, _super);
	    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	        this.index = 0;
	        this.hasCompleted = false;
	    }
	    FirstSubscriber.prototype._next = function (value) {
	        var _a = this, destination = _a.destination, predicate = _a.predicate, resultSelector = _a.resultSelector;
	        var index = this.index++;
	        var passed = true;
	        if (predicate) {
	            passed = tryCatch_1.tryCatch(predicate)(value, index, this.source);
	            if (passed === errorObject_1.errorObject) {
	                destination.error(errorObject_1.errorObject.e);
	                return;
	            }
	        }
	        if (passed) {
	            if (resultSelector) {
	                var result = tryCatch_1.tryCatch(resultSelector)(value, index);
	                if (result === errorObject_1.errorObject) {
	                    destination.error(errorObject_1.errorObject.e);
	                    return;
	                }
	                destination.next(result);
	            }
	            else {
	                destination.next(value);
	            }
	            destination.complete();
	            this.hasCompleted = true;
	        }
	    };
	    FirstSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
	            destination.next(this.defaultValue);
	            destination.complete();
	        }
	        else if (!this.hasCompleted) {
	            destination.error(new EmptyError_1.EmptyError);
	        }
	    };
	    return FirstSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=first.js.map

/***/ },
/* 402 */
/***/ function(module, exports) {

	var EmptyError = (function () {
	    function EmptyError() {
	        this.name = 'EmptyError';
	        this.message = 'no elements in sequence';
	    }
	    return EmptyError;
	})();
	exports.EmptyError = EmptyError;
	//# sourceMappingURL=EmptyError.js.map

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var groupBy_1 = __webpack_require__(404);
	Observable_1.Observable.prototype.groupBy = groupBy_1.groupBy;
	//# sourceMappingURL=groupBy.js.map

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var Observable_1 = __webpack_require__(51);
	var Subject_1 = __webpack_require__(50);
	var Map_1 = __webpack_require__(405);
	var FastMap_1 = __webpack_require__(407);
	var groupBy_support_1 = __webpack_require__(408);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	function groupBy(keySelector, elementSelector, durationSelector) {
	    return new GroupByObservable(this, keySelector, elementSelector, durationSelector);
	}
	exports.groupBy = groupBy;
	var GroupByObservable = (function (_super) {
	    __extends(GroupByObservable, _super);
	    function GroupByObservable(source, keySelector, elementSelector, durationSelector) {
	        _super.call(this);
	        this.source = source;
	        this.keySelector = keySelector;
	        this.elementSelector = elementSelector;
	        this.durationSelector = durationSelector;
	    }
	    GroupByObservable.prototype._subscribe = function (subscriber) {
	        var refCountSubscription = new groupBy_support_1.RefCountSubscription();
	        var groupBySubscriber = new GroupBySubscriber(subscriber, refCountSubscription, this.keySelector, this.elementSelector, this.durationSelector);
	        refCountSubscription.setPrimary(this.source.subscribe(groupBySubscriber));
	        return refCountSubscription;
	    };
	    return GroupByObservable;
	})(Observable_1.Observable);
	exports.GroupByObservable = GroupByObservable;
	var GroupBySubscriber = (function (_super) {
	    __extends(GroupBySubscriber, _super);
	    function GroupBySubscriber(destination, refCountSubscription, keySelector, elementSelector, durationSelector) {
	        _super.call(this);
	        this.refCountSubscription = refCountSubscription;
	        this.keySelector = keySelector;
	        this.elementSelector = elementSelector;
	        this.durationSelector = durationSelector;
	        this.groups = null;
	        this.destination = destination;
	        this.add(destination);
	    }
	    GroupBySubscriber.prototype._next = function (x) {
	        var key = tryCatch_1.tryCatch(this.keySelector)(x);
	        if (key === errorObject_1.errorObject) {
	            this.error(key.e);
	        }
	        else {
	            var groups = this.groups;
	            var elementSelector = this.elementSelector;
	            var durationSelector = this.durationSelector;
	            if (!groups) {
	                groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();
	            }
	            var group = groups.get(key);
	            if (!group) {
	                groups.set(key, group = new Subject_1.Subject());
	                var groupedObservable = new groupBy_support_1.GroupedObservable(key, group, this.refCountSubscription);
	                if (durationSelector) {
	                    var duration = tryCatch_1.tryCatch(durationSelector)(new groupBy_support_1.GroupedObservable(key, group));
	                    if (duration === errorObject_1.errorObject) {
	                        this.error(duration.e);
	                    }
	                    else {
	                        this.add(duration._subscribe(new GroupDurationSubscriber(key, group, this)));
	                    }
	                }
	                this.destination.next(groupedObservable);
	            }
	            if (elementSelector) {
	                var value = tryCatch_1.tryCatch(elementSelector)(x);
	                if (value === errorObject_1.errorObject) {
	                    this.error(value.e);
	                }
	                else {
	                    group.next(value);
	                }
	            }
	            else {
	                group.next(x);
	            }
	        }
	    };
	    GroupBySubscriber.prototype._error = function (err) {
	        var _this = this;
	        var groups = this.groups;
	        if (groups) {
	            groups.forEach(function (group, key) {
	                group.error(err);
	                _this.removeGroup(key);
	            });
	        }
	        this.destination.error(err);
	    };
	    GroupBySubscriber.prototype._complete = function () {
	        var _this = this;
	        var groups = this.groups;
	        if (groups) {
	            groups.forEach(function (group, key) {
	                group.complete();
	                _this.removeGroup(group);
	            });
	        }
	        this.destination.complete();
	    };
	    GroupBySubscriber.prototype.removeGroup = function (key) {
	        this.groups.delete(key);
	    };
	    return GroupBySubscriber;
	})(Subscriber_1.Subscriber);
	var GroupDurationSubscriber = (function (_super) {
	    __extends(GroupDurationSubscriber, _super);
	    function GroupDurationSubscriber(key, group, parent) {
	        _super.call(this, null);
	        this.key = key;
	        this.group = group;
	        this.parent = parent;
	    }
	    GroupDurationSubscriber.prototype._next = function (value) {
	        this.group.complete();
	        this.parent.removeGroup(this.key);
	    };
	    GroupDurationSubscriber.prototype._error = function (err) {
	        this.group.error(err);
	        this.parent.removeGroup(this.key);
	    };
	    GroupDurationSubscriber.prototype._complete = function () {
	        this.group.complete();
	        this.parent.removeGroup(this.key);
	    };
	    return GroupDurationSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=groupBy.js.map

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	var root_1 = __webpack_require__(59);
	var MapPolyfill_1 = __webpack_require__(406);
	exports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();
	//# sourceMappingURL=Map.js.map

/***/ },
/* 406 */
/***/ function(module, exports) {

	var MapPolyfill = (function () {
	    function MapPolyfill() {
	        this.size = 0;
	        this._values = [];
	        this._keys = [];
	    }
	    MapPolyfill.prototype.get = function (key) {
	        var i = this._keys.indexOf(key);
	        return i === -1 ? undefined : this._values[i];
	    };
	    MapPolyfill.prototype.set = function (key, value) {
	        var i = this._keys.indexOf(key);
	        if (i === -1) {
	            this._keys.push(key);
	            this._values.push(value);
	            this.size++;
	        }
	        else {
	            this._values[i] = value;
	        }
	        return this;
	    };
	    MapPolyfill.prototype.delete = function (key) {
	        var i = this._keys.indexOf(key);
	        if (i === -1) {
	            return false;
	        }
	        this._values.splice(i, 1);
	        this._keys.splice(i, 1);
	        this.size--;
	        return true;
	    };
	    MapPolyfill.prototype.forEach = function (cb, thisArg) {
	        for (var i = 0; i < this.size; i++) {
	            cb.call(thisArg, this._values[i], this._keys[i]);
	        }
	    };
	    return MapPolyfill;
	})();
	exports.MapPolyfill = MapPolyfill;
	//# sourceMappingURL=MapPolyfill.js.map

/***/ },
/* 407 */
/***/ function(module, exports) {

	var FastMap = (function () {
	    function FastMap() {
	        this.values = {};
	    }
	    FastMap.prototype.delete = function (key) {
	        this.values[key] = null;
	        return true;
	    };
	    FastMap.prototype.set = function (key, value) {
	        this.values[key] = value;
	        return this;
	    };
	    FastMap.prototype.get = function (key) {
	        return this.values[key];
	    };
	    FastMap.prototype.forEach = function (cb, thisArg) {
	        var values = this.values;
	        for (var key in values) {
	            if (values.hasOwnProperty(key) && values[key] !== null) {
	                cb.call(thisArg, values[key], key);
	            }
	        }
	    };
	    FastMap.prototype.clear = function () {
	        this.values = {};
	    };
	    return FastMap;
	})();
	exports.FastMap = FastMap;
	//# sourceMappingURL=FastMap.js.map

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(56);
	var Observable_1 = __webpack_require__(51);
	var RefCountSubscription = (function (_super) {
	    __extends(RefCountSubscription, _super);
	    function RefCountSubscription() {
	        _super.call(this);
	        this.attemptedToUnsubscribePrimary = false;
	        this.count = 0;
	    }
	    RefCountSubscription.prototype.setPrimary = function (subscription) {
	        this.primary = subscription;
	    };
	    RefCountSubscription.prototype.unsubscribe = function () {
	        if (!this.isUnsubscribed && !this.attemptedToUnsubscribePrimary) {
	            this.attemptedToUnsubscribePrimary = true;
	            if (this.count === 0) {
	                _super.prototype.unsubscribe.call(this);
	                this.primary.unsubscribe();
	            }
	        }
	    };
	    return RefCountSubscription;
	})(Subscription_1.Subscription);
	exports.RefCountSubscription = RefCountSubscription;
	var GroupedObservable = (function (_super) {
	    __extends(GroupedObservable, _super);
	    function GroupedObservable(key, groupSubject, refCountSubscription) {
	        _super.call(this);
	        this.key = key;
	        this.groupSubject = groupSubject;
	        this.refCountSubscription = refCountSubscription;
	    }
	    GroupedObservable.prototype._subscribe = function (subscriber) {
	        var subscription = new Subscription_1.Subscription();
	        if (this.refCountSubscription && !this.refCountSubscription.isUnsubscribed) {
	            subscription.add(new InnerRefCountSubscription(this.refCountSubscription));
	        }
	        subscription.add(this.groupSubject.subscribe(subscriber));
	        return subscription;
	    };
	    return GroupedObservable;
	})(Observable_1.Observable);
	exports.GroupedObservable = GroupedObservable;
	var InnerRefCountSubscription = (function (_super) {
	    __extends(InnerRefCountSubscription, _super);
	    function InnerRefCountSubscription(parent) {
	        _super.call(this);
	        this.parent = parent;
	        parent.count++;
	    }
	    InnerRefCountSubscription.prototype.unsubscribe = function () {
	        if (!this.parent.isUnsubscribed && !this.isUnsubscribed) {
	            _super.prototype.unsubscribe.call(this);
	            this.parent.count--;
	            if (this.parent.count === 0 && this.parent.attemptedToUnsubscribePrimary) {
	                this.parent.unsubscribe();
	                this.parent.primary.unsubscribe();
	            }
	        }
	    };
	    return InnerRefCountSubscription;
	})(Subscription_1.Subscription);
	exports.InnerRefCountSubscription = InnerRefCountSubscription;
	//# sourceMappingURL=groupBy-support.js.map

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var ignoreElements_1 = __webpack_require__(410);
	Observable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;
	//# sourceMappingURL=ignoreElements.js.map

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var noop_1 = __webpack_require__(53);
	function ignoreElements() {
	    return this.lift(new IgnoreElementsOperator());
	}
	exports.ignoreElements = ignoreElements;
	;
	var IgnoreElementsOperator = (function () {
	    function IgnoreElementsOperator() {
	    }
	    IgnoreElementsOperator.prototype.call = function (subscriber) {
	        return new IgnoreElementsSubscriber(subscriber);
	    };
	    return IgnoreElementsOperator;
	})();
	var IgnoreElementsSubscriber = (function (_super) {
	    __extends(IgnoreElementsSubscriber, _super);
	    function IgnoreElementsSubscriber() {
	        _super.apply(this, arguments);
	    }
	    IgnoreElementsSubscriber.prototype._next = function (unused) {
	        noop_1.noop();
	    };
	    return IgnoreElementsSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=ignoreElements.js.map

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var every_1 = __webpack_require__(412);
	Observable_1.Observable.prototype.every = every_1.every;
	//# sourceMappingURL=every.js.map

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ScalarObservable_1 = __webpack_require__(268);
	var fromArray_1 = __webpack_require__(267);
	var throw_1 = __webpack_require__(271);
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	function every(predicate, thisArg) {
	    var source = this;
	    var result;
	    if (source._isScalar) {
	        result = tryCatch_1.tryCatch(predicate).call(thisArg || this, source.value, 0, source);
	        if (result === errorObject_1.errorObject) {
	            return new throw_1.ErrorObservable(errorObject_1.errorObject.e, source.scheduler);
	        }
	        else {
	            return new ScalarObservable_1.ScalarObservable(result, source.scheduler);
	        }
	    }
	    if (source instanceof fromArray_1.ArrayObservable) {
	        var array = source.array;
	        var result_1 = tryCatch_1.tryCatch(function (array, predicate, thisArg) { return array.every(predicate, thisArg); })(array, predicate, thisArg);
	        if (result_1 === errorObject_1.errorObject) {
	            return new throw_1.ErrorObservable(errorObject_1.errorObject.e, source.scheduler);
	        }
	        else {
	            return new ScalarObservable_1.ScalarObservable(result_1, source.scheduler);
	        }
	    }
	    return source.lift(new EveryOperator(predicate, thisArg, source));
	}
	exports.every = every;
	var EveryOperator = (function () {
	    function EveryOperator(predicate, thisArg, source) {
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.source = source;
	    }
	    EveryOperator.prototype.call = function (observer) {
	        return new EverySubscriber(observer, this.predicate, this.thisArg, this.source);
	    };
	    return EveryOperator;
	})();
	var EverySubscriber = (function (_super) {
	    __extends(EverySubscriber, _super);
	    function EverySubscriber(destination, predicate, thisArg, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.source = source;
	        this.index = 0;
	    }
	    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
	        this.destination.next(everyValueMatch);
	        this.destination.complete();
	    };
	    EverySubscriber.prototype._next = function (value) {
	        var result = tryCatch_1.tryCatch(this.predicate).call(this.thisArg || this, value, this.index++, this.source);
	        if (result === errorObject_1.errorObject) {
	            this.destination.error(result.e);
	        }
	        else if (!result) {
	            this.notifyComplete(false);
	        }
	    };
	    EverySubscriber.prototype._complete = function () {
	        this.notifyComplete(true);
	    };
	    return EverySubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=every.js.map

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var last_1 = __webpack_require__(414);
	Observable_1.Observable.prototype.last = last_1.last;
	//# sourceMappingURL=last.js.map

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var EmptyError_1 = __webpack_require__(402);
	function last(predicate, resultSelector, defaultValue) {
	    return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
	}
	exports.last = last;
	var LastOperator = (function () {
	    function LastOperator(predicate, resultSelector, defaultValue, source) {
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	    }
	    LastOperator.prototype.call = function (observer) {
	        return new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source);
	    };
	    return LastOperator;
	})();
	var LastSubscriber = (function (_super) {
	    __extends(LastSubscriber, _super);
	    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	        this.hasValue = false;
	        this.index = 0;
	        if (typeof defaultValue !== 'undefined') {
	            this.lastValue = defaultValue;
	            this.hasValue = true;
	        }
	    }
	    LastSubscriber.prototype._next = function (value) {
	        var _a = this, predicate = _a.predicate, resultSelector = _a.resultSelector, destination = _a.destination;
	        var index = this.index++;
	        if (predicate) {
	            var found = tryCatch_1.tryCatch(predicate)(value, index, this.source);
	            if (found === errorObject_1.errorObject) {
	                destination.error(errorObject_1.errorObject.e);
	                return;
	            }
	            if (found) {
	                if (resultSelector) {
	                    var result = tryCatch_1.tryCatch(resultSelector)(value, index);
	                    if (result === errorObject_1.errorObject) {
	                        destination.error(errorObject_1.errorObject.e);
	                        return;
	                    }
	                    this.lastValue = result;
	                }
	                else {
	                    this.lastValue = value;
	                }
	                this.hasValue = true;
	            }
	        }
	        else {
	            this.lastValue = value;
	            this.hasValue = true;
	        }
	    };
	    LastSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (this.hasValue) {
	            destination.next(this.lastValue);
	            destination.complete();
	        }
	        else {
	            destination.error(new EmptyError_1.EmptyError);
	        }
	    };
	    return LastSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=last.js.map

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var mapTo_1 = __webpack_require__(416);
	Observable_1.Observable.prototype.mapTo = mapTo_1.mapTo;
	//# sourceMappingURL=mapTo.js.map

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	/**
	 * Maps every value to the same value every time.
	 * @param {any} value the value to map each incoming value to
	 * @returns {Observable} an observable of the passed value that emits everytime the source does
	 */
	function mapTo(value) {
	    return this.lift(new MapToOperator(value));
	}
	exports.mapTo = mapTo;
	var MapToOperator = (function () {
	    function MapToOperator(value) {
	        this.value = value;
	    }
	    MapToOperator.prototype.call = function (subscriber) {
	        return new MapToSubscriber(subscriber, this.value);
	    };
	    return MapToOperator;
	})();
	var MapToSubscriber = (function (_super) {
	    __extends(MapToSubscriber, _super);
	    function MapToSubscriber(destination, value) {
	        _super.call(this, destination);
	        this.value = value;
	    }
	    MapToSubscriber.prototype._next = function (x) {
	        this.destination.next(this.value);
	    };
	    return MapToSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=mapTo.js.map

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var materialize_1 = __webpack_require__(418);
	Observable_1.Observable.prototype.materialize = materialize_1.materialize;
	//# sourceMappingURL=materialize.js.map

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var Notification_1 = __webpack_require__(325);
	function materialize() {
	    return this.lift(new MaterializeOperator());
	}
	exports.materialize = materialize;
	var MaterializeOperator = (function () {
	    function MaterializeOperator() {
	    }
	    MaterializeOperator.prototype.call = function (subscriber) {
	        return new MaterializeSubscriber(subscriber);
	    };
	    return MaterializeOperator;
	})();
	var MaterializeSubscriber = (function (_super) {
	    __extends(MaterializeSubscriber, _super);
	    function MaterializeSubscriber(destination) {
	        _super.call(this, destination);
	    }
	    MaterializeSubscriber.prototype._next = function (value) {
	        this.destination.next(Notification_1.Notification.createNext(value));
	    };
	    MaterializeSubscriber.prototype._error = function (err) {
	        var destination = this.destination;
	        destination.next(Notification_1.Notification.createError(err));
	        destination.complete();
	    };
	    MaterializeSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        destination.next(Notification_1.Notification.createComplete());
	        destination.complete();
	    };
	    return MaterializeSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=materialize.js.map

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var merge_1 = __webpack_require__(420);
	Observable_1.Observable.prototype.merge = merge_1.merge;
	//# sourceMappingURL=merge.js.map

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	var merge_static_1 = __webpack_require__(311);
	function merge() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    observables.unshift(this);
	    return merge_static_1.merge.apply(this, observables);
	}
	exports.merge = merge;
	//# sourceMappingURL=merge.js.map

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var mergeAll_1 = __webpack_require__(422);
	Observable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;
	//# sourceMappingURL=mergeAll.js.map

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	var mergeAll_support_1 = __webpack_require__(309);
	function mergeAll(concurrent) {
	    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	    return this.lift(new mergeAll_support_1.MergeAllOperator(concurrent));
	}
	exports.mergeAll = mergeAll;
	//# sourceMappingURL=mergeAll.js.map

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var mergeMap_1 = __webpack_require__(424);
	Observable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;
	Observable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;
	//# sourceMappingURL=mergeMap.js.map

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	var mergeMap_support_1 = __webpack_require__(373);
	function mergeMap(project, resultSelector, concurrent) {
	    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	    return this.lift(new mergeMap_support_1.MergeMapOperator(project, resultSelector, concurrent));
	}
	exports.mergeMap = mergeMap;
	//# sourceMappingURL=mergeMap.js.map

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var mergeMapTo_1 = __webpack_require__(426);
	Observable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;
	//# sourceMappingURL=mergeMapTo.js.map

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	var mergeMapTo_support_1 = __webpack_require__(376);
	function mergeMapTo(observable, resultSelector, concurrent) {
	    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	    return this.lift(new mergeMapTo_support_1.MergeMapToOperator(observable, resultSelector, concurrent));
	}
	exports.mergeMapTo = mergeMapTo;
	//# sourceMappingURL=mergeMapTo.js.map

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var multicast_1 = __webpack_require__(276);
	Observable_1.Observable.prototype.multicast = multicast_1.multicast;
	//# sourceMappingURL=multicast.js.map

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var observeOn_1 = __webpack_require__(429);
	Observable_1.Observable.prototype.observeOn = observeOn_1.observeOn;
	//# sourceMappingURL=observeOn.js.map

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	var observeOn_support_1 = __webpack_require__(324);
	function observeOn(scheduler, delay) {
	    if (delay === void 0) { delay = 0; }
	    return this.lift(new observeOn_support_1.ObserveOnOperator(scheduler, delay));
	}
	exports.observeOn = observeOn;
	//# sourceMappingURL=observeOn.js.map

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var partition_1 = __webpack_require__(431);
	Observable_1.Observable.prototype.partition = partition_1.partition;
	//# sourceMappingURL=partition.js.map

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	var not_1 = __webpack_require__(432);
	var filter_1 = __webpack_require__(397);
	function partition(predicate, thisArg) {
	    return [
	        filter_1.filter.call(this, predicate),
	        filter_1.filter.call(this, not_1.not(predicate, thisArg))
	    ];
	}
	exports.partition = partition;
	//# sourceMappingURL=partition.js.map

/***/ },
/* 432 */
/***/ function(module, exports) {

	function not(pred, thisArg) {
	    function notPred() {
	        return !(notPred.pred.apply(notPred.thisArg, arguments));
	    }
	    notPred.pred = pred;
	    notPred.thisArg = thisArg;
	    return notPred;
	}
	exports.not = not;
	//# sourceMappingURL=not.js.map

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var publish_1 = __webpack_require__(434);
	Observable_1.Observable.prototype.publish = publish_1.publish;
	//# sourceMappingURL=publish.js.map

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	var Subject_1 = __webpack_require__(50);
	var multicast_1 = __webpack_require__(276);
	function publish() {
	    return multicast_1.multicast.call(this, new Subject_1.Subject());
	}
	exports.publish = publish;
	//# sourceMappingURL=publish.js.map

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var publishBehavior_1 = __webpack_require__(436);
	Observable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;
	//# sourceMappingURL=publishBehavior.js.map

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	var BehaviorSubject_1 = __webpack_require__(437);
	var multicast_1 = __webpack_require__(276);
	function publishBehavior(value) {
	    return multicast_1.multicast.call(this, new BehaviorSubject_1.BehaviorSubject(value));
	}
	exports.publishBehavior = publishBehavior;
	//# sourceMappingURL=publishBehavior.js.map

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(50);
	var throwError_1 = __webpack_require__(54);
	var ObjectUnsubscribedError_1 = __webpack_require__(438);
	var BehaviorSubject = (function (_super) {
	    __extends(BehaviorSubject, _super);
	    function BehaviorSubject(_value) {
	        _super.call(this);
	        this._value = _value;
	        this._hasError = false;
	    }
	    BehaviorSubject.prototype.getValue = function () {
	        if (this._hasError) {
	            throwError_1.throwError(this._err);
	        }
	        else if (this.isUnsubscribed) {
	            throwError_1.throwError(new ObjectUnsubscribedError_1.ObjectUnsubscribedError());
	        }
	        else {
	            return this._value;
	        }
	    };
	    Object.defineProperty(BehaviorSubject.prototype, "value", {
	        get: function () {
	            return this.getValue();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BehaviorSubject.prototype._subscribe = function (subscriber) {
	        var subscription = _super.prototype._subscribe.call(this, subscriber);
	        if (!subscription) {
	            return;
	        }
	        else if (!subscription.isUnsubscribed) {
	            subscriber.next(this._value);
	        }
	        return subscription;
	    };
	    BehaviorSubject.prototype._next = function (value) {
	        _super.prototype._next.call(this, this._value = value);
	    };
	    BehaviorSubject.prototype._error = function (err) {
	        this._hasError = true;
	        _super.prototype._error.call(this, this._err = err);
	    };
	    return BehaviorSubject;
	})(Subject_1.Subject);
	exports.BehaviorSubject = BehaviorSubject;
	//# sourceMappingURL=BehaviorSubject.js.map

/***/ },
/* 438 */
/***/ function(module, exports) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * an error thrown when an action is invalid because the object
	 * has been unsubscribed
	 */
	var ObjectUnsubscribedError = (function (_super) {
	    __extends(ObjectUnsubscribedError, _super);
	    function ObjectUnsubscribedError() {
	        _super.call(this, 'object unsubscribed');
	        this.name = 'ObjectUnsubscribedError';
	    }
	    return ObjectUnsubscribedError;
	})(Error);
	exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
	//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var publishReplay_1 = __webpack_require__(440);
	Observable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;
	//# sourceMappingURL=publishReplay.js.map

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	var ReplaySubject_1 = __webpack_require__(441);
	var multicast_1 = __webpack_require__(276);
	function publishReplay(bufferSize, windowTime, scheduler) {
	    if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
	    if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
	    return multicast_1.multicast.call(this, new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler));
	}
	exports.publishReplay = publishReplay;
	//# sourceMappingURL=publishReplay.js.map

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(50);
	var queue_1 = __webpack_require__(63);
	var ReplaySubject = (function (_super) {
	    __extends(ReplaySubject, _super);
	    function ReplaySubject(bufferSize, windowTime, scheduler) {
	        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }
	        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }
	        _super.call(this);
	        this.events = [];
	        this.bufferSize = bufferSize < 1 ? 1 : bufferSize;
	        this._windowTime = windowTime < 1 ? 1 : windowTime;
	        this.scheduler = scheduler;
	    }
	    ReplaySubject.prototype._next = function (value) {
	        var now = this._getNow();
	        this.events.push(new ReplayEvent(now, value));
	        this._trimBufferThenGetEvents(now);
	        _super.prototype._next.call(this, value);
	    };
	    ReplaySubject.prototype._subscribe = function (subscriber) {
	        var events = this._trimBufferThenGetEvents(this._getNow());
	        var index = -1;
	        var len = events.length;
	        while (!subscriber.isUnsubscribed && ++index < len) {
	            subscriber.next(events[index].value);
	        }
	        return _super.prototype._subscribe.call(this, subscriber);
	    };
	    ReplaySubject.prototype._getNow = function () {
	        return (this.scheduler || queue_1.queue).now();
	    };
	    ReplaySubject.prototype._trimBufferThenGetEvents = function (now) {
	        var bufferSize = this.bufferSize;
	        var _windowTime = this._windowTime;
	        var events = this.events;
	        var eventsCount = events.length;
	        var spliceCount = 0;
	        // Trim events that fall out of the time window.
	        // Start at the front of the list. Break early once
	        // we encounter an event that falls within the window.
	        while (spliceCount < eventsCount) {
	            if ((now - events[spliceCount].time) < _windowTime) {
	                break;
	            }
	            spliceCount += 1;
	        }
	        if (eventsCount > bufferSize) {
	            spliceCount = Math.max(spliceCount, eventsCount - bufferSize);
	        }
	        if (spliceCount > 0) {
	            events.splice(0, spliceCount);
	        }
	        return events;
	    };
	    return ReplaySubject;
	})(Subject_1.Subject);
	exports.ReplaySubject = ReplaySubject;
	var ReplayEvent = (function () {
	    function ReplayEvent(time, value) {
	        this.time = time;
	        this.value = value;
	    }
	    return ReplayEvent;
	})();
	//# sourceMappingURL=ReplaySubject.js.map

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var publishLast_1 = __webpack_require__(443);
	Observable_1.Observable.prototype.publishLast = publishLast_1.publishLast;
	//# sourceMappingURL=publishLast.js.map

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	var AsyncSubject_1 = __webpack_require__(314);
	var multicast_1 = __webpack_require__(276);
	function publishLast() {
	    return multicast_1.multicast.call(this, new AsyncSubject_1.AsyncSubject());
	}
	exports.publishLast = publishLast;
	//# sourceMappingURL=publishLast.js.map

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var reduce_1 = __webpack_require__(445);
	Observable_1.Observable.prototype.reduce = reduce_1.reduce;
	//# sourceMappingURL=reduce.js.map

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	var reduce_support_1 = __webpack_require__(446);
	function reduce(project, seed) {
	    return this.lift(new reduce_support_1.ReduceOperator(project, seed));
	}
	exports.reduce = reduce;
	//# sourceMappingURL=reduce.js.map

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var ReduceOperator = (function () {
	    function ReduceOperator(project, seed) {
	        this.project = project;
	        this.seed = seed;
	    }
	    ReduceOperator.prototype.call = function (subscriber) {
	        return new ReduceSubscriber(subscriber, this.project, this.seed);
	    };
	    return ReduceOperator;
	})();
	exports.ReduceOperator = ReduceOperator;
	var ReduceSubscriber = (function (_super) {
	    __extends(ReduceSubscriber, _super);
	    function ReduceSubscriber(destination, project, seed) {
	        _super.call(this, destination);
	        this.hasValue = false;
	        this.acc = seed;
	        this.project = project;
	        this.hasSeed = typeof seed !== 'undefined';
	    }
	    ReduceSubscriber.prototype._next = function (x) {
	        if (this.hasValue || (this.hasValue = this.hasSeed)) {
	            var result = tryCatch_1.tryCatch(this.project).call(this, this.acc, x);
	            if (result === errorObject_1.errorObject) {
	                this.destination.error(errorObject_1.errorObject.e);
	            }
	            else {
	                this.acc = result;
	            }
	        }
	        else {
	            this.acc = x;
	            this.hasValue = true;
	        }
	    };
	    ReduceSubscriber.prototype._complete = function () {
	        if (this.hasValue || this.hasSeed) {
	            this.destination.next(this.acc);
	        }
	        this.destination.complete();
	    };
	    return ReduceSubscriber;
	})(Subscriber_1.Subscriber);
	exports.ReduceSubscriber = ReduceSubscriber;
	//# sourceMappingURL=reduce-support.js.map

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var repeat_1 = __webpack_require__(448);
	Observable_1.Observable.prototype.repeat = repeat_1.repeat;
	//# sourceMappingURL=repeat.js.map

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var empty_1 = __webpack_require__(272);
	function repeat(count) {
	    if (count === void 0) { count = -1; }
	    if (count === 0) {
	        return new empty_1.EmptyObservable();
	    }
	    else {
	        return this.lift(new RepeatOperator(count, this));
	    }
	}
	exports.repeat = repeat;
	var RepeatOperator = (function () {
	    function RepeatOperator(count, source) {
	        this.count = count;
	        this.source = source;
	    }
	    RepeatOperator.prototype.call = function (subscriber) {
	        return new FirstRepeatSubscriber(subscriber, this.count, this.source);
	    };
	    return RepeatOperator;
	})();
	var FirstRepeatSubscriber = (function (_super) {
	    __extends(FirstRepeatSubscriber, _super);
	    function FirstRepeatSubscriber(destination, count, source) {
	        _super.call(this);
	        this.destination = destination;
	        this.count = count;
	        this.source = source;
	        destination.add(this);
	        this.lastSubscription = this;
	    }
	    FirstRepeatSubscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    FirstRepeatSubscriber.prototype._error = function (err) {
	        this.destination.error(err);
	    };
	    FirstRepeatSubscriber.prototype.complete = function () {
	        if (!this.isUnsubscribed) {
	            this.resubscribe(this.count);
	        }
	    };
	    FirstRepeatSubscriber.prototype.unsubscribe = function () {
	        var lastSubscription = this.lastSubscription;
	        if (lastSubscription === this) {
	            _super.prototype.unsubscribe.call(this);
	        }
	        else {
	            lastSubscription.unsubscribe();
	        }
	    };
	    FirstRepeatSubscriber.prototype.resubscribe = function (count) {
	        var _a = this, destination = _a.destination, lastSubscription = _a.lastSubscription;
	        destination.remove(lastSubscription);
	        lastSubscription.unsubscribe();
	        if (count - 1 === 0) {
	            destination.complete();
	        }
	        else {
	            var nextSubscriber = new MoreRepeatSubscriber(this, count - 1);
	            this.lastSubscription = this.source.subscribe(nextSubscriber);
	            destination.add(this.lastSubscription);
	        }
	    };
	    return FirstRepeatSubscriber;
	})(Subscriber_1.Subscriber);
	var MoreRepeatSubscriber = (function (_super) {
	    __extends(MoreRepeatSubscriber, _super);
	    function MoreRepeatSubscriber(parent, count) {
	        _super.call(this);
	        this.parent = parent;
	        this.count = count;
	    }
	    MoreRepeatSubscriber.prototype._next = function (value) {
	        this.parent.destination.next(value);
	    };
	    MoreRepeatSubscriber.prototype._error = function (err) {
	        this.parent.destination.error(err);
	    };
	    MoreRepeatSubscriber.prototype._complete = function () {
	        var count = this.count;
	        this.parent.resubscribe(count < 0 ? -1 : count);
	    };
	    return MoreRepeatSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=repeat.js.map

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var retry_1 = __webpack_require__(450);
	Observable_1.Observable.prototype.retry = retry_1.retry;
	//# sourceMappingURL=retry.js.map

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	function retry(count) {
	    if (count === void 0) { count = 0; }
	    return this.lift(new RetryOperator(count, this));
	}
	exports.retry = retry;
	var RetryOperator = (function () {
	    function RetryOperator(count, source) {
	        this.count = count;
	        this.source = source;
	    }
	    RetryOperator.prototype.call = function (subscriber) {
	        return new FirstRetrySubscriber(subscriber, this.count, this.source);
	    };
	    return RetryOperator;
	})();
	var FirstRetrySubscriber = (function (_super) {
	    __extends(FirstRetrySubscriber, _super);
	    function FirstRetrySubscriber(destination, count, source) {
	        _super.call(this);
	        this.destination = destination;
	        this.count = count;
	        this.source = source;
	        destination.add(this);
	        this.lastSubscription = this;
	    }
	    FirstRetrySubscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    FirstRetrySubscriber.prototype.error = function (error) {
	        if (!this.isUnsubscribed) {
	            this.unsubscribe();
	            this.resubscribe();
	        }
	    };
	    FirstRetrySubscriber.prototype._complete = function () {
	        this.unsubscribe();
	        this.destination.complete();
	    };
	    FirstRetrySubscriber.prototype.resubscribe = function (retried) {
	        if (retried === void 0) { retried = 0; }
	        var _a = this, lastSubscription = _a.lastSubscription, destination = _a.destination;
	        destination.remove(lastSubscription);
	        lastSubscription.unsubscribe();
	        var nextSubscriber = new RetryMoreSubscriber(this, this.count, retried + 1);
	        this.lastSubscription = this.source.subscribe(nextSubscriber);
	        destination.add(this.lastSubscription);
	    };
	    return FirstRetrySubscriber;
	})(Subscriber_1.Subscriber);
	var RetryMoreSubscriber = (function (_super) {
	    __extends(RetryMoreSubscriber, _super);
	    function RetryMoreSubscriber(parent, count, retried) {
	        if (retried === void 0) { retried = 0; }
	        _super.call(this, null);
	        this.parent = parent;
	        this.count = count;
	        this.retried = retried;
	    }
	    RetryMoreSubscriber.prototype._next = function (value) {
	        this.parent.destination.next(value);
	    };
	    RetryMoreSubscriber.prototype._error = function (err) {
	        var parent = this.parent;
	        var retried = this.retried;
	        var count = this.count;
	        if (count && retried === count) {
	            parent.destination.error(err);
	        }
	        else {
	            parent.resubscribe(retried);
	        }
	    };
	    RetryMoreSubscriber.prototype._complete = function () {
	        this.parent.destination.complete();
	    };
	    return RetryMoreSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=retry.js.map

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var retryWhen_1 = __webpack_require__(452);
	Observable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;
	//# sourceMappingURL=retryWhen.js.map

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var Subject_1 = __webpack_require__(50);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	function retryWhen(notifier) {
	    return this.lift(new RetryWhenOperator(notifier, this));
	}
	exports.retryWhen = retryWhen;
	var RetryWhenOperator = (function () {
	    function RetryWhenOperator(notifier, source) {
	        this.notifier = notifier;
	        this.source = source;
	    }
	    RetryWhenOperator.prototype.call = function (subscriber) {
	        return new FirstRetryWhenSubscriber(subscriber, this.notifier, this.source);
	    };
	    return RetryWhenOperator;
	})();
	var FirstRetryWhenSubscriber = (function (_super) {
	    __extends(FirstRetryWhenSubscriber, _super);
	    function FirstRetryWhenSubscriber(destination, notifier, source) {
	        _super.call(this);
	        this.destination = destination;
	        this.notifier = notifier;
	        this.source = source;
	        destination.add(this);
	        this.lastSubscription = this;
	    }
	    FirstRetryWhenSubscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    FirstRetryWhenSubscriber.prototype.error = function (err) {
	        var destination = this.destination;
	        if (!this.isUnsubscribed) {
	            _super.prototype.unsubscribe.call(this);
	            if (!this.retryNotifications) {
	                this.errors = new Subject_1.Subject();
	                var notifications = tryCatch_1.tryCatch(this.notifier).call(this, this.errors);
	                if (notifications === errorObject_1.errorObject) {
	                    destination.error(errorObject_1.errorObject.e);
	                }
	                else {
	                    this.retryNotifications = notifications;
	                    var notificationSubscriber = new RetryNotificationSubscriber(this);
	                    this.notificationSubscription = notifications.subscribe(notificationSubscriber);
	                    destination.add(this.notificationSubscription);
	                }
	            }
	            this.errors.next(err);
	        }
	    };
	    FirstRetryWhenSubscriber.prototype.destinationError = function (err) {
	        this.tearDown();
	        this.destination.error(err);
	    };
	    FirstRetryWhenSubscriber.prototype._complete = function () {
	        this.destinationComplete();
	    };
	    FirstRetryWhenSubscriber.prototype.destinationComplete = function () {
	        this.tearDown();
	        this.destination.complete();
	    };
	    FirstRetryWhenSubscriber.prototype.unsubscribe = function () {
	        var lastSubscription = this.lastSubscription;
	        if (lastSubscription === this) {
	            _super.prototype.unsubscribe.call(this);
	        }
	        else {
	            this.tearDown();
	        }
	    };
	    FirstRetryWhenSubscriber.prototype.tearDown = function () {
	        _super.prototype.unsubscribe.call(this);
	        this.lastSubscription.unsubscribe();
	        var notificationSubscription = this.notificationSubscription;
	        if (notificationSubscription) {
	            notificationSubscription.unsubscribe();
	        }
	    };
	    FirstRetryWhenSubscriber.prototype.resubscribe = function () {
	        var _a = this, destination = _a.destination, lastSubscription = _a.lastSubscription;
	        destination.remove(lastSubscription);
	        lastSubscription.unsubscribe();
	        var nextSubscriber = new MoreRetryWhenSubscriber(this);
	        this.lastSubscription = this.source.subscribe(nextSubscriber);
	        destination.add(this.lastSubscription);
	    };
	    return FirstRetryWhenSubscriber;
	})(Subscriber_1.Subscriber);
	var MoreRetryWhenSubscriber = (function (_super) {
	    __extends(MoreRetryWhenSubscriber, _super);
	    function MoreRetryWhenSubscriber(parent) {
	        _super.call(this, null);
	        this.parent = parent;
	    }
	    MoreRetryWhenSubscriber.prototype._next = function (value) {
	        this.parent.destination.next(value);
	    };
	    MoreRetryWhenSubscriber.prototype._error = function (err) {
	        this.parent.errors.next(err);
	    };
	    MoreRetryWhenSubscriber.prototype._complete = function () {
	        this.parent.destinationComplete();
	    };
	    return MoreRetryWhenSubscriber;
	})(Subscriber_1.Subscriber);
	var RetryNotificationSubscriber = (function (_super) {
	    __extends(RetryNotificationSubscriber, _super);
	    function RetryNotificationSubscriber(parent) {
	        _super.call(this, null);
	        this.parent = parent;
	    }
	    RetryNotificationSubscriber.prototype._next = function (value) {
	        this.parent.resubscribe();
	    };
	    RetryNotificationSubscriber.prototype._error = function (err) {
	        this.parent.destinationError(err);
	    };
	    RetryNotificationSubscriber.prototype._complete = function () {
	        this.parent.destinationComplete();
	    };
	    return RetryNotificationSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=retryWhen.js.map

/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var sample_1 = __webpack_require__(454);
	Observable_1.Observable.prototype.sample = sample_1.sample;
	//# sourceMappingURL=sample.js.map

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	function sample(notifier) {
	    return this.lift(new SampleOperator(notifier));
	}
	exports.sample = sample;
	var SampleOperator = (function () {
	    function SampleOperator(notifier) {
	        this.notifier = notifier;
	    }
	    SampleOperator.prototype.call = function (subscriber) {
	        return new SampleSubscriber(subscriber, this.notifier);
	    };
	    return SampleOperator;
	})();
	var SampleSubscriber = (function (_super) {
	    __extends(SampleSubscriber, _super);
	    function SampleSubscriber(destination, notifier) {
	        _super.call(this, destination);
	        this.notifier = notifier;
	        this.hasValue = false;
	        this.add(notifier._subscribe(new SampleNotificationSubscriber(this)));
	    }
	    SampleSubscriber.prototype._next = function (value) {
	        this.lastValue = value;
	        this.hasValue = true;
	    };
	    SampleSubscriber.prototype.notifyNext = function () {
	        if (this.hasValue) {
	            this.hasValue = false;
	            this.destination.next(this.lastValue);
	        }
	    };
	    return SampleSubscriber;
	})(Subscriber_1.Subscriber);
	var SampleNotificationSubscriber = (function (_super) {
	    __extends(SampleNotificationSubscriber, _super);
	    function SampleNotificationSubscriber(parent) {
	        _super.call(this, null);
	        this.parent = parent;
	    }
	    SampleNotificationSubscriber.prototype._next = function () {
	        this.parent.notifyNext();
	    };
	    SampleNotificationSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	    };
	    SampleNotificationSubscriber.prototype._complete = function () {
	        this.parent.notifyNext();
	    };
	    return SampleNotificationSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=sample.js.map

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var sampleTime_1 = __webpack_require__(456);
	Observable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;
	//# sourceMappingURL=sampleTime.js.map

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var asap_1 = __webpack_require__(334);
	function sampleTime(delay, scheduler) {
	    if (scheduler === void 0) { scheduler = asap_1.asap; }
	    return this.lift(new SampleTimeOperator(delay, scheduler));
	}
	exports.sampleTime = sampleTime;
	var SampleTimeOperator = (function () {
	    function SampleTimeOperator(delay, scheduler) {
	        this.delay = delay;
	        this.scheduler = scheduler;
	    }
	    SampleTimeOperator.prototype.call = function (subscriber) {
	        return new SampleTimeSubscriber(subscriber, this.delay, this.scheduler);
	    };
	    return SampleTimeOperator;
	})();
	var SampleTimeSubscriber = (function (_super) {
	    __extends(SampleTimeSubscriber, _super);
	    function SampleTimeSubscriber(destination, delay, scheduler) {
	        _super.call(this, destination);
	        this.delay = delay;
	        this.scheduler = scheduler;
	        this.hasValue = false;
	        this.add(scheduler.schedule(dispatchNotification, delay, { subscriber: this, delay: delay }));
	    }
	    SampleTimeSubscriber.prototype._next = function (value) {
	        this.lastValue = value;
	        this.hasValue = true;
	    };
	    SampleTimeSubscriber.prototype.notifyNext = function () {
	        if (this.hasValue) {
	            this.hasValue = false;
	            this.destination.next(this.lastValue);
	        }
	    };
	    return SampleTimeSubscriber;
	})(Subscriber_1.Subscriber);
	function dispatchNotification(state) {
	    var subscriber = state.subscriber, delay = state.delay;
	    subscriber.notifyNext();
	    this.schedule(state, delay);
	}
	//# sourceMappingURL=sampleTime.js.map

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var scan_1 = __webpack_require__(458);
	Observable_1.Observable.prototype.scan = scan_1.scan;
	//# sourceMappingURL=scan.js.map

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	function scan(accumulator, seed) {
	    return this.lift(new ScanOperator(accumulator, seed));
	}
	exports.scan = scan;
	var ScanOperator = (function () {
	    function ScanOperator(accumulator, seed) {
	        this.accumulator = accumulator;
	        this.seed = seed;
	    }
	    ScanOperator.prototype.call = function (subscriber) {
	        return new ScanSubscriber(subscriber, this.accumulator, this.seed);
	    };
	    return ScanOperator;
	})();
	var ScanSubscriber = (function (_super) {
	    __extends(ScanSubscriber, _super);
	    function ScanSubscriber(destination, accumulator, seed) {
	        _super.call(this, destination);
	        this.accumulator = accumulator;
	        this.accumulatorSet = false;
	        this.seed = seed;
	        this.accumulator = accumulator;
	        this.accumulatorSet = typeof seed !== 'undefined';
	    }
	    Object.defineProperty(ScanSubscriber.prototype, "seed", {
	        get: function () {
	            return this._seed;
	        },
	        set: function (value) {
	            this.accumulatorSet = true;
	            this._seed = value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ScanSubscriber.prototype._next = function (value) {
	        if (!this.accumulatorSet) {
	            this.seed = value;
	            this.destination.next(value);
	        }
	        else {
	            var result = tryCatch_1.tryCatch(this.accumulator).call(this, this.seed, value);
	            if (result === errorObject_1.errorObject) {
	                this.destination.error(errorObject_1.errorObject.e);
	            }
	            else {
	                this.seed = result;
	                this.destination.next(this.seed);
	            }
	        }
	    };
	    return ScanSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=scan.js.map

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var single_1 = __webpack_require__(460);
	Observable_1.Observable.prototype.single = single_1.single;
	//# sourceMappingURL=single.js.map

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var EmptyError_1 = __webpack_require__(402);
	function single(predicate) {
	    return this.lift(new SingleOperator(predicate, this));
	}
	exports.single = single;
	var SingleOperator = (function () {
	    function SingleOperator(predicate, source) {
	        this.predicate = predicate;
	        this.source = source;
	    }
	    SingleOperator.prototype.call = function (subscriber) {
	        return new SingleSubscriber(subscriber, this.predicate, this.source);
	    };
	    return SingleOperator;
	})();
	var SingleSubscriber = (function (_super) {
	    __extends(SingleSubscriber, _super);
	    function SingleSubscriber(destination, predicate, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.source = source;
	        this.seenValue = false;
	        this.index = 0;
	    }
	    SingleSubscriber.prototype.applySingleValue = function (value) {
	        if (this.seenValue) {
	            this.destination.error('Sequence contains more than one element');
	        }
	        else {
	            this.seenValue = true;
	            this.singleValue = value;
	        }
	    };
	    SingleSubscriber.prototype._next = function (value) {
	        var predicate = this.predicate;
	        var currentIndex = this.index++;
	        if (predicate) {
	            var result = tryCatch_1.tryCatch(predicate)(value, currentIndex, this.source);
	            if (result === errorObject_1.errorObject) {
	                this.destination.error(result.e);
	            }
	            else if (result) {
	                this.applySingleValue(value);
	            }
	        }
	        else {
	            this.applySingleValue(value);
	        }
	    };
	    SingleSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (this.index > 0) {
	            destination.next(this.seenValue ? this.singleValue : undefined);
	            destination.complete();
	        }
	        else {
	            destination.error(new EmptyError_1.EmptyError);
	        }
	    };
	    return SingleSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=single.js.map

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var skip_1 = __webpack_require__(462);
	Observable_1.Observable.prototype.skip = skip_1.skip;
	//# sourceMappingURL=skip.js.map

/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	function skip(total) {
	    return this.lift(new SkipOperator(total));
	}
	exports.skip = skip;
	var SkipOperator = (function () {
	    function SkipOperator(total) {
	        this.total = total;
	    }
	    SkipOperator.prototype.call = function (subscriber) {
	        return new SkipSubscriber(subscriber, this.total);
	    };
	    return SkipOperator;
	})();
	var SkipSubscriber = (function (_super) {
	    __extends(SkipSubscriber, _super);
	    function SkipSubscriber(destination, total) {
	        _super.call(this, destination);
	        this.total = total;
	        this.count = 0;
	    }
	    SkipSubscriber.prototype._next = function (x) {
	        if (++this.count > this.total) {
	            this.destination.next(x);
	        }
	    };
	    return SkipSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=skip.js.map

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var skipUntil_1 = __webpack_require__(464);
	Observable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;
	//# sourceMappingURL=skipUntil.js.map

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	function skipUntil(notifier) {
	    return this.lift(new SkipUntilOperator(notifier));
	}
	exports.skipUntil = skipUntil;
	var SkipUntilOperator = (function () {
	    function SkipUntilOperator(notifier) {
	        this.notifier = notifier;
	    }
	    SkipUntilOperator.prototype.call = function (subscriber) {
	        return new SkipUntilSubscriber(subscriber, this.notifier);
	    };
	    return SkipUntilOperator;
	})();
	var SkipUntilSubscriber = (function (_super) {
	    __extends(SkipUntilSubscriber, _super);
	    function SkipUntilSubscriber(destination, notifier) {
	        _super.call(this, destination);
	        this.notifier = notifier;
	        this.notificationSubscriber = null;
	        this.notificationSubscriber = new NotificationSubscriber(this);
	        this.add(this.notifier.subscribe(this.notificationSubscriber));
	    }
	    SkipUntilSubscriber.prototype._next = function (value) {
	        if (this.notificationSubscriber.hasValue) {
	            this.destination.next(value);
	        }
	    };
	    SkipUntilSubscriber.prototype._error = function (err) {
	        this.destination.error(err);
	    };
	    SkipUntilSubscriber.prototype._complete = function () {
	        if (this.notificationSubscriber.hasCompleted) {
	            this.destination.complete();
	        }
	        this.notificationSubscriber.unsubscribe();
	    };
	    SkipUntilSubscriber.prototype.unsubscribe = function () {
	        if (this._isUnsubscribed) {
	            return;
	        }
	        else if (this._subscription) {
	            this._subscription.unsubscribe();
	            this._isUnsubscribed = true;
	        }
	        else {
	            _super.prototype.unsubscribe.call(this);
	        }
	    };
	    return SkipUntilSubscriber;
	})(Subscriber_1.Subscriber);
	var NotificationSubscriber = (function (_super) {
	    __extends(NotificationSubscriber, _super);
	    function NotificationSubscriber(parent) {
	        _super.call(this, null);
	        this.parent = parent;
	        this.hasValue = false;
	        this.hasCompleted = false;
	    }
	    NotificationSubscriber.prototype._next = function (unused) {
	        this.hasValue = true;
	    };
	    NotificationSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	        this.hasValue = true;
	    };
	    NotificationSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	    };
	    return NotificationSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=skipUntil.js.map

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var skipWhile_1 = __webpack_require__(466);
	Observable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;
	//# sourceMappingURL=skipWhile.js.map

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	function skipWhile(predicate) {
	    return this.lift(new SkipWhileOperator(predicate));
	}
	exports.skipWhile = skipWhile;
	var SkipWhileOperator = (function () {
	    function SkipWhileOperator(predicate) {
	        this.predicate = predicate;
	    }
	    SkipWhileOperator.prototype.call = function (subscriber) {
	        return new SkipWhileSubscriber(subscriber, this.predicate);
	    };
	    return SkipWhileOperator;
	})();
	var SkipWhileSubscriber = (function (_super) {
	    __extends(SkipWhileSubscriber, _super);
	    function SkipWhileSubscriber(destination, predicate) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.skipping = true;
	        this.index = 0;
	    }
	    SkipWhileSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        if (this.skipping === true) {
	            var index = this.index++;
	            var result = tryCatch_1.tryCatch(this.predicate)(value, index);
	            if (result === errorObject_1.errorObject) {
	                destination.error(result.e);
	            }
	            else {
	                this.skipping = Boolean(result);
	            }
	        }
	        if (this.skipping === false) {
	            destination.next(value);
	        }
	    };
	    return SkipWhileSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=skipWhile.js.map

/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var startWith_1 = __webpack_require__(468);
	Observable_1.Observable.prototype.startWith = startWith_1.startWith;
	//# sourceMappingURL=startWith.js.map

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	var fromArray_1 = __webpack_require__(267);
	var ScalarObservable_1 = __webpack_require__(268);
	var empty_1 = __webpack_require__(272);
	var concat_static_1 = __webpack_require__(308);
	var isScheduler_1 = __webpack_require__(273);
	function startWith() {
	    var array = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        array[_i - 0] = arguments[_i];
	    }
	    var scheduler = array[array.length - 1];
	    if (isScheduler_1.isScheduler(scheduler)) {
	        array.pop();
	    }
	    else {
	        scheduler = void 0;
	    }
	    var len = array.length;
	    if (len === 1) {
	        return concat_static_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), this);
	    }
	    else if (len > 1) {
	        return concat_static_1.concat(new fromArray_1.ArrayObservable(array, scheduler), this);
	    }
	    else {
	        return concat_static_1.concat(new empty_1.EmptyObservable(scheduler), this);
	    }
	}
	exports.startWith = startWith;
	//# sourceMappingURL=startWith.js.map

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var subscribeOn_1 = __webpack_require__(470);
	Observable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;
	//# sourceMappingURL=subscribeOn.js.map

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	var SubscribeOnObservable_1 = __webpack_require__(471);
	function subscribeOn(scheduler, delay) {
	    if (delay === void 0) { delay = 0; }
	    return new SubscribeOnObservable_1.SubscribeOnObservable(this, delay, scheduler);
	}
	exports.subscribeOn = subscribeOn;
	//# sourceMappingURL=subscribeOn.js.map

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(51);
	var asap_1 = __webpack_require__(334);
	var isNumeric_1 = __webpack_require__(333);
	var SubscribeOnObservable = (function (_super) {
	    __extends(SubscribeOnObservable, _super);
	    function SubscribeOnObservable(source, delayTime, scheduler) {
	        if (delayTime === void 0) { delayTime = 0; }
	        if (scheduler === void 0) { scheduler = asap_1.asap; }
	        _super.call(this);
	        this.source = source;
	        this.delayTime = delayTime;
	        this.scheduler = scheduler;
	        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {
	            this.delayTime = 0;
	        }
	        if (!scheduler || typeof scheduler.schedule !== 'function') {
	            this.scheduler = asap_1.asap;
	        }
	    }
	    SubscribeOnObservable.create = function (source, delay, scheduler) {
	        if (delay === void 0) { delay = 0; }
	        if (scheduler === void 0) { scheduler = asap_1.asap; }
	        return new SubscribeOnObservable(source, delay, scheduler);
	    };
	    SubscribeOnObservable.dispatch = function (_a) {
	        var source = _a.source, subscriber = _a.subscriber;
	        return source.subscribe(subscriber);
	    };
	    SubscribeOnObservable.prototype._subscribe = function (subscriber) {
	        var delay = this.delayTime;
	        var source = this.source;
	        var scheduler = this.scheduler;
	        subscriber.add(scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
	            source: source, subscriber: subscriber
	        }));
	    };
	    return SubscribeOnObservable;
	})(Observable_1.Observable);
	exports.SubscribeOnObservable = SubscribeOnObservable;
	//# sourceMappingURL=SubscribeOnObservable.js.map

/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var switch_1 = __webpack_require__(473);
	Observable_1.Observable.prototype.switch = switch_1._switch;
	//# sourceMappingURL=switch.js.map

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(303);
	var subscribeToResult_1 = __webpack_require__(304);
	function _switch() {
	    return this.lift(new SwitchOperator());
	}
	exports._switch = _switch;
	var SwitchOperator = (function () {
	    function SwitchOperator() {
	    }
	    SwitchOperator.prototype.call = function (subscriber) {
	        return new SwitchSubscriber(subscriber);
	    };
	    return SwitchOperator;
	})();
	var SwitchSubscriber = (function (_super) {
	    __extends(SwitchSubscriber, _super);
	    function SwitchSubscriber(destination) {
	        _super.call(this, destination);
	        this.active = 0;
	        this.hasCompleted = false;
	    }
	    SwitchSubscriber.prototype._next = function (value) {
	        this.unsubscribeInner();
	        this.active++;
	        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, value));
	    };
	    SwitchSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    SwitchSubscriber.prototype.unsubscribeInner = function () {
	        this.active = this.active > 0 ? this.active - 1 : 0;
	        var innerSubscription = this.innerSubscription;
	        if (innerSubscription) {
	            innerSubscription.unsubscribe();
	            this.remove(innerSubscription);
	        }
	    };
	    SwitchSubscriber.prototype.notifyNext = function (outerValue, innerValue) {
	        this.destination.next(innerValue);
	    };
	    SwitchSubscriber.prototype.notifyError = function (err) {
	        this.destination.error(err);
	    };
	    SwitchSubscriber.prototype.notifyComplete = function () {
	        this.unsubscribeInner();
	        if (this.hasCompleted && this.active === 0) {
	            this.destination.complete();
	        }
	    };
	    return SwitchSubscriber;
	})(OuterSubscriber_1.OuterSubscriber);
	//# sourceMappingURL=switch.js.map

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var switchMap_1 = __webpack_require__(475);
	Observable_1.Observable.prototype.switchMap = switchMap_1.switchMap;
	//# sourceMappingURL=switchMap.js.map

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var OuterSubscriber_1 = __webpack_require__(303);
	var subscribeToResult_1 = __webpack_require__(304);
	function switchMap(project, resultSelector) {
	    return this.lift(new SwitchMapOperator(project, resultSelector));
	}
	exports.switchMap = switchMap;
	var SwitchMapOperator = (function () {
	    function SwitchMapOperator(project, resultSelector) {
	        this.project = project;
	        this.resultSelector = resultSelector;
	    }
	    SwitchMapOperator.prototype.call = function (subscriber) {
	        return new SwitchMapSubscriber(subscriber, this.project, this.resultSelector);
	    };
	    return SwitchMapOperator;
	})();
	var SwitchMapSubscriber = (function (_super) {
	    __extends(SwitchMapSubscriber, _super);
	    function SwitchMapSubscriber(destination, project, resultSelector) {
	        _super.call(this, destination);
	        this.project = project;
	        this.resultSelector = resultSelector;
	        this.hasCompleted = false;
	        this.index = 0;
	    }
	    SwitchMapSubscriber.prototype._next = function (value) {
	        var index = this.index++;
	        var destination = this.destination;
	        var result = tryCatch_1.tryCatch(this.project)(value, index);
	        if (result === errorObject_1.errorObject) {
	            destination.error(result.e);
	        }
	        else {
	            var innerSubscription = this.innerSubscription;
	            if (innerSubscription) {
	                innerSubscription.unsubscribe();
	            }
	            this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
	        }
	    };
	    SwitchMapSubscriber.prototype._complete = function () {
	        var innerSubscription = this.innerSubscription;
	        this.hasCompleted = true;
	        if (!innerSubscription || innerSubscription.isUnsubscribed) {
	            this.destination.complete();
	        }
	    };
	    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.remove(innerSub);
	        var prevSubscription = this.innerSubscription;
	        if (prevSubscription) {
	            prevSubscription.unsubscribe();
	        }
	        this.innerSubscription = null;
	        if (this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    SwitchMapSubscriber.prototype.notifyError = function (err) {
	        this.destination.error(err);
	    };
	    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
	        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
	        if (resultSelector) {
	            var result = tryCatch_1.tryCatch(resultSelector)(outerValue, innerValue, outerIndex, innerIndex);
	            if (result === errorObject_1.errorObject) {
	                destination.error(errorObject_1.errorObject.e);
	            }
	            else {
	                destination.next(result);
	            }
	        }
	        else {
	            destination.next(innerValue);
	        }
	    };
	    return SwitchMapSubscriber;
	})(OuterSubscriber_1.OuterSubscriber);
	//# sourceMappingURL=switchMap.js.map

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var switchMapTo_1 = __webpack_require__(477);
	Observable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;
	//# sourceMappingURL=switchMapTo.js.map

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var OuterSubscriber_1 = __webpack_require__(303);
	var subscribeToResult_1 = __webpack_require__(304);
	function switchMapTo(observable, projectResult) {
	    return this.lift(new SwitchMapToOperator(observable, projectResult));
	}
	exports.switchMapTo = switchMapTo;
	var SwitchMapToOperator = (function () {
	    function SwitchMapToOperator(observable, resultSelector) {
	        this.observable = observable;
	        this.resultSelector = resultSelector;
	    }
	    SwitchMapToOperator.prototype.call = function (subscriber) {
	        return new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector);
	    };
	    return SwitchMapToOperator;
	})();
	var SwitchMapToSubscriber = (function (_super) {
	    __extends(SwitchMapToSubscriber, _super);
	    function SwitchMapToSubscriber(destination, inner, resultSelector) {
	        _super.call(this, destination);
	        this.inner = inner;
	        this.resultSelector = resultSelector;
	        this.hasCompleted = false;
	        this.index = 0;
	    }
	    SwitchMapToSubscriber.prototype._next = function (value) {
	        var index = this.index++;
	        var innerSubscription = this.innerSubscription;
	        if (innerSubscription) {
	            innerSubscription.unsubscribe();
	        }
	        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, index));
	    };
	    SwitchMapToSubscriber.prototype._complete = function () {
	        var innerSubscription = this.innerSubscription;
	        this.hasCompleted = true;
	        if (!innerSubscription || innerSubscription.isUnsubscribed) {
	            this.destination.complete();
	        }
	    };
	    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.remove(innerSub);
	        var prevSubscription = this.innerSubscription;
	        if (prevSubscription) {
	            prevSubscription.unsubscribe();
	        }
	        this.innerSubscription = null;
	        if (this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    SwitchMapToSubscriber.prototype.notifyError = function (err) {
	        this.destination.error(err);
	    };
	    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
	        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;
	        if (resultSelector) {
	            var result = tryCatch_1.tryCatch(resultSelector)(outerValue, innerValue, outerIndex, innerIndex);
	            if (result === errorObject_1.errorObject) {
	                destination.error(errorObject_1.errorObject.e);
	            }
	            else {
	                destination.next(result);
	            }
	        }
	        else {
	            destination.next(innerValue);
	        }
	    };
	    return SwitchMapToSubscriber;
	})(OuterSubscriber_1.OuterSubscriber);
	//# sourceMappingURL=switchMapTo.js.map

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var take_1 = __webpack_require__(479);
	Observable_1.Observable.prototype.take = take_1.take;
	//# sourceMappingURL=take.js.map

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var ArgumentOutOfRangeError_1 = __webpack_require__(480);
	var empty_1 = __webpack_require__(272);
	function take(total) {
	    if (total === 0) {
	        return new empty_1.EmptyObservable();
	    }
	    else {
	        return this.lift(new TakeOperator(total));
	    }
	}
	exports.take = take;
	var TakeOperator = (function () {
	    function TakeOperator(total) {
	        this.total = total;
	        if (this.total < 0) {
	            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;
	        }
	    }
	    TakeOperator.prototype.call = function (subscriber) {
	        return new TakeSubscriber(subscriber, this.total);
	    };
	    return TakeOperator;
	})();
	var TakeSubscriber = (function (_super) {
	    __extends(TakeSubscriber, _super);
	    function TakeSubscriber(destination, total) {
	        _super.call(this, destination);
	        this.total = total;
	        this.count = 0;
	    }
	    TakeSubscriber.prototype._next = function (value) {
	        var total = this.total;
	        if (++this.count <= total) {
	            this.destination.next(value);
	            if (this.count === total) {
	                this.destination.complete();
	            }
	        }
	    };
	    return TakeSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=take.js.map

/***/ },
/* 480 */
/***/ function(module, exports) {

	var ArgumentOutOfRangeError = (function () {
	    function ArgumentOutOfRangeError() {
	        this.name = 'ArgumentOutOfRangeError';
	        this.message = 'argument out of range';
	    }
	    return ArgumentOutOfRangeError;
	})();
	exports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;
	//# sourceMappingURL=ArgumentOutOfRangeError.js.map

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var takeUntil_1 = __webpack_require__(482);
	Observable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;
	//# sourceMappingURL=takeUntil.js.map

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var noop_1 = __webpack_require__(53);
	function takeUntil(notifier) {
	    return this.lift(new TakeUntilOperator(notifier));
	}
	exports.takeUntil = takeUntil;
	var TakeUntilOperator = (function () {
	    function TakeUntilOperator(notifier) {
	        this.notifier = notifier;
	    }
	    TakeUntilOperator.prototype.call = function (subscriber) {
	        return new TakeUntilSubscriber(subscriber, this.notifier);
	    };
	    return TakeUntilOperator;
	})();
	var TakeUntilSubscriber = (function (_super) {
	    __extends(TakeUntilSubscriber, _super);
	    function TakeUntilSubscriber(destination, notifier) {
	        _super.call(this, destination);
	        this.notifier = notifier;
	        this.notificationSubscriber = null;
	        this.notificationSubscriber = new TakeUntilInnerSubscriber(destination);
	        this.add(notifier.subscribe(this.notificationSubscriber));
	    }
	    TakeUntilSubscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.notificationSubscriber.unsubscribe();
	    };
	    return TakeUntilSubscriber;
	})(Subscriber_1.Subscriber);
	var TakeUntilInnerSubscriber = (function (_super) {
	    __extends(TakeUntilInnerSubscriber, _super);
	    function TakeUntilInnerSubscriber(destination) {
	        _super.call(this, null);
	        this.destination = destination;
	    }
	    TakeUntilInnerSubscriber.prototype._next = function (unused) {
	        this.destination.complete();
	    };
	    TakeUntilInnerSubscriber.prototype._error = function (err) {
	        this.destination.error(err);
	    };
	    TakeUntilInnerSubscriber.prototype._complete = function () {
	        noop_1.noop();
	    };
	    return TakeUntilInnerSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=takeUntil.js.map

/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var takeWhile_1 = __webpack_require__(484);
	Observable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;
	//# sourceMappingURL=takeWhile.js.map

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	function takeWhile(predicate) {
	    return this.lift(new TakeWhileOperator(predicate));
	}
	exports.takeWhile = takeWhile;
	var TakeWhileOperator = (function () {
	    function TakeWhileOperator(predicate) {
	        this.predicate = predicate;
	    }
	    TakeWhileOperator.prototype.call = function (subscriber) {
	        return new TakeWhileSubscriber(subscriber, this.predicate);
	    };
	    return TakeWhileOperator;
	})();
	var TakeWhileSubscriber = (function (_super) {
	    __extends(TakeWhileSubscriber, _super);
	    function TakeWhileSubscriber(destination, predicate) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.index = 0;
	    }
	    TakeWhileSubscriber.prototype._next = function (value) {
	        var destination = this.destination;
	        var result = tryCatch_1.tryCatch(this.predicate)(value, this.index++);
	        if (result == errorObject_1.errorObject) {
	            destination.error(result.e);
	        }
	        else if (Boolean(result)) {
	            destination.next(value);
	        }
	        else {
	            destination.complete();
	        }
	    };
	    return TakeWhileSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=takeWhile.js.map

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var throttle_1 = __webpack_require__(486);
	Observable_1.Observable.prototype.throttle = throttle_1.throttle;
	//# sourceMappingURL=throttle.js.map

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var fromPromise_1 = __webpack_require__(62);
	var Subscriber_1 = __webpack_require__(52);
	var tryCatch_1 = __webpack_require__(269);
	var isPromise_1 = __webpack_require__(320);
	var errorObject_1 = __webpack_require__(270);
	function throttle(durationSelector) {
	    return this.lift(new ThrottleOperator(durationSelector));
	}
	exports.throttle = throttle;
	var ThrottleOperator = (function () {
	    function ThrottleOperator(durationSelector) {
	        this.durationSelector = durationSelector;
	    }
	    ThrottleOperator.prototype.call = function (subscriber) {
	        return new ThrottleSubscriber(subscriber, this.durationSelector);
	    };
	    return ThrottleOperator;
	})();
	var ThrottleSubscriber = (function (_super) {
	    __extends(ThrottleSubscriber, _super);
	    function ThrottleSubscriber(destination, durationSelector) {
	        _super.call(this, destination);
	        this.durationSelector = durationSelector;
	    }
	    ThrottleSubscriber.prototype._next = function (value) {
	        if (!this.throttled) {
	            var destination = this.destination;
	            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);
	            if (duration === errorObject_1.errorObject) {
	                destination.error(errorObject_1.errorObject.e);
	                return;
	            }
	            if (isPromise_1.isPromise(duration)) {
	                duration = fromPromise_1.PromiseObservable.create(duration);
	            }
	            this.add(this.throttled = duration._subscribe(new ThrottleDurationSelectorSubscriber(this)));
	            destination.next(value);
	        }
	    };
	    ThrottleSubscriber.prototype._error = function (err) {
	        this.clearThrottle();
	        _super.prototype._error.call(this, err);
	    };
	    ThrottleSubscriber.prototype._complete = function () {
	        this.clearThrottle();
	        _super.prototype._complete.call(this);
	    };
	    ThrottleSubscriber.prototype.clearThrottle = function () {
	        var throttled = this.throttled;
	        if (throttled) {
	            throttled.unsubscribe();
	            this.remove(throttled);
	            this.throttled = null;
	        }
	    };
	    return ThrottleSubscriber;
	})(Subscriber_1.Subscriber);
	var ThrottleDurationSelectorSubscriber = (function (_super) {
	    __extends(ThrottleDurationSelectorSubscriber, _super);
	    function ThrottleDurationSelectorSubscriber(parent) {
	        _super.call(this, null);
	        this.parent = parent;
	    }
	    ThrottleDurationSelectorSubscriber.prototype._next = function (unused) {
	        this.parent.clearThrottle();
	    };
	    ThrottleDurationSelectorSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	    };
	    ThrottleDurationSelectorSubscriber.prototype._complete = function () {
	        this.parent.clearThrottle();
	    };
	    return ThrottleDurationSelectorSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=throttle.js.map

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var throttleTime_1 = __webpack_require__(488);
	Observable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;
	//# sourceMappingURL=throttleTime.js.map

/***/ },
/* 488 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var asap_1 = __webpack_require__(334);
	function throttleTime(delay, scheduler) {
	    if (scheduler === void 0) { scheduler = asap_1.asap; }
	    return this.lift(new ThrottleTimeOperator(delay, scheduler));
	}
	exports.throttleTime = throttleTime;
	var ThrottleTimeOperator = (function () {
	    function ThrottleTimeOperator(delay, scheduler) {
	        this.delay = delay;
	        this.scheduler = scheduler;
	    }
	    ThrottleTimeOperator.prototype.call = function (subscriber) {
	        return new ThrottleTimeSubscriber(subscriber, this.delay, this.scheduler);
	    };
	    return ThrottleTimeOperator;
	})();
	var ThrottleTimeSubscriber = (function (_super) {
	    __extends(ThrottleTimeSubscriber, _super);
	    function ThrottleTimeSubscriber(destination, delay, scheduler) {
	        _super.call(this, destination);
	        this.delay = delay;
	        this.scheduler = scheduler;
	    }
	    ThrottleTimeSubscriber.prototype._next = function (value) {
	        if (!this.throttled) {
	            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.delay, { subscriber: this }));
	            this.destination.next(value);
	        }
	    };
	    ThrottleTimeSubscriber.prototype.clearThrottle = function () {
	        var throttled = this.throttled;
	        if (throttled) {
	            throttled.unsubscribe();
	            this.remove(throttled);
	            this.throttled = null;
	        }
	    };
	    return ThrottleTimeSubscriber;
	})(Subscriber_1.Subscriber);
	function dispatchNext(_a) {
	    var subscriber = _a.subscriber;
	    subscriber.clearThrottle();
	}
	//# sourceMappingURL=throttleTime.js.map

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var timeout_1 = __webpack_require__(490);
	Observable_1.Observable.prototype.timeout = timeout_1.timeout;
	//# sourceMappingURL=timeout.js.map

/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var queue_1 = __webpack_require__(63);
	var isDate_1 = __webpack_require__(347);
	function timeout(due, errorToSend, scheduler) {
	    if (errorToSend === void 0) { errorToSend = null; }
	    if (scheduler === void 0) { scheduler = queue_1.queue; }
	    var absoluteTimeout = isDate_1.isDate(due);
	    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : due;
	    return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler));
	}
	exports.timeout = timeout;
	var TimeoutOperator = (function () {
	    function TimeoutOperator(waitFor, absoluteTimeout, errorToSend, scheduler) {
	        this.waitFor = waitFor;
	        this.absoluteTimeout = absoluteTimeout;
	        this.errorToSend = errorToSend;
	        this.scheduler = scheduler;
	    }
	    TimeoutOperator.prototype.call = function (subscriber) {
	        return new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.errorToSend, this.scheduler);
	    };
	    return TimeoutOperator;
	})();
	var TimeoutSubscriber = (function (_super) {
	    __extends(TimeoutSubscriber, _super);
	    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, errorToSend, scheduler) {
	        _super.call(this, destination);
	        this.absoluteTimeout = absoluteTimeout;
	        this.waitFor = waitFor;
	        this.errorToSend = errorToSend;
	        this.scheduler = scheduler;
	        this.index = 0;
	        this._previousIndex = 0;
	        this._hasCompleted = false;
	        this.scheduleTimeout();
	    }
	    Object.defineProperty(TimeoutSubscriber.prototype, "previousIndex", {
	        get: function () {
	            return this._previousIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TimeoutSubscriber.prototype, "hasCompleted", {
	        get: function () {
	            return this._hasCompleted;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TimeoutSubscriber.dispatchTimeout = function (state) {
	        var source = state.subscriber;
	        var currentIndex = state.index;
	        if (!source.hasCompleted && source.previousIndex === currentIndex) {
	            source.notifyTimeout();
	        }
	    };
	    TimeoutSubscriber.prototype.scheduleTimeout = function () {
	        var currentIndex = this.index;
	        this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });
	        this.index++;
	        this._previousIndex = currentIndex;
	    };
	    TimeoutSubscriber.prototype._next = function (value) {
	        this.destination.next(value);
	        if (!this.absoluteTimeout) {
	            this.scheduleTimeout();
	        }
	    };
	    TimeoutSubscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this._hasCompleted = true;
	    };
	    TimeoutSubscriber.prototype._complete = function () {
	        this.destination.complete();
	        this._hasCompleted = true;
	    };
	    TimeoutSubscriber.prototype.notifyTimeout = function () {
	        this.error(this.errorToSend || new Error('timeout'));
	    };
	    return TimeoutSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=timeout.js.map

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var timeoutWith_1 = __webpack_require__(492);
	Observable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;
	//# sourceMappingURL=timeoutWith.js.map

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var queue_1 = __webpack_require__(63);
	var isDate_1 = __webpack_require__(347);
	var OuterSubscriber_1 = __webpack_require__(303);
	var subscribeToResult_1 = __webpack_require__(304);
	function timeoutWith(due, withObservable, scheduler) {
	    if (scheduler === void 0) { scheduler = queue_1.queue; }
	    var absoluteTimeout = isDate_1.isDate(due);
	    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : due;
	    return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
	}
	exports.timeoutWith = timeoutWith;
	var TimeoutWithOperator = (function () {
	    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {
	        this.waitFor = waitFor;
	        this.absoluteTimeout = absoluteTimeout;
	        this.withObservable = withObservable;
	        this.scheduler = scheduler;
	    }
	    TimeoutWithOperator.prototype.call = function (subscriber) {
	        return new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler);
	    };
	    return TimeoutWithOperator;
	})();
	var TimeoutWithSubscriber = (function (_super) {
	    __extends(TimeoutWithSubscriber, _super);
	    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
	        _super.call(this, null);
	        this.destination = destination;
	        this.absoluteTimeout = absoluteTimeout;
	        this.waitFor = waitFor;
	        this.withObservable = withObservable;
	        this.scheduler = scheduler;
	        this.timeoutSubscription = undefined;
	        this.index = 0;
	        this._previousIndex = 0;
	        this._hasCompleted = false;
	        destination.add(this);
	        this.scheduleTimeout();
	    }
	    Object.defineProperty(TimeoutWithSubscriber.prototype, "previousIndex", {
	        get: function () {
	            return this._previousIndex;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(TimeoutWithSubscriber.prototype, "hasCompleted", {
	        get: function () {
	            return this._hasCompleted;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    TimeoutWithSubscriber.dispatchTimeout = function (state) {
	        var source = state.subscriber;
	        var currentIndex = state.index;
	        if (!source.hasCompleted && source.previousIndex === currentIndex) {
	            source.handleTimeout();
	        }
	    };
	    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {
	        var currentIndex = this.index;
	        var timeoutState = { subscriber: this, index: currentIndex };
	        this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);
	        this.index++;
	        this._previousIndex = currentIndex;
	    };
	    TimeoutWithSubscriber.prototype._next = function (value) {
	        this.destination.next(value);
	        if (!this.absoluteTimeout) {
	            this.scheduleTimeout();
	        }
	    };
	    TimeoutWithSubscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this._hasCompleted = true;
	    };
	    TimeoutWithSubscriber.prototype._complete = function () {
	        this.destination.complete();
	        this._hasCompleted = true;
	    };
	    TimeoutWithSubscriber.prototype.handleTimeout = function () {
	        if (!this.isUnsubscribed) {
	            var withObservable = this.withObservable;
	            this.unsubscribe();
	            this.destination.add(this.timeoutSubscription = subscribeToResult_1.subscribeToResult(this, withObservable));
	        }
	    };
	    return TimeoutWithSubscriber;
	})(OuterSubscriber_1.OuterSubscriber);
	//# sourceMappingURL=timeoutWith.js.map

/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var toArray_1 = __webpack_require__(494);
	Observable_1.Observable.prototype.toArray = toArray_1.toArray;
	//# sourceMappingURL=toArray.js.map

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	function toArray() {
	    return this.lift(new ToArrayOperator());
	}
	exports.toArray = toArray;
	var ToArrayOperator = (function () {
	    function ToArrayOperator() {
	    }
	    ToArrayOperator.prototype.call = function (subscriber) {
	        return new ToArraySubscriber(subscriber);
	    };
	    return ToArrayOperator;
	})();
	var ToArraySubscriber = (function (_super) {
	    __extends(ToArraySubscriber, _super);
	    function ToArraySubscriber(destination) {
	        _super.call(this, destination);
	        this.array = [];
	    }
	    ToArraySubscriber.prototype._next = function (x) {
	        this.array.push(x);
	    };
	    ToArraySubscriber.prototype._complete = function () {
	        this.destination.next(this.array);
	        this.destination.complete();
	    };
	    return ToArraySubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=toArray.js.map

/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var toPromise_1 = __webpack_require__(67);
	Observable_1.Observable.prototype.toPromise = toPromise_1.toPromise;
	//# sourceMappingURL=toPromise.js.map

/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var window_1 = __webpack_require__(497);
	Observable_1.Observable.prototype.window = window_1.window;
	//# sourceMappingURL=window.js.map

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var Subject_1 = __webpack_require__(50);
	function window(closingNotifier) {
	    return this.lift(new WindowOperator(closingNotifier));
	}
	exports.window = window;
	var WindowOperator = (function () {
	    function WindowOperator(closingNotifier) {
	        this.closingNotifier = closingNotifier;
	    }
	    WindowOperator.prototype.call = function (subscriber) {
	        return new WindowSubscriber(subscriber, this.closingNotifier);
	    };
	    return WindowOperator;
	})();
	var WindowSubscriber = (function (_super) {
	    __extends(WindowSubscriber, _super);
	    function WindowSubscriber(destination, closingNotifier) {
	        _super.call(this, destination);
	        this.destination = destination;
	        this.closingNotifier = closingNotifier;
	        this.add(closingNotifier._subscribe(new WindowClosingNotifierSubscriber(this)));
	        this.openWindow();
	    }
	    WindowSubscriber.prototype._next = function (value) {
	        this.window.next(value);
	    };
	    WindowSubscriber.prototype._error = function (err) {
	        this.window.error(err);
	        this.destination.error(err);
	    };
	    WindowSubscriber.prototype._complete = function () {
	        this.window.complete();
	        this.destination.complete();
	    };
	    WindowSubscriber.prototype.openWindow = function () {
	        var prevWindow = this.window;
	        if (prevWindow) {
	            prevWindow.complete();
	        }
	        var destination = this.destination;
	        var newWindow = this.window = new Subject_1.Subject();
	        destination.add(newWindow);
	        destination.next(newWindow);
	    };
	    return WindowSubscriber;
	})(Subscriber_1.Subscriber);
	var WindowClosingNotifierSubscriber = (function (_super) {
	    __extends(WindowClosingNotifierSubscriber, _super);
	    function WindowClosingNotifierSubscriber(parent) {
	        _super.call(this, null);
	        this.parent = parent;
	    }
	    WindowClosingNotifierSubscriber.prototype._next = function () {
	        this.parent.openWindow();
	    };
	    WindowClosingNotifierSubscriber.prototype._error = function (err) {
	        this.parent._error(err);
	    };
	    WindowClosingNotifierSubscriber.prototype._complete = function () {
	        this.parent._complete();
	    };
	    return WindowClosingNotifierSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=window.js.map

/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var windowCount_1 = __webpack_require__(499);
	Observable_1.Observable.prototype.windowCount = windowCount_1.windowCount;
	//# sourceMappingURL=windowCount.js.map

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var Subject_1 = __webpack_require__(50);
	function windowCount(windowSize, startWindowEvery) {
	    if (startWindowEvery === void 0) { startWindowEvery = 0; }
	    return this.lift(new WindowCountOperator(windowSize, startWindowEvery));
	}
	exports.windowCount = windowCount;
	var WindowCountOperator = (function () {
	    function WindowCountOperator(windowSize, startWindowEvery) {
	        this.windowSize = windowSize;
	        this.startWindowEvery = startWindowEvery;
	    }
	    WindowCountOperator.prototype.call = function (subscriber) {
	        return new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery);
	    };
	    return WindowCountOperator;
	})();
	var WindowCountSubscriber = (function (_super) {
	    __extends(WindowCountSubscriber, _super);
	    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {
	        _super.call(this, destination);
	        this.destination = destination;
	        this.windowSize = windowSize;
	        this.startWindowEvery = startWindowEvery;
	        this.windows = [new Subject_1.Subject()];
	        this.count = 0;
	        var firstWindow = this.windows[0];
	        destination.add(firstWindow);
	        destination.next(firstWindow);
	    }
	    WindowCountSubscriber.prototype._next = function (value) {
	        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
	        var destination = this.destination;
	        var windowSize = this.windowSize;
	        var windows = this.windows;
	        var len = windows.length;
	        for (var i = 0; i < len; i++) {
	            windows[i].next(value);
	        }
	        var c = this.count - windowSize + 1;
	        if (c >= 0 && c % startWindowEvery === 0) {
	            windows.shift().complete();
	        }
	        if (++this.count % startWindowEvery === 0) {
	            var window_1 = new Subject_1.Subject();
	            windows.push(window_1);
	            destination.add(window_1);
	            destination.next(window_1);
	        }
	    };
	    WindowCountSubscriber.prototype._error = function (err) {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            windows.shift().error(err);
	        }
	        this.destination.error(err);
	    };
	    WindowCountSubscriber.prototype._complete = function () {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            windows.shift().complete();
	        }
	        this.destination.complete();
	    };
	    return WindowCountSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=windowCount.js.map

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var windowTime_1 = __webpack_require__(501);
	Observable_1.Observable.prototype.windowTime = windowTime_1.windowTime;
	//# sourceMappingURL=windowTime.js.map

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var Subject_1 = __webpack_require__(50);
	var asap_1 = __webpack_require__(334);
	function windowTime(windowTimeSpan, windowCreationInterval, scheduler) {
	    if (windowCreationInterval === void 0) { windowCreationInterval = null; }
	    if (scheduler === void 0) { scheduler = asap_1.asap; }
	    return this.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler));
	}
	exports.windowTime = windowTime;
	var WindowTimeOperator = (function () {
	    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, scheduler) {
	        this.windowTimeSpan = windowTimeSpan;
	        this.windowCreationInterval = windowCreationInterval;
	        this.scheduler = scheduler;
	    }
	    WindowTimeOperator.prototype.call = function (subscriber) {
	        return new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler);
	    };
	    return WindowTimeOperator;
	})();
	var WindowTimeSubscriber = (function (_super) {
	    __extends(WindowTimeSubscriber, _super);
	    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, scheduler) {
	        _super.call(this, destination);
	        this.destination = destination;
	        this.windowTimeSpan = windowTimeSpan;
	        this.windowCreationInterval = windowCreationInterval;
	        this.scheduler = scheduler;
	        this.windows = [];
	        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
	            var window_1 = this.openWindow();
	            var closeState = { subscriber: this, window: window_1, context: null };
	            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };
	            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
	            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
	        }
	        else {
	            var window_2 = this.openWindow();
	            var timeSpanOnlyState = { subscriber: this, window: window_2, windowTimeSpan: windowTimeSpan };
	            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
	        }
	    }
	    WindowTimeSubscriber.prototype._next = function (value) {
	        var windows = this.windows;
	        var len = windows.length;
	        for (var i = 0; i < len; i++) {
	            windows[i].next(value);
	        }
	    };
	    WindowTimeSubscriber.prototype._error = function (err) {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            windows.shift().error(err);
	        }
	        this.destination.error(err);
	    };
	    WindowTimeSubscriber.prototype._complete = function () {
	        var windows = this.windows;
	        while (windows.length > 0) {
	            windows.shift().complete();
	        }
	        this.destination.complete();
	    };
	    WindowTimeSubscriber.prototype.openWindow = function () {
	        var window = new Subject_1.Subject();
	        this.windows.push(window);
	        var destination = this.destination;
	        destination.add(window);
	        destination.next(window);
	        return window;
	    };
	    WindowTimeSubscriber.prototype.closeWindow = function (window) {
	        window.complete();
	        var windows = this.windows;
	        windows.splice(windows.indexOf(window), 1);
	    };
	    return WindowTimeSubscriber;
	})(Subscriber_1.Subscriber);
	function dispatchWindowTimeSpanOnly(state) {
	    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;
	    if (window) {
	        window.complete();
	    }
	    state.window = subscriber.openWindow();
	    this.schedule(state, windowTimeSpan);
	}
	function dispatchWindowCreation(state) {
	    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;
	    var window = subscriber.openWindow();
	    var action = this;
	    var context = { action: action, subscription: null };
	    var timeSpanState = { subscriber: subscriber, window: window, context: context };
	    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
	    action.add(context.subscription);
	    action.schedule(state, windowCreationInterval);
	}
	function dispatchWindowClose(_a) {
	    var subscriber = _a.subscriber, window = _a.window, context = _a.context;
	    if (context && context.action && context.subscription) {
	        context.action.remove(context.subscription);
	    }
	    subscriber.closeWindow(window);
	}
	//# sourceMappingURL=windowTime.js.map

/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var windowToggle_1 = __webpack_require__(503);
	Observable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;
	//# sourceMappingURL=windowToggle.js.map

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var Subject_1 = __webpack_require__(50);
	var Subscription_1 = __webpack_require__(56);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	function windowToggle(openings, closingSelector) {
	    return this.lift(new WindowToggleOperator(openings, closingSelector));
	}
	exports.windowToggle = windowToggle;
	var WindowToggleOperator = (function () {
	    function WindowToggleOperator(openings, closingSelector) {
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	    }
	    WindowToggleOperator.prototype.call = function (subscriber) {
	        return new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector);
	    };
	    return WindowToggleOperator;
	})();
	var WindowToggleSubscriber = (function (_super) {
	    __extends(WindowToggleSubscriber, _super);
	    function WindowToggleSubscriber(destination, openings, closingSelector) {
	        _super.call(this, destination);
	        this.destination = destination;
	        this.openings = openings;
	        this.closingSelector = closingSelector;
	        this.contexts = [];
	        this.add(this.openings._subscribe(new WindowToggleOpeningsSubscriber(this)));
	    }
	    WindowToggleSubscriber.prototype._next = function (value) {
	        var contexts = this.contexts;
	        var len = contexts.length;
	        for (var i = 0; i < len; i++) {
	            contexts[i].window.next(value);
	        }
	    };
	    WindowToggleSubscriber.prototype._error = function (err) {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            contexts.shift().window.error(err);
	        }
	        this.destination.error(err);
	    };
	    WindowToggleSubscriber.prototype._complete = function () {
	        var contexts = this.contexts;
	        while (contexts.length > 0) {
	            var context = contexts.shift();
	            context.window.complete();
	            context.subscription.unsubscribe();
	        }
	        this.destination.complete();
	    };
	    WindowToggleSubscriber.prototype.openWindow = function (value) {
	        var closingSelector = this.closingSelector;
	        var closingNotifier = tryCatch_1.tryCatch(closingSelector)(value);
	        if (closingNotifier === errorObject_1.errorObject) {
	            this.error(closingNotifier.e);
	        }
	        else {
	            var destination = this.destination;
	            var window_1 = new Subject_1.Subject();
	            var subscription = new Subscription_1.Subscription();
	            var context = { window: window_1, subscription: subscription };
	            this.contexts.push(context);
	            var subscriber = new WindowClosingNotifierSubscriber(this, context);
	            var closingSubscription = closingNotifier._subscribe(subscriber);
	            subscription.add(closingSubscription);
	            destination.add(subscription);
	            destination.add(window_1);
	            destination.next(window_1);
	        }
	    };
	    WindowToggleSubscriber.prototype.closeWindow = function (context) {
	        var window = context.window, subscription = context.subscription;
	        var contexts = this.contexts;
	        var destination = this.destination;
	        contexts.splice(contexts.indexOf(context), 1);
	        window.complete();
	        destination.remove(subscription);
	        destination.remove(window);
	        subscription.unsubscribe();
	    };
	    return WindowToggleSubscriber;
	})(Subscriber_1.Subscriber);
	var WindowClosingNotifierSubscriber = (function (_super) {
	    __extends(WindowClosingNotifierSubscriber, _super);
	    function WindowClosingNotifierSubscriber(parent, windowContext) {
	        _super.call(this, null);
	        this.parent = parent;
	        this.windowContext = windowContext;
	    }
	    WindowClosingNotifierSubscriber.prototype._next = function () {
	        this.parent.closeWindow(this.windowContext);
	    };
	    WindowClosingNotifierSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	    };
	    WindowClosingNotifierSubscriber.prototype._complete = function () {
	        this.parent.closeWindow(this.windowContext);
	    };
	    return WindowClosingNotifierSubscriber;
	})(Subscriber_1.Subscriber);
	var WindowToggleOpeningsSubscriber = (function (_super) {
	    __extends(WindowToggleOpeningsSubscriber, _super);
	    function WindowToggleOpeningsSubscriber(parent) {
	        _super.call(this);
	        this.parent = parent;
	    }
	    WindowToggleOpeningsSubscriber.prototype._next = function (value) {
	        this.parent.openWindow(value);
	    };
	    WindowToggleOpeningsSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	    };
	    WindowToggleOpeningsSubscriber.prototype._complete = function () {
	        // noop
	    };
	    return WindowToggleOpeningsSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=windowToggle.js.map

/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var windowWhen_1 = __webpack_require__(505);
	Observable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;
	//# sourceMappingURL=windowWhen.js.map

/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(52);
	var Subject_1 = __webpack_require__(50);
	var Subscription_1 = __webpack_require__(56);
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	function windowWhen(closingSelector) {
	    return this.lift(new WindowOperator(closingSelector));
	}
	exports.windowWhen = windowWhen;
	var WindowOperator = (function () {
	    function WindowOperator(closingSelector) {
	        this.closingSelector = closingSelector;
	    }
	    WindowOperator.prototype.call = function (subscriber) {
	        return new WindowSubscriber(subscriber, this.closingSelector);
	    };
	    return WindowOperator;
	})();
	var WindowSubscriber = (function (_super) {
	    __extends(WindowSubscriber, _super);
	    function WindowSubscriber(destination, closingSelector) {
	        _super.call(this, destination);
	        this.destination = destination;
	        this.closingSelector = closingSelector;
	        this.openWindow();
	    }
	    WindowSubscriber.prototype._next = function (value) {
	        this.window.next(value);
	    };
	    WindowSubscriber.prototype._error = function (err) {
	        this.window.error(err);
	        this.destination.error(err);
	        this._unsubscribeClosingNotification();
	    };
	    WindowSubscriber.prototype._complete = function () {
	        this.window.complete();
	        this.destination.complete();
	        this._unsubscribeClosingNotification();
	    };
	    WindowSubscriber.prototype.unsubscribe = function () {
	        _super.prototype.unsubscribe.call(this);
	        this._unsubscribeClosingNotification();
	    };
	    WindowSubscriber.prototype._unsubscribeClosingNotification = function () {
	        var closingNotification = this.closingNotification;
	        if (closingNotification) {
	            closingNotification.unsubscribe();
	        }
	    };
	    WindowSubscriber.prototype.openWindow = function () {
	        var prevClosingNotification = this.closingNotification;
	        if (prevClosingNotification) {
	            this.remove(prevClosingNotification);
	            prevClosingNotification.unsubscribe();
	        }
	        var prevWindow = this.window;
	        if (prevWindow) {
	            prevWindow.complete();
	        }
	        var window = this.window = new Subject_1.Subject();
	        this.destination.next(window);
	        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();
	        if (closingNotifier === errorObject_1.errorObject) {
	            var err = closingNotifier.e;
	            this.destination.error(err);
	            this.window.error(err);
	        }
	        else {
	            var closingNotification = this.closingNotification = new Subscription_1.Subscription();
	            closingNotification.add(closingNotifier._subscribe(new WindowClosingNotifierSubscriber(this)));
	            this.add(closingNotification);
	            this.add(window);
	        }
	    };
	    return WindowSubscriber;
	})(Subscriber_1.Subscriber);
	var WindowClosingNotifierSubscriber = (function (_super) {
	    __extends(WindowClosingNotifierSubscriber, _super);
	    function WindowClosingNotifierSubscriber(parent) {
	        _super.call(this, null);
	        this.parent = parent;
	    }
	    WindowClosingNotifierSubscriber.prototype._next = function () {
	        this.parent.openWindow();
	    };
	    WindowClosingNotifierSubscriber.prototype._error = function (err) {
	        this.parent.error(err);
	    };
	    WindowClosingNotifierSubscriber.prototype._complete = function () {
	        this.parent.openWindow();
	    };
	    return WindowClosingNotifierSubscriber;
	})(Subscriber_1.Subscriber);
	//# sourceMappingURL=windowWhen.js.map

/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var withLatestFrom_1 = __webpack_require__(507);
	Observable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;
	//# sourceMappingURL=withLatestFrom.js.map

/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var tryCatch_1 = __webpack_require__(269);
	var errorObject_1 = __webpack_require__(270);
	var OuterSubscriber_1 = __webpack_require__(303);
	var subscribeToResult_1 = __webpack_require__(304);
	/**
	 * @param {Observable} observables the observables to get the latest values from.
	 * @param {Function} [project] optional projection function for merging values together. Receives all values in order
	 *  of observables passed. (e.g. `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not passed, arrays
	 *  will be returned.
	 * @description merges each value from an observable with the latest values from the other passed observables.
	 * All observables must emit at least one value before the resulting observable will emit
	 *
	 * #### example
	 * ```
	 * A.withLatestFrom(B, C)
	 *
	 *  A:     ----a-----------------b---------------c-----------|
	 *  B:     ---d----------------e--------------f---------|
	 *  C:     --x----------------y-------------z-------------|
	 * result: ---([a,d,x])---------([b,e,y])--------([c,f,z])---|
	 * ```
	 */
	function withLatestFrom() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i - 0] = arguments[_i];
	    }
	    var project;
	    if (typeof args[args.length - 1] === 'function') {
	        project = args.pop();
	    }
	    var observables = args;
	    return this.lift(new WithLatestFromOperator(observables, project));
	}
	exports.withLatestFrom = withLatestFrom;
	var WithLatestFromOperator = (function () {
	    function WithLatestFromOperator(observables, project) {
	        this.observables = observables;
	        this.project = project;
	    }
	    WithLatestFromOperator.prototype.call = function (subscriber) {
	        return new WithLatestFromSubscriber(subscriber, this.observables, this.project);
	    };
	    return WithLatestFromOperator;
	})();
	var WithLatestFromSubscriber = (function (_super) {
	    __extends(WithLatestFromSubscriber, _super);
	    function WithLatestFromSubscriber(destination, observables, project) {
	        _super.call(this, destination);
	        this.observables = observables;
	        this.project = project;
	        this.toRespond = [];
	        var len = observables.length;
	        this.values = new Array(len);
	        for (var i = 0; i < len; i++) {
	            this.toRespond.push(i);
	        }
	        for (var i = 0; i < len; i++) {
	            var observable = observables[i];
	            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));
	        }
	    }
	    WithLatestFromSubscriber.prototype.notifyNext = function (observable, value, observableIndex, index) {
	        this.values[observableIndex] = value;
	        var toRespond = this.toRespond;
	        if (toRespond.length > 0) {
	            var found = toRespond.indexOf(observableIndex);
	            if (found !== -1) {
	                toRespond.splice(found, 1);
	            }
	        }
	    };
	    WithLatestFromSubscriber.prototype.notifyComplete = function () {
	        // noop
	    };
	    WithLatestFromSubscriber.prototype._next = function (value) {
	        if (this.toRespond.length === 0) {
	            var values = this.values;
	            var destination = this.destination;
	            var project = this.project;
	            var args = [value].concat(values);
	            if (project) {
	                var result = tryCatch_1.tryCatch(this.project).apply(this, args);
	                if (result === errorObject_1.errorObject) {
	                    destination.error(result.e);
	                }
	                else {
	                    destination.next(result);
	                }
	            }
	            else {
	                destination.next(args);
	            }
	        }
	    };
	    return WithLatestFromSubscriber;
	})(OuterSubscriber_1.OuterSubscriber);
	//# sourceMappingURL=withLatestFrom.js.map

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var zip_1 = __webpack_require__(509);
	Observable_1.Observable.prototype.zip = zip_1.zipProto;
	//# sourceMappingURL=zip.js.map

/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	var zip_static_1 = __webpack_require__(349);
	function zipProto() {
	    var observables = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        observables[_i - 0] = arguments[_i];
	    }
	    observables.unshift(this);
	    return zip_static_1.zip.apply(this, observables);
	}
	exports.zipProto = zipProto;
	//# sourceMappingURL=zip.js.map

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	var Observable_1 = __webpack_require__(51);
	var zipAll_1 = __webpack_require__(511);
	Observable_1.Observable.prototype.zipAll = zipAll_1.zipAll;
	//# sourceMappingURL=zipAll.js.map

/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	var zip_support_1 = __webpack_require__(350);
	function zipAll(project) {
	    return this.lift(new zip_support_1.ZipOperator(project));
	}
	exports.zipAll = zipAll;
	//# sourceMappingURL=zipAll.js.map

/***/ },
/* 512 */
/***/ function(module, exports) {

	/*! *****************************************************************************
	Copyright (C) Microsoft. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0
	
	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.
	
	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	"use strict";
	var Reflect;
	(function (Reflect) {
	    // Load global or shim versions of Map, Set, and WeakMap
	    var functionPrototype = Object.getPrototypeOf(Function);
	    var _Map = typeof Map === "function" ? Map : CreateMapPolyfill();
	    var _Set = typeof Set === "function" ? Set : CreateSetPolyfill();
	    var _WeakMap = typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
	    // [[Metadata]] internal slot
	    var __Metadata__ = new _WeakMap();
	    /**
	      * Applies a set of decorators to a property of a target object.
	      * @param decorators An array of decorators.
	      * @param target The target object.
	      * @param targetKey (Optional) The property key to decorate.
	      * @param targetDescriptor (Optional) The property descriptor for the target key
	      * @remarks Decorators are applied in reverse order.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     C = Reflect.decorate(decoratorsArray, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.decorate(decoratorsArray, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.decorate(decoratorsArray, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Object.defineProperty(C, "staticMethod",
	      *         Reflect.decorate(decoratorsArray, C, "staticMethod",
	      *             Object.getOwnPropertyDescriptor(C, "staticMethod")));
	      *
	      *     // method (on prototype)
	      *     Object.defineProperty(C.prototype, "method",
	      *         Reflect.decorate(decoratorsArray, C.prototype, "method",
	      *             Object.getOwnPropertyDescriptor(C.prototype, "method")));
	      *
	      */
	    function decorate(decorators, target, targetKey, targetDescriptor) {
	        if (!IsUndefined(targetDescriptor)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(target)) {
	                throw new TypeError();
	            }
	            else if (IsUndefined(targetKey)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(targetDescriptor)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithDescriptor(decorators, target, targetKey, targetDescriptor);
	        }
	        else if (!IsUndefined(targetKey)) {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsObject(target)) {
	                throw new TypeError();
	            }
	            targetKey = ToPropertyKey(targetKey);
	            return DecoratePropertyWithoutDescriptor(decorators, target, targetKey);
	        }
	        else {
	            if (!IsArray(decorators)) {
	                throw new TypeError();
	            }
	            else if (!IsConstructor(target)) {
	                throw new TypeError();
	            }
	            return DecorateConstructor(decorators, target);
	        }
	    }
	    Reflect.decorate = decorate;
	    /**
	      * A default metadata decorator factory that can be used on a class, class member, or parameter.
	      * @param metadataKey The key for the metadata entry.
	      * @param metadataValue The value for the metadata entry.
	      * @returns A decorator function.
	      * @remarks
	      * If `metadataKey` is already defined for the target and target key, the
	      * metadataValue for that key will be overwritten.
	      * @example
	      *
	      *     // constructor
	      *     @Reflect.metadata(key, value)
	      *     class C {
	      *     }
	      *
	      *     // property (on constructor, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticProperty;
	      *     }
	      *
	      *     // property (on prototype, TypeScript only)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         property;
	      *     }
	      *
	      *     // method (on constructor)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         static staticMethod() { }
	      *     }
	      *
	      *     // method (on prototype)
	      *     class C {
	      *         @Reflect.metadata(key, value)
	      *         method() { }
	      *     }
	      *
	      */
	    function metadata(metadataKey, metadataValue) {
	        function decorator(target, targetKey) {
	            if (!IsUndefined(targetKey)) {
	                if (!IsObject(target)) {
	                    throw new TypeError();
	                }
	                targetKey = ToPropertyKey(targetKey);
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	            }
	            else {
	                if (!IsConstructor(target)) {
	                    throw new TypeError();
	                }
	                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, undefined);
	            }
	        }
	        return decorator;
	    }
	    Reflect.metadata = metadata;
	    /**
	      * Define a unique metadata entry on the target.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param metadataValue A value that contains attached metadata.
	      * @param target The target object on which to define metadata.
	      * @param targetKey (Optional) The property key for the target.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     Reflect.defineMetadata("custom:annotation", options, C);
	      *
	      *     // property (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     Reflect.defineMetadata("custom:annotation", options, C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     Reflect.defineMetadata("custom:annotation", options, C.prototype, "method");
	      *
	      *     // decorator factory as metadata-producing annotation.
	      *     function MyAnnotation(options): Decorator {
	      *         return (target, key?) => Reflect.defineMetadata("custom:annotation", options, target, key);
	      *     }
	      *
	      */
	    function defineMetadata(metadataKey, metadataValue, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, targetKey);
	    }
	    Reflect.defineMetadata = defineMetadata;
	    /**
	      * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasMetadata = hasMetadata;
	    /**
	      * Gets a value indicating whether the target object has the provided metadata key defined.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.hasOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function hasOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryHasOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.hasOwnMetadata = hasOwnMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object or its prototype chain.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getMetadata = getMetadata;
	    /**
	      * Gets the metadata value for the provided metadata key on the target object.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns The metadata value for the metadata key if found; otherwise, `undefined`.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function getOwnMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryGetOwnMetadata(metadataKey, target, targetKey);
	    }
	    Reflect.getOwnMetadata = getOwnMetadata;
	    /**
	      * Gets the metadata keys defined on the target object or its prototype chain.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryMetadataKeys(target, targetKey);
	    }
	    Reflect.getMetadataKeys = getMetadataKeys;
	    /**
	      * Gets the unique metadata keys defined on the target object.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns An array of unique metadata keys.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.getOwnMetadataKeys(C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.getOwnMetadataKeys(C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.getOwnMetadataKeys(C.prototype, "method");
	      *
	      */
	    function getOwnMetadataKeys(target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        return OrdinaryOwnMetadataKeys(target, targetKey);
	    }
	    Reflect.getOwnMetadataKeys = getOwnMetadataKeys;
	    /**
	      * Deletes the metadata entry from the target object with the provided key.
	      * @param metadataKey A key used to store and retrieve metadata.
	      * @param target The target object on which the metadata is defined.
	      * @param targetKey (Optional) The property key for the target.
	      * @returns `true` if the metadata entry was found and deleted; otherwise, false.
	      * @example
	      *
	      *     class C {
	      *         // property declarations are not part of ES6, though they are valid in TypeScript:
	      *         // static staticProperty;
	      *         // property;
	      *
	      *         constructor(p) { }
	      *         static staticMethod(p) { }
	      *         method(p) { }
	      *     }
	      *
	      *     // constructor
	      *     result = Reflect.deleteMetadata("custom:annotation", C);
	      *
	      *     // property (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticProperty");
	      *
	      *     // property (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "property");
	      *
	      *     // method (on constructor)
	      *     result = Reflect.deleteMetadata("custom:annotation", C, "staticMethod");
	      *
	      *     // method (on prototype)
	      *     result = Reflect.deleteMetadata("custom:annotation", C.prototype, "method");
	      *
	      */
	    function deleteMetadata(metadataKey, target, targetKey) {
	        if (!IsObject(target)) {
	            throw new TypeError();
	        }
	        else if (!IsUndefined(targetKey)) {
	            targetKey = ToPropertyKey(targetKey);
	        }
	        // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#deletemetadata-metadatakey-p-
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        if (IsUndefined(metadataMap)) {
	            return false;
	        }
	        if (!metadataMap.delete(metadataKey)) {
	            return false;
	        }
	        if (metadataMap.size > 0) {
	            return true;
	        }
	        var targetMetadata = __Metadata__.get(target);
	        targetMetadata.delete(targetKey);
	        if (targetMetadata.size > 0) {
	            return true;
	        }
	        __Metadata__.delete(target);
	        return true;
	    }
	    Reflect.deleteMetadata = deleteMetadata;
	    function DecorateConstructor(decorators, target) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target);
	            if (!IsUndefined(decorated)) {
	                if (!IsConstructor(decorated)) {
	                    throw new TypeError();
	                }
	                target = decorated;
	            }
	        }
	        return target;
	    }
	    function DecoratePropertyWithDescriptor(decorators, target, propertyKey, descriptor) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            var decorated = decorator(target, propertyKey, descriptor);
	            if (!IsUndefined(decorated)) {
	                if (!IsObject(decorated)) {
	                    throw new TypeError();
	                }
	                descriptor = decorated;
	            }
	        }
	        return descriptor;
	    }
	    function DecoratePropertyWithoutDescriptor(decorators, target, propertyKey) {
	        for (var i = decorators.length - 1; i >= 0; --i) {
	            var decorator = decorators[i];
	            decorator(target, propertyKey);
	        }
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#getorcreatemetadatamap--o-p-create-
	    function GetOrCreateMetadataMap(target, targetKey, create) {
	        var targetMetadata = __Metadata__.get(target);
	        if (!targetMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            targetMetadata = new _Map();
	            __Metadata__.set(target, targetMetadata);
	        }
	        var keyMetadata = targetMetadata.get(targetKey);
	        if (!keyMetadata) {
	            if (!create) {
	                return undefined;
	            }
	            keyMetadata = new _Map();
	            targetMetadata.set(targetKey, keyMetadata);
	        }
	        return keyMetadata;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasmetadata--metadatakey-o-p-
	    function OrdinaryHasMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn) {
	            return true;
	        }
	        var parent = GetPrototypeOf(O);
	        if (parent !== null) {
	            return OrdinaryHasMetadata(MetadataKey, parent, P);
	        }
	        return false;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryhasownmetadata--metadatakey-o-p-
	    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return false;
	        }
	        return Boolean(metadataMap.has(MetadataKey));
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetmetadata--metadatakey-o-p-
	    function OrdinaryGetMetadata(MetadataKey, O, P) {
	        var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);
	        if (hasOwn) {
	            return OrdinaryGetOwnMetadata(MetadataKey, O, P);
	        }
	        var parent = GetPrototypeOf(O);
	        if (parent !== null) {
	            return OrdinaryGetMetadata(MetadataKey, parent, P);
	        }
	        return undefined;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarygetownmetadata--metadatakey-o-p-
	    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, false);
	        if (metadataMap === undefined) {
	            return undefined;
	        }
	        return metadataMap.get(MetadataKey);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarydefineownmetadata--metadatakey-metadatavalue-o-p-
	    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
	        var metadataMap = GetOrCreateMetadataMap(O, P, true);
	        metadataMap.set(MetadataKey, MetadataValue);
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinarymetadatakeys--o-p-
	    function OrdinaryMetadataKeys(O, P) {
	        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
	        var parent = GetPrototypeOf(O);
	        if (parent === null) {
	            return ownKeys;
	        }
	        var parentKeys = OrdinaryMetadataKeys(parent, P);
	        if (parentKeys.length <= 0) {
	            return ownKeys;
	        }
	        if (ownKeys.length <= 0) {
	            return parentKeys;
	        }
	        var set = new _Set();
	        var keys = [];
	        for (var _i = 0; _i < ownKeys.length; _i++) {
	            var key = ownKeys[_i];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        for (var _a = 0; _a < parentKeys.length; _a++) {
	            var key = parentKeys[_a];
	            var hasKey = set.has(key);
	            if (!hasKey) {
	                set.add(key);
	                keys.push(key);
	            }
	        }
	        return keys;
	    }
	    // https://github.com/jonathandturner/decorators/blob/master/specs/metadata.md#ordinaryownmetadatakeys--o-p-
	    function OrdinaryOwnMetadataKeys(target, targetKey) {
	        var metadataMap = GetOrCreateMetadataMap(target, targetKey, false);
	        var keys = [];
	        if (metadataMap) {
	            metadataMap.forEach(function (_, key) { return keys.push(key); });
	        }
	        return keys;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-undefined-type
	    function IsUndefined(x) {
	        return x === undefined;
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
	    function IsArray(x) {
	        return Array.isArray(x);
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-type
	    function IsObject(x) {
	        return typeof x === "object" ? x !== null : typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
	    function IsConstructor(x) {
	        return typeof x === "function";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ecmascript-language-types-symbol-type
	    function IsSymbol(x) {
	        return typeof x === "symbol";
	    }
	    // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
	    function ToPropertyKey(value) {
	        if (IsSymbol(value)) {
	            return value;
	        }
	        return String(value);
	    }
	    function GetPrototypeOf(O) {
	        var proto = Object.getPrototypeOf(O);
	        if (typeof O !== "function" || O === functionPrototype) {
	            return proto;
	        }
	        // TypeScript doesn't set __proto__ in ES5, as it's non-standard. 
	        // Try to determine the superclass constructor. Compatible implementations
	        // must either set __proto__ on a subclass constructor to the superclass constructor,
	        // or ensure each class has a valid `constructor` property on its prototype that
	        // points back to the constructor.
	        // If this is not the same as Function.[[Prototype]], then this is definately inherited.
	        // This is the case when in ES6 or when using __proto__ in a compatible browser.
	        if (proto !== functionPrototype) {
	            return proto;
	        }
	        // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.
	        var prototype = O.prototype;
	        var prototypeProto = Object.getPrototypeOf(prototype);
	        if (prototypeProto == null || prototypeProto === Object.prototype) {
	            return proto;
	        }
	        // if the constructor was not a function, then we cannot determine the heritage.
	        var constructor = prototypeProto.constructor;
	        if (typeof constructor !== "function") {
	            return proto;
	        }
	        // if we have some kind of self-reference, then we cannot determine the heritage.
	        if (constructor === O) {
	            return proto;
	        }
	        // we have a pretty good guess at the heritage.
	        return constructor;
	    }
	    // naive Map shim
	    function CreateMapPolyfill() {
	        var cacheSentinel = {};
	        function Map() {
	            this._keys = [];
	            this._values = [];
	            this._cache = cacheSentinel;
	        }
	        Map.prototype = {
	            get size() {
	                return this._keys.length;
	            },
	            has: function (key) {
	                if (key === this._cache) {
	                    return true;
	                }
	                if (this._find(key) >= 0) {
	                    this._cache = key;
	                    return true;
	                }
	                return false;
	            },
	            get: function (key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._cache = key;
	                    return this._values[index];
	                }
	                return undefined;
	            },
	            set: function (key, value) {
	                this.delete(key);
	                this._keys.push(key);
	                this._values.push(value);
	                this._cache = key;
	                return this;
	            },
	            delete: function (key) {
	                var index = this._find(key);
	                if (index >= 0) {
	                    this._keys.splice(index, 1);
	                    this._values.splice(index, 1);
	                    this._cache = cacheSentinel;
	                    return true;
	                }
	                return false;
	            },
	            clear: function () {
	                this._keys.length = 0;
	                this._values.length = 0;
	                this._cache = cacheSentinel;
	            },
	            forEach: function (callback, thisArg) {
	                var size = this.size;
	                for (var i = 0; i < size; ++i) {
	                    var key = this._keys[i];
	                    var value = this._values[i];
	                    this._cache = key;
	                    callback.call(this, value, key, this);
	                }
	            },
	            _find: function (key) {
	                var keys = this._keys;
	                var size = keys.length;
	                for (var i = 0; i < size; ++i) {
	                    if (keys[i] === key) {
	                        return i;
	                    }
	                }
	                return -1;
	            }
	        };
	        return Map;
	    }
	    // naive Set shim
	    function CreateSetPolyfill() {
	        var cacheSentinel = {};
	        function Set() {
	            this._map = new _Map();
	        }
	        Set.prototype = {
	            get size() {
	                return this._map.length;
	            },
	            has: function (value) {
	                return this._map.has(value);
	            },
	            add: function (value) {
	                this._map.set(value, value);
	                return this;
	            },
	            delete: function (value) {
	                return this._map.delete(value);
	            },
	            clear: function () {
	                this._map.clear();
	            },
	            forEach: function (callback, thisArg) {
	                this._map.forEach(callback, thisArg);
	            }
	        };
	        return Set;
	    }
	    // naive WeakMap shim
	    function CreateWeakMapPolyfill() {
	        var UUID_SIZE = 16;
	        var isNode = typeof global !== "undefined" && Object.prototype.toString.call(global.process) === '[object process]';
	        var nodeCrypto = isNode && require("crypto");
	        var hasOwn = Object.prototype.hasOwnProperty;
	        var keys = {};
	        var rootKey = CreateUniqueKey();
	        function WeakMap() {
	            this._key = CreateUniqueKey();
	        }
	        WeakMap.prototype = {
	            has: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return this._key in table;
	                }
	                return false;
	            },
	            get: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table) {
	                    return table[this._key];
	                }
	                return undefined;
	            },
	            set: function (target, value) {
	                var table = GetOrCreateWeakMapTable(target, true);
	                table[this._key] = value;
	                return this;
	            },
	            delete: function (target) {
	                var table = GetOrCreateWeakMapTable(target, false);
	                if (table && this._key in table) {
	                    return delete table[this._key];
	                }
	                return false;
	            },
	            clear: function () {
	                // NOTE: not a real clear, just makes the previous data unreachable
	                this._key = CreateUniqueKey();
	            }
	        };
	        function FillRandomBytes(buffer, size) {
	            for (var i = 0; i < size; ++i) {
	                buffer[i] = Math.random() * 255 | 0;
	            }
	        }
	        function GenRandomBytes(size) {
	            if (nodeCrypto) {
	                var data = nodeCrypto.randomBytes(size);
	                return data;
	            }
	            else if (typeof Uint8Array === "function") {
	                var data = new Uint8Array(size);
	                if (typeof crypto !== "undefined") {
	                    crypto.getRandomValues(data);
	                }
	                else if (typeof msCrypto !== "undefined") {
	                    msCrypto.getRandomValues(data);
	                }
	                else {
	                    FillRandomBytes(data, size);
	                }
	                return data;
	            }
	            else {
	                var data = new Array(size);
	                FillRandomBytes(data, size);
	                return data;
	            }
	        }
	        function CreateUUID() {
	            var data = GenRandomBytes(UUID_SIZE);
	            // mark as random - RFC 4122 § 4.4
	            data[6] = data[6] & 0x4f | 0x40;
	            data[8] = data[8] & 0xbf | 0x80;
	            var result = "";
	            for (var offset = 0; offset < UUID_SIZE; ++offset) {
	                var byte = data[offset];
	                if (offset === 4 || offset === 6 || offset === 8) {
	                    result += "-";
	                }
	                if (byte < 16) {
	                    result += "0";
	                }
	                result += byte.toString(16).toLowerCase();
	            }
	            return result;
	        }
	        function CreateUniqueKey() {
	            var key;
	            do {
	                key = "@@WeakMap@@" + CreateUUID();
	            } while (hasOwn.call(keys, key));
	            keys[key] = true;
	            return key;
	        }
	        function GetOrCreateWeakMapTable(target, create) {
	            if (!hasOwn.call(target, rootKey)) {
	                if (!create) {
	                    return undefined;
	                }
	                Object.defineProperty(target, rootKey, { value: Object.create(null) });
	            }
	            return target[rootKey];
	        }
	        return WeakMap;
	    }
	    // hook global Reflect
	    (function (__global) {
	        if (typeof __global.Reflect !== "undefined") {
	            if (__global.Reflect !== Reflect) {
	                for (var p in Reflect) {
	                    __global.Reflect[p] = Reflect[p];
	                }
	            }
	        }
	        else {
	            __global.Reflect = Reflect;
	        }
	    })(typeof window !== "undefined" ? window :
	        typeof WorkerGlobalScope !== "undefined" ? self :
	            typeof global !== "undefined" ? global :
	                Function("return this;")());
	})(Reflect || (Reflect = {}));
	//# sourceMappingURL=Reflect.js.map

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {
	
	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;
	
	  /** Used as the semantic version number. */
	  var VERSION = '3.10.1';
	
	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256;
	
	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';
	
	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;
	
	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;
	
	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;
	
	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';
	
	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';
	
	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';
	
	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';
	
	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
	
	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
	
	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;
	
	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;
	
	  /**
	   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	   */
	  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);
	
	  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;
	
	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;
	
	  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
	
	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;
	
	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0[xX]/;
	
	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^\d+$/;
	
	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;
	
	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;
	
	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
	
	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';
	
	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());
	
	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
	    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
	  ];
	
	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;
	
	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
	
	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;
	
	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };
	
	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };
	
	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };
	
	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };
	
	  /** Used to escape characters for inclusion in compiled regexes. */
	  var regexpEscapes = {
	    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	  };
	
	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;
	
	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;
	
	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;
	
	  /** Detect free variable `self`. */
	  var freeSelf = objectTypes[typeof self] && self && self.Object && self;
	
	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window && window.Object && window;
	
	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;
	
	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;
	
	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;
	
	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }
	
	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;
	
	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;
	
	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }
	
	  /**
	   * Converts `value` to a string if it's not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    return value == null ? '' : (value + '');
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;
	
	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;
	
	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }
	
	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }
	
	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
	   * a value is sorted in ascending order if its corresponding order is "asc", and
	   * descending if "desc".
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;
	
	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * ((order === 'asc' || order === true) ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }
	
	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }
	
	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }
	
	  /**
	   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @param {string} leadingChar The capture group for a leading character.
	   * @param {string} whitespaceChar The capture group for a whitespace character.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	    if (leadingChar) {
	      chr = regexpEscapes[chr];
	    } else if (whitespaceChar) {
	      chr = stringEscapes[chr];
	    }
	    return '\\' + chr;
	  }
	
	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }
	
	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);
	
	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }
	
	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }
	
	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }
	
	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];
	
	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];
	
	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;
	
	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;
	
	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }
	
	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;
	
	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }
	
	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }
	
	  /*--------------------------------------------------------------------------*/
	
	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;
	
	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;
	
	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;
	
	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;
	
	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;
	
	    /** Used to generate unique IDs. */
	    var idCounter = 0;
	
	    /**
	     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objToString = objectProto.toString;
	
	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;
	
	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );
	
	    /** Native method references. */
	    var ArrayBuffer = context.ArrayBuffer,
	        clearTimeout = context.clearTimeout,
	        parseFloat = context.parseFloat,
	        pow = Math.pow,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = getNative(context, 'Set'),
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = context.Uint8Array,
	        WeakMap = getNative(context, 'WeakMap');
	
	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeCreate = getNative(Object, 'create'),
	        nativeFloor = Math.floor,
	        nativeIsArray = getNative(Array, 'isArray'),
	        nativeIsFinite = context.isFinite,
	        nativeKeys = getNative(Object, 'keys'),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = getNative(Date, 'now'),
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;
	
	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;
	
	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = 4294967295,
	        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
	
	    /**
	     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	     * of an array-like value.
	     */
	    var MAX_SAFE_INTEGER = 9007199254740991;
	
	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;
	
	    /** Used to lookup unminified function names. */
	    var realNames = {};
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that retrieve a single value or may return a
	     * primitive value will automatically end the chain returning the unwrapped
	     * value. Explicit chaining may be enabled using `_.chain`. The execution of
	     * chained methods is lazy, that is, execution is deferred until `_#value`
	     * is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization strategy which merge iteratee calls; this can help
	     * to avoid the creation of intermediate data structures and greatly reduce the
	     * number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
	     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
	     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
	     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
	     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
	     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
	     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
	     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
	     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
	     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
	     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
	     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
	     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
	     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
	     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
	     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
	     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
	     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
	     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
	     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
	     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
	     * `unescape`, `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }
	
	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }
	
	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }
	
	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};
	
	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {
	
	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,
	
	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,
	
	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,
	
	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',
	
	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {
	
	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = [];
	    }
	
	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = arrayCopy(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = arrayCopy(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = arrayCopy(this.__views__);
	      return result;
	    }
	
	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }
	
	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);
	
	      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
	        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
	      }
	      var result = [];
	
	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;
	
	        var iterIndex = -1,
	            value = array[index];
	
	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);
	
	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }
	
	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }
	
	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }
	
	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }
	
	    /**
	     * Sets `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;
	
	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }
	
	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];
	
	      return result ? 0 : -1;
	    }
	
	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a new array joining `array` with `other`.
	     *
	     * @private
	     * @param {Array} array The array to join.
	     * @param {Array} other The other array to join.
	     * @returns {Array} Returns the new concatenated array.
	     */
	    function arrayConcat(array, other) {
	      var index = -1,
	          length = array.length,
	          othIndex = -1,
	          othLength = other.length,
	          result = Array(length + othLength);
	
	      while (++index < length) {
	        result[index] = array[index];
	      }
	      while (++othIndex < othLength) {
	        result[index++] = other[othIndex];
	      }
	      return result;
	    }
	
	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;
	
	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }
	
	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;
	
	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }
	
	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;
	
	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }
	
	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;
	
	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
	     * with one argument: (value).
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function arrayExtremum(array, iteratee, comparator, exValue) {
	      var index = -1,
	          length = array.length,
	          computed = exValue,
	          result = computed;
	
	      while (++index < length) {
	        var value = array[index],
	            current = +iteratee(value);
	
	        if (comparator(current, computed)) {
	          computed = current;
	          result = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];
	
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);
	
	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }
	
	    /**
	     * Appends the elements of `values` to `array`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to append.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayPush(array, values) {
	      var index = -1,
	          length = values.length,
	          offset = array.length;
	
	      while (++index < length) {
	        array[offset + index] = values[index];
	      }
	      return array;
	    }
	
	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;
	
	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }
	
	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }
	
	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;
	
	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }
	
	    /**
	     * A specialized version of `_.sum` for arrays without support for callback
	     * shorthands and `this` binding..
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function arraySum(array, iteratee) {
	      var length = array.length,
	          result = 0;
	
	      while (length--) {
	        result += +iteratee(array[length]) || 0;
	      }
	      return result;
	    }
	
	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : objectValue;
	    }
	
	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This function is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (objectValue === undefined || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }
	
	    /**
	     * A specialized version of `_.assign` for customizing assigned values without
	     * support for argument juggling, multiple sources, and `this` binding `customizer`
	     * functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     */
	    function assignWith(object, source, customizer) {
	      var index = -1,
	          props = keys(source),
	          length = props.length;
	
	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);
	
	        if ((result === result ? (result !== value) : (value === value)) ||
	            (value === undefined && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }
	
	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return source == null
	        ? object
	        : baseCopy(source, keys(source), object);
	    }
	
	    /**
	     * The base implementation of `_.at` without support for string collections
	     * and individual key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} props The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          isNil = collection == null,
	          isArr = !isNil && isArrayLike(collection),
	          length = isArr ? collection.length : 0,
	          propsLength = props.length,
	          result = Array(propsLength);
	
	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = isNil ? undefined : collection[key];
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, props, object) {
	      object || (object = {});
	
	      var index = -1,
	          length = props.length;
	
	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }
	
	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return thisArg === undefined
	          ? func
	          : bindCallback(func, thisArg, argCount);
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return thisArg === undefined
	        ? property(func)
	        : baseMatchesProperty(func, thisArg);
	    }
	
	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;
	
	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseAssign(result, value);
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);
	
	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);
	
	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          object.prototype = prototype;
	          var result = new object;
	          object.prototype = undefined;
	        }
	        return result || {};
	      };
	    }());
	
	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }
	
	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];
	
	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	          valuesLength = values.length;
	
	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];
	
	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);
	
	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);
	
	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }
	
	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(collection, iteratee, comparator, exValue) {
	      var computed = exValue,
	          result = computed;
	
	      baseEach(collection, function(value, index, collection) {
	        var current = +iteratee(value, index, collection);
	        if (comparator(current, computed) || (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;
	
	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;
	
	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict, result) {
	      result || (result = []);
	
	      var index = -1,
	          length = array.length;
	
	      while (++index < length) {
	        var value = array[index];
	        if (isObjectLike(value) && isArrayLike(value) &&
	            (isStrict || isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, isDeep, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();
	
	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);
	
	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }
	
	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }
	
	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }
	
	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];
	
	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `get` without support for string paths
	     * and default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path of the property to get.
	     * @param {string} [pathKey] The key representation of path.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path, pathKey) {
	      if (object == null) {
	        return;
	      }
	      if (pathKey !== undefined && pathKey in toObject(object)) {
	        path = [pathKey];
	      }
	      var index = 0,
	          length = path.length;
	
	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }
	
	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	    }
	
	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;
	
	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;
	
	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      if (!isLoose) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
	
	        if (objIsWrapped || othIsWrapped) {
	          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);
	
	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);
	
	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);
	
	      stackA.pop();
	      stackB.pop();
	
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} matchData The propery names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;
	
	      if (object == null) {
	        return !length;
	      }
	      object = toObject(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];
	
	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }
	
	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];
	
	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        var key = matchData[0][0],
	            value = matchData[0][1];
	
	        return function(object) {
	          if (object == null) {
	            return false;
	          }
	          return object[key] === value && (value !== undefined || (key in toObject(object)));
	        };
	      }
	      return function(object) {
	        return baseIsMatch(object, matchData);
	      };
	    }
	
	    /**
	     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      var isArr = isArray(path),
	          isCommon = isKey(path) && isStrictComparable(srcValue),
	          pathKey = (path + '');
	
	      path = toPath(path);
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        var key = pathKey;
	        object = toObject(object);
	        if ((isArr || !isCommon) && !(key in object)) {
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          if (object == null) {
	            return false;
	          }
	          key = last(path);
	          object = toObject(object);
	        }
	        return object[key] === srcValue
	          ? (srcValue !== undefined || (key in object))
	          : baseIsEqual(srcValue, object[key], undefined, true);
	      };
	    }
	
	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns `object`.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	          props = isSrcArr ? undefined : keys(source);
	
	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        else {
	          var value = object[key],
	              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	              isCommon = result === undefined;
	
	          if (isCommon) {
	            result = srcValue;
	          }
	          if ((result !== undefined || (isSrcArr && !(key in object))) &&
	              (isCommon || (result === result ? (result !== value) : (value === value)))) {
	            object[key] = result;
	          }
	        }
	      });
	      return object;
	    }
	
	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];
	
	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;
	
	      if (isCommon) {
	        result = srcValue;
	        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (isArrayLike(value) ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);
	
	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }
	
	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }
	
	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      var pathKey = (path + '');
	      path = toPath(path);
	      return function(object) {
	        return baseGet(object, path, pathKey);
	      };
	    }
	
	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments and capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0;
	      while (length--) {
	        var index = indexes[length];
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + nativeFloor(nativeRandom() * (max - min + 1));
	    }
	
	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands and `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }
	
	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };
	
	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;
	
	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;
	
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;
	
	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }
	
	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;
	
	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }
	
	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, iteratees, orders) {
	      var callback = getCallback(),
	          index = -1;
	
	      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });
	
	      var result = baseMap(collection, function(value) {
	        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });
	
	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }
	
	    /**
	     * The base implementation of `_.sum` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function baseSum(collection, iteratee) {
	      var result = 0;
	      baseEach(collection, function(value, index, collection) {
	        result += +iteratee(value, index, collection) || 0;
	      });
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	          seen = isLarge ? createCache() : null,
	          result = [];
	
	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;
	
	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * of `props`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);
	
	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }
	
	    /**
	     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	     * and `_.takeWhile` without support for callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;
	
	      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }
	
	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;
	
	      while (++index < length) {
	        var action = actions[index];
	        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }
	      return result;
	    }
	
	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;
	
	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];
	
	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }
	
	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);
	
	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;
	
	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;
	
	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }
	
	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (thisArg === undefined) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }
	
	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      var result = new ArrayBuffer(buffer.byteLength),
	          view = new Uint8Array(result);
	
	      view.set(new Uint8Array(buffer));
	      return result;
	    }
	
	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(leftLength + argsLength);
	
	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }
	
	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);
	
	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[offset + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }
	
	    /**
	     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);
	
	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;
	
	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return restParam(function(object, sources) {
	        var index = -1,
	            length = object == null ? 0 : sources.length,
	            customizer = length > 2 ? sources[length - 2] : undefined,
	            guard = length > 2 ? sources[2] : undefined,
	            thisArg = length > 1 ? sources[length - 1] : undefined;
	
	        if (typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = typeof thisArg == 'function' ? thisArg : undefined;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      });
	    }
	
	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        var length = collection ? getLength(collection) : 0;
	        if (!isLength(length)) {
	          return eachFunc(collection, iteratee);
	        }
	        var index = fromRight ? length : -1,
	            iterable = toObject(collection);
	
	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }
	
	    /**
	     * Creates a base function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var iterable = toObject(object),
	            props = keysFunc(object),
	            length = props.length,
	            index = fromRight ? length : -1;
	
	        while ((fromRight ? index-- : ++index < length)) {
	          var key = props[index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);
	
	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    function createCache(values) {
	      return (nativeCreate && Set) ? new SetCache(values) : null;
	    }
	
	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';
	
	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors.
	        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);
	
	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }
	
	    /**
	     * Creates a `_.curry` or `_.curryRight` function.
	     *
	     * @private
	     * @param {boolean} flag The curry bit flag.
	     * @returns {Function} Returns the new curry function.
	     */
	    function createCurry(flag) {
	      function curryFunc(func, arity, guard) {
	        if (guard && isIterateeCall(func, arity, guard)) {
	          arity = undefined;
	        }
	        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
	        result.placeholder = curryFunc.placeholder;
	        return result;
	      }
	      return curryFunc;
	    }
	
	    /**
	     * Creates a `_.defaults` or `_.defaultsDeep` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Function} Returns the new defaults function.
	     */
	    function createDefaults(assigner, customizer) {
	      return restParam(function(args) {
	        var object = args[0];
	        if (object == null) {
	          return object;
	        }
	        args.push(customizer);
	        return assigner.apply(undefined, args);
	      });
	    }
	
	    /**
	     * Creates a `_.max` or `_.min` function.
	     *
	     * @private
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(comparator, exValue) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = undefined;
	        }
	        iteratee = getCallback(iteratee, thisArg, 3);
	        if (iteratee.length == 1) {
	          collection = isArray(collection) ? collection : toIterable(collection);
	          var result = arrayExtremum(collection, iteratee, comparator, exValue);
	          if (!(collection.length && result === exValue)) {
	            return result;
	          }
	        }
	        return baseExtremum(collection, iteratee, comparator, exValue);
	      };
	    }
	
	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(eachFunc, fromRight) {
	      return function(collection, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        if (isArray(collection)) {
	          var index = baseFindIndex(collection, predicate, fromRight);
	          return index > -1 ? collection[index] : undefined;
	        }
	        return baseFind(collection, predicate, eachFunc);
	      };
	    }
	
	    /**
	     * Creates a `_.findIndex` or `_.findLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindIndex(fromRight) {
	      return function(array, predicate, thisArg) {
	        if (!(array && array.length)) {
	          return -1;
	        }
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFindIndex(array, predicate, fromRight);
	      };
	    }
	
	    /**
	     * Creates a `_.findKey` or `_.findLastKey` function.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindKey(objectFunc) {
	      return function(object, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFind(object, predicate, objectFunc, true);
	      };
	    }
	
	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return function() {
	        var wrapper,
	            length = arguments.length,
	            index = fromRight ? length : -1,
	            leftIndex = 0,
	            funcs = Array(length);
	
	        while ((fromRight ? index-- : ++index < length)) {
	          var func = funcs[leftIndex++] = arguments[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
	            wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? -1 : length;
	        while (++index < length) {
	          func = funcs[index];
	
	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;
	
	          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];
	
	          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;
	
	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }
	
	    /**
	     * Creates a function for `_.forEach` or `_.forEachRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForEach(arrayFunc, eachFunc) {
	      return function(collection, iteratee, thisArg) {
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee)
	          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	      };
	    }
	
	    /**
	     * Creates a function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForIn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee, keysIn);
	      };
	    }
	
	    /**
	     * Creates a function for `_.forOwn` or `_.forOwnRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForOwn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee);
	      };
	    }
	
	    /**
	     * Creates a function for `_.mapKeys` or `_.mapValues`.
	     *
	     * @private
	     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
	     * @returns {Function} Returns the new map function.
	     */
	    function createObjectMapper(isMapKeys) {
	      return function(object, iteratee, thisArg) {
	        var result = {};
	        iteratee = getCallback(iteratee, thisArg, 3);
	
	        baseForOwn(object, function(value, key, object) {
	          var mapped = iteratee(value, key, object);
	          key = isMapKeys ? mapped : key;
	          value = isMapKeys ? value : mapped;
	          result[key] = value;
	        });
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function for `_.padLeft` or `_.padRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify padding from the right.
	     * @returns {Function} Returns the new pad function.
	     */
	    function createPadDir(fromRight) {
	      return function(string, length, chars) {
	        string = baseToString(string);
	        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
	      };
	    }
	
	    /**
	     * Creates a `_.partial` or `_.partialRight` function.
	     *
	     * @private
	     * @param {boolean} flag The partial bit flag.
	     * @returns {Function} Returns the new partial function.
	     */
	    function createPartial(flag) {
	      var partialFunc = restParam(function(func, partials) {
	        var holders = replaceHolders(partials, partialFunc.placeholder);
	        return createWrapper(func, flag, undefined, partials, holders);
	      });
	      return partialFunc;
	    }
	
	    /**
	     * Creates a function for `_.reduce` or `_.reduceRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createReduce(arrayFunc, eachFunc) {
	      return function(collection, iteratee, accumulator, thisArg) {
	        var initFromArray = arguments.length < 3;
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	      };
	    }
	
	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);
	
	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);
	
	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);
	
	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : undefined,
	                newHoldersRight = isCurry ? undefined : argsHolders,
	                newPartials = isCurry ? args : undefined,
	                newPartialsRight = isCurry ? undefined : args;
	
	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);
	
	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	                result = createHybridWrapper.apply(undefined, newData);
	
	            if (isLaziable(func)) {
	              setData(result, newData);
	            }
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;
	
	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(func);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates the padding required for `string` based on the given `length`.
	     * The `chars` string is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPadding(string, length, chars) {
	      var strLength = string.length;
	      length = +length;
	
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
	    }
	
	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);
	
	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength);
	
	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }
	
	    /**
	     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        precision = precision === undefined ? 0 : (+precision || 0);
	        if (precision) {
	          precision = pow(10, precision);
	          return func(number * precision) / precision;
	        }
	        return func(number);
	      };
	    }
	
	    /**
	     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {Function} Returns the new index function.
	     */
	    function createSortedIndex(retHighest) {
	      return function(array, value, iteratee, thisArg) {
	        var callback = getCallback(iteratee);
	        return (iteratee == null && callback === baseCallback)
	          ? binaryIndex(array, value, retHighest)
	          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
	      };
	    }
	
	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;
	
	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];
	
	      if (data) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);
	
	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length;
	
	      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	        return false;
	      }
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index],
	            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;
	
	        if (result !== undefined) {
	          if (result) {
	            continue;
	          }
	          return false;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isLoose) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	              })) {
	            return false;
	          }
	        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;
	
	        case errorTag:
	          return object.name == other.name && object.message == other.message;
	
	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            : object == +other;
	
	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }
	
	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;
	
	      if (objLength != othLength && !isLoose) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      var skipCtor = isLoose;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key],
	            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;
	
	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	          return false;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (!skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;
	
	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }
	
	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };
	
	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = func.name,
	          array = realNames[result],
	          length = array ? array.length : 0;
	
	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }
	
	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * that affects Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');
	
	    /**
	     * Gets the propery names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = pairs(object),
	          length = result.length;
	
	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }
	
	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object == null ? undefined : object[key];
	      return isNative(value) ? value : undefined;
	    }
	
	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;
	
	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;
	
	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }
	
	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);
	
	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }
	
	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }
	
	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);
	
	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);
	
	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);
	
	        case numberTag:
	        case stringTag:
	          return new Ctor(object);
	
	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }
	
	    /**
	     * Invokes the method at `path` on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function invokePath(object, path, args) {
	      if (object != null && !isKey(path, object)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : func.apply(object, args);
	    }
	
	    /**
	     * Checks if `value` is array-like.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value));
	    }
	
	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }
	
	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	          ? (isArrayLike(object) && isIndex(index, object.length))
	          : (type == 'string' && index in object)) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }
	
	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	        return true;
	      }
	      if (isArray(value)) {
	        return false;
	      }
	      var result = !reIsDeepProp.test(value);
	      return result || (object != null && value in toObject(object));
	    }
	
	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func);
	      if (!(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      var other = lodash[funcName];
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }
	
	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }
	
	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }
	
	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < ARY_FLAG;
	
	      var isCombo =
	        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);
	
	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;
	
	      return data;
	    }
	
	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function mergeDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
	    }
	
	    /**
	     * A specialized version of `_.pick` which picks `object` properties specified
	     * by `props`.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);
	
	      var index = -1,
	          length = props.length,
	          result = {};
	
	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }
	
	    /**
	     * A specialized version of `_.pick` which picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }
	
	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);
	
	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }
	
	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;
	
	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);
	
	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());
	
	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length;
	
	      var allowIndexes = !!length && isLength(length) &&
	        (isArray(object) || isArguments(object));
	
	      var index = -1,
	          result = [];
	
	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Converts `value` to an array-like object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isArrayLike(value)) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }
	
	    /**
	     * Converts `value` to an object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }
	
	    /**
	     * Converts `value` to property path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array} Returns the property path array.
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return value;
	      }
	      var result = [];
	      baseToString(value).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }
	
	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(nativeFloor(size) || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(nativeCeil(length / size));
	
	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];
	
	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array of unique `array` values not included in the other
	     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    var difference = restParam(function(array, values) {
	      return (isObjectLike(array) && isArrayLike(array))
	        ? baseDifference(array, baseFlatten(values, false, true))
	        : [];
	    });
	
	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
	        : [];
	    }
	
	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
	        : [];
	    }
	
	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8], '*', 1, 2);
	     * // => [4, '*', 8]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }
	
	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    var findIndex = createFindIndex();
	
	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    var findLastIndex = createFindIndex(true);
	
	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }
	
	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]]
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4]
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }
	
	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }
	
	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
	     * performs a faster binary search.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value);
	        if (index < length &&
	            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }
	
	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }
	
	    /**
	     * Creates an array of unique values that are included in all of the provided
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    var intersection = restParam(function(arrays) {
	      var othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(length),
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          result = [];
	
	      while (othIndex--) {
	        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
	        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
	      }
	      var array = arrays[0],
	          index = -1,
	          length = array ? array.length : 0,
	          seen = caches[0];
	
	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          var othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    });
	
	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }
	
	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }
	
	    /**
	     * Removes all provided values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];
	
	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;
	
	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];
	
	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }
	
	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = restParam(function(array, indexes) {
	      indexes = baseFlatten(indexes);
	
	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(baseCompareAscending));
	      return result;
	    });
	
	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;
	
	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }
	
	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }
	
	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }
	
	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    var sortedIndex = createSortedIndex();
	
	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    var sortedLastIndex = createSortedIndex(true);
	
	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }
	
	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
	        : [];
	    }
	
	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3))
	        : [];
	    }
	
	    /**
	     * Creates an array of unique values, in order, from all of the provided arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    var union = restParam(function(arrays) {
	      return baseUniq(baseFlatten(arrays, false, true));
	    });
	
	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurence of each element
	     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	     * for sorted arrays. If an iteratee function is provided it is invoked for
	     * each element in the array to generate the criterion by which uniqueness
	     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, array).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	        isSorted = false;
	      }
	      var callback = getCallback();
	      if (!(iteratee == null && callback === baseCallback)) {
	        iteratee = callback(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }
	
	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var index = -1,
	          length = 0;
	
	      array = arrayFilter(array, function(group) {
	        if (isArrayLike(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }
	
	    /**
	     * This method is like `_.unzip` except that it accepts an iteratee to specify
	     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee] The function to combine regrouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      iteratee = bindCallback(iteratee, thisArg, 4);
	      return arrayMap(result, function(group) {
	        return arrayReduce(group, iteratee, undefined, true);
	      });
	    }
	
	    /**
	     * Creates an array excluding all provided values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = restParam(function(array, values) {
	      return isArrayLike(array)
	        ? baseDifference(array, values)
	        : [];
	    });
	
	    /**
	     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the provided arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;
	
	      while (++index < length) {
	        var array = arguments[index];
	        if (isArrayLike(array)) {
	          var result = result
	            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }
	
	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = restParam(unzip);
	
	    /**
	     * The inverse of `_.pairs`; this method returns an object composed from arrays
	     * of property names and values. Provide either a single two dimensional array,
	     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	     * and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};
	
	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }
	
	    /**
	     * This method is like `_.zip` except that it accepts an iteratee to specify
	     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee] The function to combine grouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
	     * // => [111, 222]
	     */
	    var zipWith = restParam(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 2 ? arrays[length - 2] : undefined,
	          thisArg = length > 1 ? arrays[length - 1] : undefined;
	
	      if (length > 2 && typeof iteratee == 'function') {
	        length -= 2;
	      } else {
	        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
	        thisArg = undefined;
	      }
	      arrays.length = length;
	      return unzipWith(arrays, iteratee, thisArg);
	    });
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }
	
	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }
	
	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }
	
	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }
	
	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }
	
	    /**
	     * Creates a new array joining a wrapped array with any additional arrays
	     * and/or values.
	     *
	     * @name concat
	     * @memberOf _
	     * @category Chain
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var wrapped = _(array).concat(2, [3], [[4]]);
	     *
	     * console.log(wrapped.value());
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    var wrapperConcat = restParam(function(values) {
	      values = baseFlatten(values);
	      return this.thru(function(array) {
	        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
	      });
	    });
	
	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapped = wrapped.plant(other);
	     *
	     * otherWrapped.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;
	
	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }
	
	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;
	
	      var interceptor = function(value) {
	        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
	      };
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(interceptor);
	    }
	
	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }
	
	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	     * // => ['barney', 'pebbles']
	     */
	    var at = restParam(function(collection, props) {
	      return baseAt(collection, baseFlatten(props));
	    });
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });
	
	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }
	
	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }
	
	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    var find = createFind(baseEach);
	
	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(baseEachRight, true);
	
	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }
	
	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection). Iteratee functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    var forEach = createForEach(arrayEach, baseEach);
	
	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from right to left and returns the array
	     */
	    var forEachRight = createForEach(arrayEachRight, baseEachRight);
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });
	
	    /**
	     * Checks if `value` is in `collection` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex, guard) {
	      var length = collection ? getLength(collection) : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	        fromIndex = 0;
	      } else {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
	    }
	
	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });
	
	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it is
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invoke = restParam(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];
	
	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	      });
	      return result;
	    });
	
	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	     * `sum`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }
	
	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });
	
	    /**
	     * Gets the property value of `path` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|string} path The path of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, path) {
	      return map(collection, property(path));
	    }
	
	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
	     * and `sortByOrder`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    var reduce = createReduce(arrayReduce, baseEach);
	
	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    var reduceRight = createReduce(arrayReduceRight, baseEachRight);
	
	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }
	
	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;
	
	      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];
	
	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }
	
	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sample(collection, POSITIVE_INFINITY);
	    }
	
	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? getLength(collection) : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }
	
	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }
	
	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      var index = -1;
	      iteratee = getCallback(iteratee, thisArg, 3);
	
	      var result = baseMap(collection, function(value, key, collection) {
	        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }
	
	    /**
	     * This method is like `_.sortBy` except that it can sort by multiple iteratees
	     * or property names.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	     *  The iteratees to sort by, specified as individual values or arrays of values.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortByAll = restParam(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var guard = iteratees[2];
	      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	        iteratees.length = 1;
	      }
	      return baseSortByOrder(collection, baseFlatten(iteratees), []);
	    });
	
	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
	     * values are sorted in ascending order. Otherwise, a value is sorted in
	     * ascending order if its corresponding order is "asc", and descending if "desc".
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function sortByOrder(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(iteratees, orders, guard)) {
	        orders = undefined;
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, iteratees, orders);
	    }
	
	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }
	
	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = undefined;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }
	
	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = restParam(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bind.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });
	
	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    var bindAll = restParam(function(object, methodNames) {
	      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);
	
	      var index = -1,
	          length = methodNames.length;
	
	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    });
	
	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = restParam(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bindKey.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });
	
	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    var curry = createCurry(CURRY_FLAG);
	
	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    var curryRight = createCurry(CURRY_RIGHT_FLAG);
	
	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the debounced function return the result of the last
	     * `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;
	
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = !!options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	
	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        lastCalled = 0;
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }
	
	      function complete(isCalled, id) {
	        if (id) {
	          clearTimeout(id);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (isCalled) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = undefined;
	          }
	        }
	      }
	
	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          complete(trailingCall, maxTimeoutId);
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }
	
	      function maxDelayed() {
	        complete(trailing, timeoutId);
	      }
	
	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);
	
	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;
	
	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = undefined;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }
	
	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    var defer = restParam(function(func, args) {
	      return baseDelay(func, 1, args);
	    });
	
	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = restParam(function(func, wait, args) {
	      return baseDelay(func, wait, args);
	    });
	
	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();
	
	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);
	
	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;
	
	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }
	
	    /**
	     * Creates a function that runs each argument through a corresponding
	     * transform function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms] The functions to transform
	     * arguments, specified as individual functions or arrays of functions.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var modded = _.modArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * modded(1, 2);
	     * // => [1, 4]
	     *
	     * modded(5, 10);
	     * // => [25, 20]
	     */
	    var modArgs = restParam(function(func, transforms) {
	      transforms = baseFlatten(transforms);
	      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = transforms.length;
	      return restParam(function(args) {
	        var index = nativeMin(args.length, length);
	        while (index--) {
	          args[index] = transforms[index](args[index]);
	        }
	        return func.apply(this, args);
	      });
	    });
	
	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }
	
	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }
	
	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = createPartial(PARTIAL_FLAG);
	
	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);
	
	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    var rearg = restParam(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
	    });
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function restParam(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            rest = Array(length);
	
	        while (++index < length) {
	          rest[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, rest);
	          case 1: return func.call(this, args[0], rest);
	          case 2: return func.call(this, args[0], args[1], rest);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = rest;
	        return func.apply(this, otherArgs);
	      };
	    }
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }
	
	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed invocations. Provide an options object to indicate
	     * that `func` should be invoked on the leading and/or trailing edge of the
	     * `wait` timeout. Subsequent calls to the throttled function return the
	     * result of the last `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;
	
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	    }
	
	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      return typeof customizer == 'function'
	        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, isDeep);
	    }
	
	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      return typeof customizer == 'function'
	        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, true);
	    }
	
	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }
	
	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }
	
	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      return isObjectLike(value) && isArrayLike(value) &&
	        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	    }
	
	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	    };
	
	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	    }
	
	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objToString.call(value) == dateTag;
	    }
	
	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }
	
	    /**
	     * Checks if `value` is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !value.length;
	      }
	      return !keys(value).length;
	    }
	
	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments: (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @alias eq
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }
	
	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	    }
	
	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }
	
	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 equivalents which return 'object' for typed array constructors.
	      return isObject(value) && objToString.call(value) == funcTag;
	    }
	
	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }
	
	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments: (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      return baseIsMatch(object, getMatchData(source), customizer);
	    }
	
	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }
	
	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (isFunction(value)) {
	        return reIsNative.test(fnToString.call(value));
	      }
	      return isObjectLike(value) && reIsHostCtor.test(value);
	    }
	
	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }
	
	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	    }
	
	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      var Ctor;
	
	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return result === undefined || hasOwnProperty.call(value, result);
	    }
	
	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objToString.call(value) == regexpTag;
	    }
	
	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	    }
	
	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	    }
	
	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }
	
	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }
	
	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }
	
	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? getLength(value) : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }
	
	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments: (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);
	
	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments:
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * **Note:** This method mutates `object` and is based on
	     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(function(object, source, customizer) {
	      return customizer
	        ? assignWith(object, source, customizer)
	        : baseAssign(object, source);
	    });
	
	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = undefined;
	      }
	      return properties ? baseAssign(result, properties) : result;
	    }
	
	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = createDefaults(assign, assignDefaults);
	
	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = createDefaults(merge, mergeDefaults);
	
	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    var findKey = createFindKey(baseForOwn);
	
	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    var findLastKey = createFindKey(baseForOwnRight);
	
	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    var forIn = createForIn(baseFor);
	
	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    var forInRight = createForIn(baseForRight);
	
	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    var forOwn = createForOwn(baseForOwn);
	
	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    var forOwnRight = createForOwn(baseForOwnRight);
	
	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }
	
	    /**
	     * Gets the property value at `path` of `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
	      return result === undefined ? defaultValue : result;
	    }
	
	    /**
	     * Checks if `path` is a direct property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     */
	    function has(object, path) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasOwnProperty.call(object, path);
	      if (!result && !isKey(path)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        if (object == null) {
	          return false;
	        }
	        path = last(path);
	        result = hasOwnProperty.call(object, path);
	      }
	      return result || (isLength(object.length) && isIndex(path, object.length) &&
	        (isArray(object) || isArguments(object)));
	    }
	
	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = undefined;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};
	
	      while (++index < length) {
	        var key = props[index],
	            value = object[key];
	
	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      var Ctor = object == null ? undefined : object.constructor;
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object != 'function' && isArrayLike(object))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };
	
	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || isArguments(object)) && length) || 0;
	
	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;
	
	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * property of `object` through `iteratee`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    var mapKeys = createObjectMapper(true);
	
	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    var mapValues = createObjectMapper();
	
	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    var omit = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof props[0] != 'function') {
	        var props = arrayMap(baseFlatten(props), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      var predicate = bindCallback(props[0], props[1], 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    });
	
	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      object = toObject(object);
	
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);
	
	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }
	
	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    var pick = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      return typeof props[0] == 'function'
	        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	        : pickByArray(object, baseFlatten(props));
	    });
	
	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it is invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a.b.c', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a.b.c', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      var result = object == null ? undefined : object[path];
	      if (result === undefined) {
	        if (object != null && !isKey(path, object)) {
	          path = toPath(path);
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          result = object == null ? undefined : object[last(path)];
	        }
	        result = result === undefined ? defaultValue : result;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }
	
	    /**
	     * Sets the property value of `path` on `object`. If a portion of `path`
	     * does not exist it is created.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to augment.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      if (object == null) {
	        return object;
	      }
	      var pathKey = (path + '');
	      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);
	
	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;
	
	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          if (index == lastIndex) {
	            nested[key] = value;
	          } else if (nested[key] == null) {
	            nested[key] = isIndex(path[index + 1]) ? [] : {};
	          }
	        }
	        nested = nested[key];
	      }
	      return object;
	    }
	
	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);
	
	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }
	
	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }
	
	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it is set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= nativeMin(start, end) && value < nativeMax(start, end);
	    }
	
	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = undefined;
	      }
	      var noMin = min == null,
	          noMax = max == null;
	
	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });
	
	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }
	
	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }
	
	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');
	
	      var length = string.length;
	      position = position === undefined
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);
	
	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }
	
	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }
	
	    /**
	     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, escapeRegExpChar)
	        : (string || '(?:)');
	    }
	
	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;
	
	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = nativeFloor(mid),
	          rightLength = nativeCeil(mid);
	
	      chars = createPadding('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }
	
	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    var padLeft = createPadDir();
	
	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    var padRight = createPadDir(true);
	
	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = trim(string);
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }
	
	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        string += string;
	      } while (n);
	
	      return result;
	    }
	
	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });
	
	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });
	
	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);
	
	      return string.lastIndexOf(target, position) == position;
	    }
	
	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;
	
	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = undefined;
	      }
	      string = baseToString(string);
	      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);
	
	      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);
	
	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";
	
	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');
	
	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';
	
	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);
	
	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
	
	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;
	
	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });
	
	      source += "';\n";
	
	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');
	
	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';
	
	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });
	
	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }
	
	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }
	
	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }
	
	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }
	
	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;
	
	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);
	
	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }
	
	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }
	
	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = undefined;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = restParam(function(func, args) {
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });
	
	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = undefined;
	      }
	      return isObjectLike(func)
	        ? matches(func)
	        : baseCallback(func, thisArg);
	    }
	
	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }
	
	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }
	
	    /**
	     * Creates a function that performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }
	
	    /**
	     * Creates a function that compares the property value of `path` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }
	
	    /**
	     * Creates a function that invokes the method at `path` on a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = restParam(function(path, args) {
	      return function(object) {
	        return invokePath(object, path, args);
	      };
	    });
	
	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path on `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = restParam(function(object, args) {
	      return function(path) {
	        return invokePath(object, path, args);
	      };
	    });
	
	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj ? keys(source) : undefined,
	            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;
	
	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;
	
	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];
	
	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__),
	                    actions = result.__actions__ = arrayCopy(this.__actions__);
	
	                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              return func.apply(object, arrayPush([this.value()], arguments));
	            };
	          }(func));
	        }
	      }
	      return object;
	    }
	
	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      root._ = oldDash;
	      return this;
	    }
	
	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }
	
	    /**
	     * Creates a function that returns the property value at `path` on a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }
	
	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the property value at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return baseGet(object, toPath(path), path + '');
	      };
	    }
	
	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it is
	     * set to `start` with `start` then set to `0`. If `end` is less than `start`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = undefined;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);
	
	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);
	
	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }
	
	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = nativeFloor(n);
	
	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));
	
	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }
	
	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return (+augend || 0) + (+addend || 0);
	    }
	
	    /**
	     * Calculates `n` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');
	
	    /**
	     * Calculates `n` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');
	
	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    var max = createExtremum(gt, NEGATIVE_INFINITY);
	
	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var min = createExtremum(lt, POSITIVE_INFINITY);
	
	    /**
	     * Calculates `n` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');
	
	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6]);
	     * // => 10
	     *
	     * _.sum({ 'a': 4, 'b': 6 });
	     * // => 10
	     *
	     * var objects = [
	     *   { 'n': 4 },
	     *   { 'n': 6 }
	     * ];
	     *
	     * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
	     * // => 10
	     *
	     * // using the `_.property` callback shorthand
	     * _.sum(objects, 'n');
	     * // => 10
	     */
	    function sum(collection, iteratee, thisArg) {
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return iteratee.length == 1
	        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
	        : baseSum(collection, iteratee);
	    }
	
	    /*------------------------------------------------------------------------*/
	
	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;
	
	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;
	
	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;
	
	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;
	
	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;
	
	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;
	
	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.modArgs = modArgs;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.restParam = restParam;
	    lodash.set = set;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipWith = zipWith;
	
	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;
	
	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);
	
	    /*------------------------------------------------------------------------*/
	
	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.floor = floor;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;
	
	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.eq = isEqual;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;
	
	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);
	
	    /*------------------------------------------------------------------------*/
	
	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;
	
	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };
	
	    /*------------------------------------------------------------------------*/
	
	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;
	
	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });
	
	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);
	
	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(result.__takeCount__, n);
	        } else {
	          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };
	
	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });
	
	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type != LAZY_MAP_FLAG;
	
	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var result = this.clone();
	        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');
	
	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');
	
	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });
	
	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : property;
	
	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });
	
	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };
	
	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };
	
	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);
	
	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };
	
	    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
	      return this.reverse().takeWhile(predicate, thisArg).reverse();
	    };
	
	    LazyWrapper.prototype.toArray = function() {
	      return this.take(POSITIVE_INFINITY);
	    };
	
	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName),
	          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];
	
	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var args = retUnwrapped ? [1] : arguments,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);
	
	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var interceptor = function(value) {
	          return (retUnwrapped && chainAll)
	            ? lodashFunc(value, 1)[0]
	            : lodashFunc.apply(undefined, arrayPush([value], args));
	        };
	
	        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
	            onlyLazy = isLazy && !isHybrid;
	
	        if (retUnwrapped && !chainAll) {
	          if (onlyLazy) {
	            value = value.clone();
	            value.__actions__.push(action);
	            return func.call(value);
	          }
	          return lodashFunc.call(undefined, this.value())[0];
	        }
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push(action);
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });
	
	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);
	
	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });
	
	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name,
	            names = realNames[key] || (realNames[key] = []);
	
	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });
	
	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];
	
	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;
	
	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.concat = wrapperConcat;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
	
	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;
	
	    return lodash;
	  }
	
	  /*--------------------------------------------------------------------------*/
	
	  // Export lodash.
	  var _ = runInContext();
	
	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;
	
	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Rhino with CommonJS support.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(60)(module), (function() { return this; }())))

/***/ },
/* 514 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * ag-grid - Advanced Framework Agnostic Javascript Datagrid.
	 * @version v3.1.2
	 * @link http://www.ag-grid.com/
	 * @license MIT
	 */
	/// <references path='events.ts'/>
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var ColumnChangeEvent = (function () {
	            function ColumnChangeEvent(type) {
	                this.type = type;
	            }
	            ColumnChangeEvent.prototype.toString = function () {
	                var result = 'ColumnChangeEvent {type: ' + this.type;
	                if (this.column) {
	                    result += ', column: ' + this.column.getColId();
	                }
	                if (this.columnGroup) {
	                    result +=  true ? this.columnGroup.getColGroupDef().headerName : '(not defined]';
	                }
	                if (this.fromIndex) {
	                    result += ', fromIndex: ' + this.fromIndex;
	                }
	                if (this.toIndex) {
	                    result += ', toIndex: ' + this.toIndex;
	                }
	                if (this.visible) {
	                    result += ', visible: ' + this.visible;
	                }
	                if (this.pinned) {
	                    result += ', visible: ' + this.visible;
	                }
	                if (typeof this.finished == 'boolean') {
	                    result += ', finished: ' + this.finished;
	                }
	                result += '}';
	                return result;
	            };
	            ColumnChangeEvent.prototype.withPinned = function (pinned) {
	                this.pinned = pinned;
	                return this;
	            };
	            ColumnChangeEvent.prototype.withVisible = function (visible) {
	                this.visible = visible;
	                return this;
	            };
	            ColumnChangeEvent.prototype.isVisible = function () {
	                return this.visible;
	            };
	            ColumnChangeEvent.prototype.getPinned = function () {
	                return this.pinned;
	            };
	            ColumnChangeEvent.prototype.withColumn = function (column) {
	                this.column = column;
	                return this;
	            };
	            ColumnChangeEvent.prototype.withColumns = function (columns) {
	                this.columns = columns;
	                return this;
	            };
	            ColumnChangeEvent.prototype.withFinished = function (finished) {
	                this.finished = finished;
	                return this;
	            };
	            ColumnChangeEvent.prototype.withColumnGroup = function (columnGroup) {
	                this.columnGroup = columnGroup;
	                return this;
	            };
	            ColumnChangeEvent.prototype.withFromIndex = function (fromIndex) {
	                this.fromIndex = fromIndex;
	                return this;
	            };
	            ColumnChangeEvent.prototype.withToIndex = function (toIndex) {
	                this.toIndex = toIndex;
	                return this;
	            };
	            ColumnChangeEvent.prototype.getFromIndex = function () {
	                return this.fromIndex;
	            };
	            ColumnChangeEvent.prototype.getToIndex = function () {
	                return this.toIndex;
	            };
	            ColumnChangeEvent.prototype.getType = function () {
	                return this.type;
	            };
	            ColumnChangeEvent.prototype.getColumn = function () {
	                return this.column;
	            };
	            ColumnChangeEvent.prototype.getColumns = function () {
	                return this.columns;
	            };
	            ColumnChangeEvent.prototype.getColumnGroup = function () {
	                return this.columnGroup;
	            };
	            ColumnChangeEvent.prototype.isRowGroupChanged = function () {
	                return this.type === grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE || this.type === grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED;
	            };
	            ColumnChangeEvent.prototype.isValueChanged = function () {
	                return this.type === grid.Events.EVENT_COLUMN_VALUE_CHANGE || this.type === grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED;
	            };
	            ColumnChangeEvent.prototype.isIndividualColumnResized = function () {
	                return this.type === grid.Events.EVENT_COLUMN_RESIZED && this.column !== undefined && this.column !== null;
	            };
	            ColumnChangeEvent.prototype.isFinished = function () {
	                return this.finished;
	            };
	            return ColumnChangeEvent;
	        })();
	        grid.ColumnChangeEvent = ColumnChangeEvent;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var Constants = (function () {
	            function Constants() {
	            }
	            Constants.STEP_EVERYTHING = 0;
	            Constants.STEP_FILTER = 1;
	            Constants.STEP_SORT = 2;
	            Constants.STEP_MAP = 3;
	            Constants.ROW_BUFFER_SIZE = 20;
	            Constants.MIN_COL_WIDTH = 10;
	            Constants.KEY_TAB = 9;
	            Constants.KEY_ENTER = 13;
	            Constants.KEY_BACKSPACE = 8;
	            Constants.KEY_DELETE = 46;
	            Constants.KEY_ESCAPE = 27;
	            Constants.KEY_SPACE = 32;
	            Constants.KEY_DOWN = 40;
	            Constants.KEY_UP = 38;
	            Constants.KEY_LEFT = 37;
	            Constants.KEY_RIGHT = 39;
	            return Constants;
	        })();
	        grid.Constants = Constants;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid_1) {
	        var LINE_SEPARATOR = '\r\n';
	        var CsvCreator = (function () {
	            function CsvCreator(rowController, columnController, grid, valueService) {
	                this.rowController = rowController;
	                this.columnController = columnController;
	                this.grid = grid;
	                this.valueService = valueService;
	            }
	            CsvCreator.prototype.exportDataAsCsv = function (params) {
	                var csvString = this.getDataAsCsv(params);
	                var fileNamePresent = params && params.fileName && params.fileName.length !== 0;
	                var fileName = fileNamePresent ? params.fileName : 'export.csv';
	                // for Excel, we need \ufeff at the start
	                // http://stackoverflow.com/questions/17879198/adding-utf-8-bom-to-string-blob
	                var blobObject = new Blob(["\ufeff", csvString], {
	                    type: "text/csv;charset=utf-8;"
	                });
	                // Internet Explorer
	                if (window.navigator.msSaveOrOpenBlob) {
	                    window.navigator.msSaveOrOpenBlob(blobObject, fileName);
	                }
	                else {
	                    // Chrome
	                    var downloadLink = document.createElement("a");
	                    downloadLink.href = window.URL.createObjectURL(blobObject);
	                    downloadLink.download = fileName;
	                    document.body.appendChild(downloadLink);
	                    downloadLink.click();
	                    document.body.removeChild(downloadLink);
	                }
	            };
	            CsvCreator.prototype.getDataAsCsv = function (params) {
	                var _this = this;
	                if (!this.grid.isUsingInMemoryModel()) {
	                    console.log('ag-Grid: getDataAsCsv not available when doing virtual pagination');
	                    return '';
	                }
	                var result = '';
	                var skipGroups = params && params.skipGroups;
	                var skipHeader = params && params.skipHeader;
	                var skipFooters = params && params.skipFooters;
	                var includeCustomHeader = params && params.customHeader;
	                var includeCustomFooter = params && params.customFooter;
	                var allColumns = params && params.allColumns;
	                var columnSeparator = (params && params.columnSeparator) || ',';
	                var columnsToExport;
	                if (allColumns) {
	                    columnsToExport = this.columnController.getAllColumns();
	                }
	                else {
	                    columnsToExport = this.columnController.getAllDisplayedColumns();
	                }
	                if (!columnsToExport || columnsToExport.length === 0) {
	                    return '';
	                }
	                if (includeCustomHeader) {
	                    result += params.customHeader;
	                }
	                // first pass, put in the header names of the cols
	                if (!skipHeader) {
	                    columnsToExport.forEach(function (column, index) {
	                        var nameForCol = _this.columnController.getDisplayNameForCol(column);
	                        if (nameForCol === null || nameForCol === undefined) {
	                            nameForCol = '';
	                        }
	                        if (index != 0) {
	                            result += columnSeparator;
	                        }
	                        result += '"' + _this.escape(nameForCol) + '"';
	                    });
	                    result += LINE_SEPARATOR;
	                }
	                this.rowController.forEachNodeAfterFilterAndSort(function (node) {
	                    if (skipGroups && node.group) {
	                        return;
	                    }
	                    if (skipFooters && node.footer) {
	                        return;
	                    }
	                    columnsToExport.forEach(function (column, index) {
	                        var valueForCell;
	                        if (node.group && index === 0) {
	                            valueForCell = _this.createValueForGroupNode(node);
	                        }
	                        else {
	                            valueForCell = _this.valueService.getValue(column.getColDef(), node.data, node);
	                        }
	                        if (valueForCell === null || valueForCell === undefined) {
	                            valueForCell = '';
	                        }
	                        if (index != 0) {
	                            result += columnSeparator;
	                        }
	                        result += '"' + _this.escape(valueForCell) + '"';
	                    });
	                    result += LINE_SEPARATOR;
	                });
	                if (includeCustomFooter) {
	                    result += params.customFooter;
	                }
	                return result;
	            };
	            CsvCreator.prototype.createValueForGroupNode = function (node) {
	                var keys = [node.key];
	                while (node.parent) {
	                    node = node.parent;
	                    keys.push(node.key);
	                }
	                return keys.reverse().join(' -> ');
	            };
	            // replace each " with "" (ie two sets of double quotes is how to do double quotes in csv)
	            CsvCreator.prototype.escape = function (value) {
	                if (value === null || value === undefined) {
	                    return '';
	                }
	                var stringValue;
	                if (typeof value === 'string') {
	                    stringValue = value;
	                }
	                else if (typeof value.toString === 'function') {
	                    stringValue = value.toString();
	                }
	                else {
	                    console.warn('known value type during csv conversio');
	                    stringValue = '';
	                }
	                return stringValue.replace(/"/g, "\"\"");
	            };
	            return CsvCreator;
	        })();
	        grid_1.CsvCreator = CsvCreator;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var Events = (function () {
	            function Events() {
	            }
	            /** A new set of columns has been entered, everything has potentially changed. */
	            Events.EVENT_COLUMN_EVERYTHING_CHANGED = 'columnEverythingChanged';
	            /** A row group column was added, removed or order changed. */
	            Events.EVENT_COLUMN_ROW_GROUP_CHANGE = 'columnRowGroupChanged';
	            /** A value column was added, removed or agg function was changed. */
	            Events.EVENT_COLUMN_VALUE_CHANGE = 'columnValueChanged';
	            /** A column was moved */
	            Events.EVENT_COLUMN_MOVED = 'columnMoved';
	            /** One or more columns was shown / hidden */
	            Events.EVENT_COLUMN_VISIBLE = 'columnVisible';
	            /** One or more columns was pinned / unpinned*/
	            Events.EVENT_COLUMN_PINNED = 'columnPinned';
	            /** A column group was opened / closed */
	            Events.EVENT_COLUMN_GROUP_OPENED = 'columnGroupOpened';
	            /** One or more columns was resized. If just one, the column in the event is set. */
	            Events.EVENT_COLUMN_RESIZED = 'columnResized';
	            Events.EVENT_MODEL_UPDATED = 'modelUpdated';
	            Events.EVENT_CELL_CLICKED = 'cellClicked';
	            Events.EVENT_CELL_DOUBLE_CLICKED = 'cellDoubleClicked';
	            Events.EVENT_CELL_CONTEXT_MENU = 'cellContextMenu';
	            Events.EVENT_CELL_VALUE_CHANGED = 'cellValueChanged';
	            Events.EVENT_CELL_FOCUSED = 'cellFocused';
	            Events.EVENT_ROW_SELECTED = 'rowSelected';
	            Events.EVENT_ROW_DESELECTED = 'rowDeselected';
	            Events.EVENT_SELECTION_CHANGED = 'selectionChanged';
	            Events.EVENT_BEFORE_FILTER_CHANGED = 'beforeFilterChanged';
	            Events.EVENT_AFTER_FILTER_CHANGED = 'afterFilterChanged';
	            Events.EVENT_FILTER_MODIFIED = 'filterModified';
	            Events.EVENT_BEFORE_SORT_CHANGED = 'beforeSortChanged';
	            Events.EVENT_AFTER_SORT_CHANGED = 'afterSortChanged';
	            Events.EVENT_VIRTUAL_ROW_REMOVED = 'virtualRowRemoved';
	            Events.EVENT_ROW_CLICKED = 'rowClicked';
	            Events.EVENT_ROW_DOUBLE_CLICKED = 'rowDoubleClicked';
	            Events.EVENT_READY = 'ready';
	            Events.EVENT_GRID_SIZE_CHANGED = 'gridSizeChanged';
	            return Events;
	        })();
	        grid.Events = Events;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var FUNCTION_STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	        var FUNCTION_ARGUMENT_NAMES = /([^\s,]+)/g;
	        var Utils = (function () {
	            function Utils() {
	            }
	            Utils.iterateObject = function (object, callback) {
	                var keys = Object.keys(object);
	                for (var i = 0; i < keys.length; i++) {
	                    var key = keys[i];
	                    var value = object[key];
	                    callback(key, value);
	                }
	            };
	            Utils.cloneObject = function (object) {
	                var copy = {};
	                var keys = Object.keys(object);
	                for (var i = 0; i < keys.length; i++) {
	                    var key = keys[i];
	                    var value = object[key];
	                    copy[key] = value;
	                }
	                return copy;
	            };
	            Utils.map = function (array, callback) {
	                var result = [];
	                for (var i = 0; i < array.length; i++) {
	                    var item = array[i];
	                    var mappedItem = callback(item);
	                    result.push(mappedItem);
	                }
	                return result;
	            };
	            Utils.forEach = function (array, callback) {
	                if (!array) {
	                    return;
	                }
	                for (var i = 0; i < array.length; i++) {
	                    var value = array[i];
	                    callback(value, i);
	                }
	            };
	            Utils.filter = function (array, callback) {
	                var result = [];
	                array.forEach(function (item) {
	                    if (callback(item)) {
	                        result.push(item);
	                    }
	                });
	                return result;
	            };
	            Utils.assign = function (object, source) {
	                Utils.iterateObject(source, function (key, value) {
	                    object[key] = value;
	                });
	            };
	            Utils.getFunctionParameters = function (func) {
	                var fnStr = func.toString().replace(FUNCTION_STRIP_COMMENTS, '');
	                var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(FUNCTION_ARGUMENT_NAMES);
	                if (result === null) {
	                    return [];
	                }
	                else {
	                    return result;
	                }
	            };
	            Utils.find = function (collection, predicate, value) {
	                if (collection === null || collection === undefined) {
	                    return null;
	                }
	                for (var i = 0; i < collection.length; i++) {
	                    if (collection[i][predicate] === value) {
	                        return collection[i];
	                    }
	                }
	                return null;
	            };
	            Utils.toStrings = function (array) {
	                return this.map(array, function (item) {
	                    if (item === undefined || item === null || !item.toString) {
	                        return null;
	                    }
	                    else {
	                        return item.toString();
	                    }
	                });
	            };
	            Utils.iterateArray = function (array, callback) {
	                for (var index = 0; index < array.length; index++) {
	                    var value = array[index];
	                    callback(value, index);
	                }
	            };
	            //Returns true if it is a DOM node
	            //taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
	            Utils.isNode = function (o) {
	                return (typeof Node === "object" ? o instanceof Node :
	                    o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string");
	            };
	            //Returns true if it is a DOM element
	            //taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
	            Utils.isElement = function (o) {
	                return (typeof HTMLElement === "object" ? o instanceof HTMLElement :
	                    o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string");
	            };
	            Utils.isNodeOrElement = function (o) {
	                return this.isNode(o) || this.isElement(o);
	            };
	            //adds all type of change listeners to an element, intended to be a text field
	            Utils.addChangeListener = function (element, listener) {
	                element.addEventListener("changed", listener);
	                element.addEventListener("paste", listener);
	                element.addEventListener("input", listener);
	                // IE doesn't fire changed for special keys (eg delete, backspace), so need to
	                // listen for this further ones
	                element.addEventListener("keydown", listener);
	                element.addEventListener("keyup", listener);
	            };
	            //if value is undefined, null or blank, returns null, otherwise returns the value
	            Utils.makeNull = function (value) {
	                if (value === null || value === undefined || value === "") {
	                    return null;
	                }
	                else {
	                    return value;
	                }
	            };
	            Utils.removeAllChildren = function (node) {
	                if (node) {
	                    while (node.hasChildNodes()) {
	                        node.removeChild(node.lastChild);
	                    }
	                }
	            };
	            Utils.removeElement = function (parent, cssSelector) {
	                this.removeFromParent(parent.querySelector(cssSelector));
	            };
	            Utils.removeFromParent = function (node) {
	                if (node && node.parentNode) {
	                    node.parentNode.removeChild(node);
	                }
	            };
	            Utils.isVisible = function (element) {
	                return (element.offsetParent !== null);
	            };
	            /**
	             * loads the template and returns it as an element. makes up for no simple way in
	             * the dom api to load html directly, eg we cannot do this: document.createElement(template)
	             */
	            Utils.loadTemplate = function (template) {
	                var tempDiv = document.createElement("div");
	                tempDiv.innerHTML = template;
	                return tempDiv.firstChild;
	            };
	            Utils.querySelectorAll_addCssClass = function (eParent, selector, cssClass) {
	                var eRows = eParent.querySelectorAll(selector);
	                for (var k = 0; k < eRows.length; k++) {
	                    this.addCssClass(eRows[k], cssClass);
	                }
	            };
	            Utils.querySelectorAll_removeCssClass = function (eParent, selector, cssClass) {
	                var eRows = eParent.querySelectorAll(selector);
	                for (var k = 0; k < eRows.length; k++) {
	                    this.removeCssClass(eRows[k], cssClass);
	                }
	            };
	            Utils.querySelectorAll_replaceCssClass = function (eParent, selector, cssClassToRemove, cssClassToAdd) {
	                var eRows = eParent.querySelectorAll(selector);
	                for (var k = 0; k < eRows.length; k++) {
	                    this.removeCssClass(eRows[k], cssClassToRemove);
	                    this.addCssClass(eRows[k], cssClassToAdd);
	                }
	            };
	            Utils.addOrRemoveCssClass = function (element, className, addOrRemove) {
	                if (addOrRemove) {
	                    this.addCssClass(element, className);
	                }
	                else {
	                    this.removeCssClass(element, className);
	                }
	            };
	            Utils.addCssClass = function (element, className) {
	                if (element.className && element.className.length > 0) {
	                    var cssClasses = element.className.split(' ');
	                    if (cssClasses.indexOf(className) < 0) {
	                        cssClasses.push(className);
	                        element.className = cssClasses.join(' ');
	                    }
	                }
	                else {
	                    element.className = className;
	                }
	            };
	            Utils.offsetHeight = function (element) {
	                return element && element.clientHeight ? element.clientHeight : 0;
	            };
	            Utils.offsetWidth = function (element) {
	                return element && element.clientWidth ? element.clientWidth : 0;
	            };
	            Utils.removeCssClass = function (element, className) {
	                if (element.className && element.className.length > 0) {
	                    var cssClasses = element.className.split(' ');
	                    var index = cssClasses.indexOf(className);
	                    if (index >= 0) {
	                        cssClasses.splice(index, 1);
	                        element.className = cssClasses.join(' ');
	                    }
	                }
	            };
	            Utils.removeFromArray = function (array, object) {
	                if (array.indexOf(object) >= 0) {
	                    array.splice(array.indexOf(object), 1);
	                }
	            };
	            Utils.defaultComparator = function (valueA, valueB) {
	                var valueAMissing = valueA === null || valueA === undefined;
	                var valueBMissing = valueB === null || valueB === undefined;
	                if (valueAMissing && valueBMissing) {
	                    return 0;
	                }
	                if (valueAMissing) {
	                    return -1;
	                }
	                if (valueBMissing) {
	                    return 1;
	                }
	                if (valueA < valueB) {
	                    return -1;
	                }
	                else if (valueA > valueB) {
	                    return 1;
	                }
	                else {
	                    return 0;
	                }
	            };
	            Utils.formatWidth = function (width) {
	                if (typeof width === "number") {
	                    return width + "px";
	                }
	                else {
	                    return width;
	                }
	            };
	            /**
	             * Tries to use the provided renderer.
	             */
	            Utils.useRenderer = function (eParent, eRenderer, params) {
	                var resultFromRenderer = eRenderer(params);
	                //TypeScript type inference magic
	                if (typeof resultFromRenderer === 'string') {
	                    var eTextSpan = document.createElement('span');
	                    eTextSpan.innerHTML = resultFromRenderer;
	                    eParent.appendChild(eTextSpan);
	                }
	                else if (this.isNodeOrElement(resultFromRenderer)) {
	                    //a dom node or element was returned, so add child
	                    eParent.appendChild(resultFromRenderer);
	                }
	            };
	            /**
	             * If icon provided, use this (either a string, or a function callback).
	             * if not, then use the second parameter, which is the svgFactory function
	             */
	            Utils.createIcon = function (iconName, gridOptionsWrapper, column, svgFactoryFunc) {
	                var eResult = document.createElement('span');
	                eResult.appendChild(this.createIconNoSpan(iconName, gridOptionsWrapper, column, svgFactoryFunc));
	                return eResult;
	            };
	            Utils.createIconNoSpan = function (iconName, gridOptionsWrapper, colDefWrapper, svgFactoryFunc) {
	                var userProvidedIcon;
	                // check col for icon first
	                if (colDefWrapper && colDefWrapper.getColDef().icons) {
	                    userProvidedIcon = colDefWrapper.getColDef().icons[iconName];
	                }
	                // it not in col, try grid options
	                if (!userProvidedIcon && gridOptionsWrapper.getIcons()) {
	                    userProvidedIcon = gridOptionsWrapper.getIcons()[iconName];
	                }
	                // now if user provided, use it
	                if (userProvidedIcon) {
	                    var rendererResult;
	                    if (typeof userProvidedIcon === 'function') {
	                        rendererResult = userProvidedIcon();
	                    }
	                    else if (typeof userProvidedIcon === 'string') {
	                        rendererResult = userProvidedIcon;
	                    }
	                    else {
	                        throw 'icon from grid options needs to be a string or a function';
	                    }
	                    if (typeof rendererResult === 'string') {
	                        return this.loadTemplate(rendererResult);
	                    }
	                    else if (this.isNodeOrElement(rendererResult)) {
	                        return rendererResult;
	                    }
	                    else {
	                        throw 'iconRenderer should return back a string or a dom object';
	                    }
	                }
	                else {
	                    // otherwise we use the built in icon
	                    return svgFactoryFunc();
	                }
	            };
	            Utils.addStylesToElement = function (eElement, styles) {
	                Object.keys(styles).forEach(function (key) {
	                    eElement.style[key] = styles[key];
	                });
	            };
	            Utils.getScrollbarWidth = function () {
	                var outer = document.createElement("div");
	                outer.style.visibility = "hidden";
	                outer.style.width = "100px";
	                outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps
	                document.body.appendChild(outer);
	                var widthNoScroll = outer.offsetWidth;
	                // force scrollbars
	                outer.style.overflow = "scroll";
	                // add innerdiv
	                var inner = document.createElement("div");
	                inner.style.width = "100%";
	                outer.appendChild(inner);
	                var widthWithScroll = inner.offsetWidth;
	                // remove divs
	                outer.parentNode.removeChild(outer);
	                return widthNoScroll - widthWithScroll;
	            };
	            Utils.isKeyPressed = function (event, keyToCheck) {
	                var pressedKey = event.which || event.keyCode;
	                return pressedKey === keyToCheck;
	            };
	            Utils.setVisible = function (element, visible) {
	                if (visible) {
	                    element.style.display = 'inline';
	                }
	                else {
	                    element.style.display = 'none';
	                }
	            };
	            Utils.isBrowserIE = function () {
	                if (this.isIE === undefined) {
	                    this.isIE = false || !!document.documentMode; // At least IE6
	                }
	                return this.isIE;
	            };
	            Utils.isBrowserSafari = function () {
	                if (this.isSafari === undefined) {
	                    this.isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') > 0;
	                }
	                return this.isSafari;
	            };
	            return Utils;
	        })();
	        grid.Utils = Utils;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="utils.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var EventService = (function () {
	            function EventService() {
	                this.allListeners = {};
	                this.globalListeners = [];
	            }
	            EventService.prototype.init = function (loggerFactory) {
	                this.logger = loggerFactory.create('EventService');
	            };
	            EventService.prototype.getListenerList = function (eventType) {
	                var listenerList = this.allListeners[eventType];
	                if (!listenerList) {
	                    listenerList = [];
	                    this.allListeners[eventType] = listenerList;
	                }
	                return listenerList;
	            };
	            EventService.prototype.addEventListener = function (eventType, listener) {
	                var listenerList = this.getListenerList(eventType);
	                if (listenerList.indexOf(listener) < 0) {
	                    listenerList.push(listener);
	                }
	            };
	            EventService.prototype.addGlobalListener = function (listener) {
	                this.globalListeners.push(listener);
	            };
	            EventService.prototype.removeEventListener = function (eventType, listener) {
	                var listenerList = this.getListenerList(eventType);
	                _.removeFromArray(listenerList, listener);
	            };
	            EventService.prototype.removeGlobalListener = function (listener) {
	                _.removeFromArray(this.globalListeners, listener);
	            };
	            // why do we pass the type here? the type is in ColumnChangeEvent, so unless the
	            // type is not in other types of events???
	            EventService.prototype.dispatchEvent = function (eventType, event) {
	                if (!event) {
	                    event = {};
	                }
	                //this.logger.log('dispatching: ' + event);
	                var listenerList = this.getListenerList(eventType);
	                listenerList.forEach(function (listener) {
	                    listener(event);
	                });
	                this.globalListeners.forEach(function (listener) {
	                    listener(eventType, event);
	                });
	            };
	            return EventService;
	        })();
	        grid.EventService = EventService;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var ExpressionService = (function () {
	            function ExpressionService() {
	                this.expressionToFunctionCache = {};
	            }
	            ExpressionService.prototype.init = function (loggerFactory) {
	                this.logger = loggerFactory.create('ExpressionService');
	            };
	            ExpressionService.prototype.evaluate = function (expression, params) {
	                try {
	                    var javaScriptFunction = this.createExpressionFunction(expression);
	                    var result = javaScriptFunction(params.value, params.context, params.node, params.data, params.colDef, params.rowIndex, params.api, params.getValue);
	                    return result;
	                }
	                catch (e) {
	                    // the expression failed, which can happen, as it's the client that
	                    // provides the expression. so print a nice message
	                    this.logger.log('Processing of the expression failed');
	                    this.logger.log('Expression = ' + expression);
	                    this.logger.log('Exception = ' + e);
	                    return null;
	                }
	            };
	            ExpressionService.prototype.createExpressionFunction = function (expression) {
	                // check cache first
	                if (this.expressionToFunctionCache[expression]) {
	                    return this.expressionToFunctionCache[expression];
	                }
	                // if not found in cache, return the function
	                var functionBody = this.createFunctionBody(expression);
	                var theFunction = new Function('x, ctx, node, data, colDef, rowIndex, api, getValue', functionBody);
	                // store in cache
	                this.expressionToFunctionCache[expression] = theFunction;
	                return theFunction;
	            };
	            ExpressionService.prototype.createFunctionBody = function (expression) {
	                // if the expression has the 'return' word in it, then use as is,
	                // if not, then wrap it with return and ';' to make a function
	                if (expression.indexOf('return') >= 0) {
	                    return expression;
	                }
	                else {
	                    return 'return ' + expression + ';';
	                }
	            };
	            return ExpressionService;
	        })();
	        grid.ExpressionService = ExpressionService;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../entities/rowNode.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var FloatingRowModel = (function () {
	            function FloatingRowModel() {
	            }
	            FloatingRowModel.prototype.init = function (gridOptionsWrapper) {
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.setFloatingTopRowData(gridOptionsWrapper.getFloatingTopRowData());
	                this.setFloatingBottomRowData(gridOptionsWrapper.getFloatingBottomRowData());
	            };
	            FloatingRowModel.prototype.setFloatingTopRowData = function (rowData) {
	                this.floatingTopRows = this.createNodesFromData(rowData, false);
	            };
	            FloatingRowModel.prototype.setFloatingBottomRowData = function (rowData) {
	                this.floatingBottomRows = this.createNodesFromData(rowData, false);
	            };
	            FloatingRowModel.prototype.createNodesFromData = function (allData, isTop) {
	                var _this = this;
	                var rowNodes = [];
	                if (allData) {
	                    var nextRowTop = 0;
	                    allData.forEach(function (dataItem) {
	                        var rowNode = {
	                            data: dataItem,
	                            floating: true,
	                            floatingTop: isTop,
	                            floatingBottom: !isTop,
	                            rowTop: nextRowTop,
	                            rowHeight: null
	                        };
	                        rowNode.rowHeight = _this.gridOptionsWrapper.getRowHeightForNode(rowNode);
	                        nextRowTop += rowNode.rowHeight;
	                        rowNodes.push(rowNode);
	                    });
	                }
	                return rowNodes;
	            };
	            FloatingRowModel.prototype.getFloatingTopRowData = function () {
	                return this.floatingTopRows;
	            };
	            FloatingRowModel.prototype.getFloatingBottomRowData = function () {
	                return this.floatingBottomRows;
	            };
	            FloatingRowModel.prototype.getFloatingTopTotalHeight = function () {
	                return this.getTotalHeight(this.floatingTopRows);
	            };
	            FloatingRowModel.prototype.getFloatingBottomTotalHeight = function () {
	                return this.getTotalHeight(this.floatingBottomRows);
	            };
	            FloatingRowModel.prototype.getTotalHeight = function (rowNodes) {
	                if (!rowNodes || rowNodes.length === 0) {
	                    return 0;
	                }
	                else {
	                    var lastNode = rowNodes[rowNodes.length - 1];
	                    return lastNode.rowTop + lastNode.rowHeight;
	                }
	            };
	            return FloatingRowModel;
	        })();
	        grid.FloatingRowModel = FloatingRowModel;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="constants.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var DEFAULT_ROW_HEIGHT = 25;
	        var constants = grid.Constants;
	        function isTrue(value) {
	            return value === true || value === 'true';
	        }
	        var GridOptionsWrapper = (function () {
	            function GridOptionsWrapper() {
	            }
	            GridOptionsWrapper.prototype.init = function (gridOptions, eventService) {
	                this.gridOptions = gridOptions;
	                this.headerHeight = gridOptions.headerHeight;
	                eventService.addGlobalListener(this.globalEventHandler.bind(this));
	                this.checkForDeprecated();
	            };
	            GridOptionsWrapper.prototype.isRowSelection = function () { return this.gridOptions.rowSelection === "single" || this.gridOptions.rowSelection === "multiple"; };
	            GridOptionsWrapper.prototype.isRowDeselection = function () { return isTrue(this.gridOptions.rowDeselection); };
	            GridOptionsWrapper.prototype.isRowSelectionMulti = function () { return this.gridOptions.rowSelection === 'multiple'; };
	            GridOptionsWrapper.prototype.getContext = function () { return this.gridOptions.context; };
	            GridOptionsWrapper.prototype.isVirtualPaging = function () { return isTrue(this.gridOptions.virtualPaging); };
	            GridOptionsWrapper.prototype.isShowToolPanel = function () { return isTrue(this.gridOptions.showToolPanel); };
	            GridOptionsWrapper.prototype.isToolPanelSuppressGroups = function () { return isTrue(this.gridOptions.toolPanelSuppressGroups); };
	            GridOptionsWrapper.prototype.isToolPanelSuppressValues = function () { return isTrue(this.gridOptions.toolPanelSuppressValues); };
	            GridOptionsWrapper.prototype.isRowsAlreadyGrouped = function () { return isTrue(this.gridOptions.rowsAlreadyGrouped); };
	            GridOptionsWrapper.prototype.isGroupSelectsChildren = function () { return isTrue(this.gridOptions.groupSelectsChildren); };
	            GridOptionsWrapper.prototype.isGroupHideGroupColumns = function () { return isTrue(this.gridOptions.groupHideGroupColumns); };
	            GridOptionsWrapper.prototype.isGroupIncludeFooter = function () { return isTrue(this.gridOptions.groupIncludeFooter); };
	            GridOptionsWrapper.prototype.isGroupSuppressBlankHeader = function () { return isTrue(this.gridOptions.groupSuppressBlankHeader); };
	            GridOptionsWrapper.prototype.isSuppressRowClickSelection = function () { return isTrue(this.gridOptions.suppressRowClickSelection); };
	            GridOptionsWrapper.prototype.isSuppressCellSelection = function () { return isTrue(this.gridOptions.suppressCellSelection); };
	            GridOptionsWrapper.prototype.isSuppressMultiSort = function () { return isTrue(this.gridOptions.suppressMultiSort); };
	            GridOptionsWrapper.prototype.isGroupSuppressAutoColumn = function () { return isTrue(this.gridOptions.groupSuppressAutoColumn); };
	            GridOptionsWrapper.prototype.isForPrint = function () { return isTrue(this.gridOptions.forPrint); };
	            GridOptionsWrapper.prototype.isSuppressHorizontalScroll = function () { return isTrue(this.gridOptions.suppressHorizontalScroll); };
	            GridOptionsWrapper.prototype.isSuppressLoadingOverlay = function () { return isTrue(this.gridOptions.suppressLoadingOverlay); };
	            GridOptionsWrapper.prototype.isSuppressNoRowsOverlay = function () { return isTrue(this.gridOptions.suppressNoRowsOverlay); };
	            GridOptionsWrapper.prototype.getFloatingTopRowData = function () { return this.gridOptions.floatingTopRowData; };
	            GridOptionsWrapper.prototype.getFloatingBottomRowData = function () { return this.gridOptions.floatingBottomRowData; };
	            GridOptionsWrapper.prototype.isUnSortIcon = function () { return isTrue(this.gridOptions.unSortIcon); };
	            GridOptionsWrapper.prototype.isSuppressMenuHide = function () { return isTrue(this.gridOptions.suppressMenuHide); };
	            GridOptionsWrapper.prototype.getRowStyle = function () { return this.gridOptions.rowStyle; };
	            GridOptionsWrapper.prototype.getRowClass = function () { return this.gridOptions.rowClass; };
	            GridOptionsWrapper.prototype.getRowStyleFunc = function () { return this.gridOptions.getRowStyle; };
	            GridOptionsWrapper.prototype.getRowClassFunc = function () { return this.gridOptions.getRowClass; };
	            GridOptionsWrapper.prototype.getBusinessKeyForNodeFunc = function () { return this.gridOptions.getBusinessKeyForNode; };
	            GridOptionsWrapper.prototype.getHeaderCellRenderer = function () { return this.gridOptions.headerCellRenderer; };
	            GridOptionsWrapper.prototype.getApi = function () { return this.gridOptions.api; };
	            GridOptionsWrapper.prototype.isEnableColResize = function () { return isTrue(this.gridOptions.enableColResize); };
	            GridOptionsWrapper.prototype.isSingleClickEdit = function () { return isTrue(this.gridOptions.singleClickEdit); };
	            GridOptionsWrapper.prototype.getGroupDefaultExpanded = function () { return this.gridOptions.groupDefaultExpanded; };
	            GridOptionsWrapper.prototype.getGroupAggFunction = function () { return this.gridOptions.groupAggFunction; };
	            GridOptionsWrapper.prototype.getRowData = function () { return this.gridOptions.rowData; };
	            GridOptionsWrapper.prototype.isGroupUseEntireRow = function () { return isTrue(this.gridOptions.groupUseEntireRow); };
	            GridOptionsWrapper.prototype.getGroupColumnDef = function () { return this.gridOptions.groupColumnDef; };
	            GridOptionsWrapper.prototype.isGroupSuppressRow = function () { return isTrue(this.gridOptions.groupSuppressRow); };
	            GridOptionsWrapper.prototype.isAngularCompileRows = function () { return isTrue(this.gridOptions.angularCompileRows); };
	            GridOptionsWrapper.prototype.isAngularCompileFilters = function () { return isTrue(this.gridOptions.angularCompileFilters); };
	            GridOptionsWrapper.prototype.isAngularCompileHeaders = function () { return isTrue(this.gridOptions.angularCompileHeaders); };
	            GridOptionsWrapper.prototype.isDebug = function () { return isTrue(this.gridOptions.debug); };
	            GridOptionsWrapper.prototype.getColumnDefs = function () { return this.gridOptions.columnDefs; };
	            GridOptionsWrapper.prototype.getDatasource = function () { return this.gridOptions.datasource; };
	            GridOptionsWrapper.prototype.isEnableSorting = function () { return isTrue(this.gridOptions.enableSorting) || isTrue(this.gridOptions.enableServerSideSorting); };
	            GridOptionsWrapper.prototype.isEnableCellExpressions = function () { return isTrue(this.gridOptions.enableCellExpressions); };
	            GridOptionsWrapper.prototype.isEnableServerSideSorting = function () { return isTrue(this.gridOptions.enableServerSideSorting); };
	            GridOptionsWrapper.prototype.isEnableFilter = function () { return isTrue(this.gridOptions.enableFilter) || isTrue(this.gridOptions.enableServerSideFilter); };
	            GridOptionsWrapper.prototype.isEnableServerSideFilter = function () { return this.gridOptions.enableServerSideFilter; };
	            GridOptionsWrapper.prototype.isSuppressScrollLag = function () { return isTrue(this.gridOptions.suppressScrollLag); };
	            GridOptionsWrapper.prototype.getIcons = function () { return this.gridOptions.icons; };
	            GridOptionsWrapper.prototype.getIsScrollLag = function () { return this.gridOptions.isScrollLag; };
	            GridOptionsWrapper.prototype.getSortingOrder = function () { return this.gridOptions.sortingOrder; };
	            GridOptionsWrapper.prototype.getSlaveGrids = function () { return this.gridOptions.slaveGrids; };
	            GridOptionsWrapper.prototype.getGroupRowRenderer = function () { return this.gridOptions.groupRowRenderer; };
	            GridOptionsWrapper.prototype.getOverlayLoadingTemplate = function () { return this.gridOptions.overlayLoadingTemplate; };
	            GridOptionsWrapper.prototype.getOverlayNoRowsTemplate = function () { return this.gridOptions.overlayNoRowsTemplate; };
	            GridOptionsWrapper.prototype.getCheckboxSelection = function () { return this.gridOptions.checkboxSelection; };
	            GridOptionsWrapper.prototype.isSuppressAutoSize = function () { return isTrue(this.gridOptions.suppressAutoSize); };
	            GridOptionsWrapper.prototype.isSuppressParentsInRowNodes = function () { return isTrue(this.gridOptions.suppressParentsInRowNodes); };
	            GridOptionsWrapper.prototype.getHeaderCellTemplate = function () { return this.gridOptions.headerCellTemplate; };
	            GridOptionsWrapper.prototype.getHeaderCellTemplateFunc = function () { return this.gridOptions.getHeaderCellTemplate; };
	            // properties
	            GridOptionsWrapper.prototype.getHeaderHeight = function () {
	                if (typeof this.headerHeight === 'number') {
	                    return this.headerHeight;
	                }
	                else {
	                    return 25;
	                }
	            };
	            GridOptionsWrapper.prototype.setHeaderHeight = function (headerHeight) { this.headerHeight = headerHeight; };
	            GridOptionsWrapper.prototype.isExternalFilterPresent = function () {
	                if (typeof this.gridOptions.isExternalFilterPresent === 'function') {
	                    return this.gridOptions.isExternalFilterPresent();
	                }
	                else {
	                    return false;
	                }
	            };
	            GridOptionsWrapper.prototype.doesExternalFilterPass = function (node) {
	                if (typeof this.gridOptions.doesExternalFilterPass === 'function') {
	                    return this.gridOptions.doesExternalFilterPass(node);
	                }
	                else {
	                    return false;
	                }
	            };
	            GridOptionsWrapper.prototype.getGroupRowInnerRenderer = function () {
	                return this.gridOptions.groupRowInnerRenderer;
	            };
	            GridOptionsWrapper.prototype.getColWidth = function () {
	                if (typeof this.gridOptions.colWidth !== 'number' || this.gridOptions.colWidth < constants.MIN_COL_WIDTH) {
	                    return 200;
	                }
	                else {
	                    return this.gridOptions.colWidth;
	                }
	            };
	            GridOptionsWrapper.prototype.getRowBuffer = function () {
	                if (typeof this.gridOptions.rowBuffer === 'number') {
	                    if (this.gridOptions.rowBuffer < 0) {
	                        console.warn('ag-Grid: rowBuffer should not be negative');
	                    }
	                    return this.gridOptions.rowBuffer;
	                }
	                else {
	                    return constants.ROW_BUFFER_SIZE;
	                }
	            };
	            GridOptionsWrapper.prototype.checkForDeprecated = function () {
	                // casting to generic object, so typescript compiles even though
	                // we are looking for attributes that don't exist
	                var options = this.gridOptions;
	                if (options.suppressUnSort) {
	                    console.warn('ag-grid: as of v1.12.4 suppressUnSort is not used. Please use sortOrder instead.');
	                }
	                if (options.suppressDescSort) {
	                    console.warn('ag-grid: as of v1.12.4 suppressDescSort is not used. Please use sortOrder instead.');
	                }
	                if (options.groupAggFields) {
	                    console.warn('ag-grid: as of v3 groupAggFields is not used. Please add appropriate agg fields to your columns.');
	                }
	                if (options.groupHidePivotColumns) {
	                    console.warn('ag-grid: as of v3 groupHidePivotColumns is not used as pivot columns are now called rowGroup columns. Please refer to the documentation');
	                }
	                if (options.groupKeys) {
	                    console.warn('ag-grid: as of v3 groupKeys is not used. You need to set rowGroupIndex on the columns to group. Please refer to the documentation');
	                }
	            };
	            GridOptionsWrapper.prototype.getLocaleTextFunc = function () {
	                if (this.gridOptions.localeTextFunc) {
	                    return this.gridOptions.localeTextFunc;
	                }
	                var that = this;
	                return function (key, defaultValue) {
	                    var localeText = that.gridOptions.localeText;
	                    if (localeText && localeText[key]) {
	                        return localeText[key];
	                    }
	                    else {
	                        return defaultValue;
	                    }
	                };
	            };
	            // responsible for calling the onXXX functions on gridOptions
	            GridOptionsWrapper.prototype.globalEventHandler = function (eventName, event) {
	                var callbackMethodName = this.getCallbackForEvent(eventName);
	                if (typeof this.gridOptions[callbackMethodName] === 'function') {
	                    this.gridOptions[callbackMethodName](event);
	                }
	            };
	            GridOptionsWrapper.prototype.getCallbackForEvent = function (eventName) {
	                if (!eventName || eventName.length < 2) {
	                    return eventName;
	                }
	                else {
	                    return 'on' + eventName[0].toUpperCase() + eventName.substr(1);
	                }
	            };
	            // we don't allow dynamic row height for virtual paging
	            GridOptionsWrapper.prototype.getRowHeightForVirtualPagiation = function () {
	                if (typeof this.gridOptions.rowHeight === 'number') {
	                    return this.gridOptions.rowHeight;
	                }
	                else {
	                    return DEFAULT_ROW_HEIGHT;
	                }
	            };
	            GridOptionsWrapper.prototype.getRowHeightForNode = function (rowNode) {
	                if (typeof this.gridOptions.rowHeight === 'number') {
	                    return this.gridOptions.rowHeight;
	                }
	                else if (typeof this.gridOptions.getRowHeight === 'function') {
	                    var params = {
	                        node: rowNode,
	                        data: rowNode.data,
	                        api: this.gridOptions.api,
	                        context: this.gridOptions.context
	                    };
	                    return this.gridOptions.getRowHeight(params);
	                }
	                else {
	                    return DEFAULT_ROW_HEIGHT;
	                }
	            };
	            return GridOptionsWrapper;
	        })();
	        grid.GridOptionsWrapper = GridOptionsWrapper;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/// <reference path="textAndNumberFilterParameters.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var utils = grid.Utils;
	        var template = '<div>' +
	            '<div>' +
	            '<select class="ag-filter-select" id="filterType">' +
	            '<option value="1">[CONTAINS]</option>' +
	            '<option value="2">[EQUALS]</option>' +
	            '<option value="3">[STARTS WITH]</option>' +
	            '<option value="4">[ENDS WITH]</option>' +
	            '</select>' +
	            '</div>' +
	            '<div>' +
	            '<input class="ag-filter-filter" id="filterText" type="text" placeholder="[FILTER...]"/>' +
	            '</div>' +
	            '<div class="ag-filter-apply-panel" id="applyPanel">' +
	            '<button type="button" id="applyButton">[APPLY FILTER]</button>' +
	            '</div>' +
	            '</div>';
	        var CONTAINS = 1;
	        var EQUALS = 2;
	        var STARTS_WITH = 3;
	        var ENDS_WITH = 4;
	        var TextFilter = (function () {
	            function TextFilter() {
	            }
	            TextFilter.prototype.init = function (params) {
	                this.filterParams = params.filterParams;
	                this.applyActive = this.filterParams && this.filterParams.apply == true;
	                this.filterChangedCallback = params.filterChangedCallback;
	                this.filterModifiedCallback = params.filterModifiedCallback;
	                this.localeTextFunc = params.localeTextFunc;
	                this.valueGetter = params.valueGetter;
	                this.createGui();
	                this.filterText = null;
	                this.filterType = CONTAINS;
	                this.createApi();
	            };
	            TextFilter.prototype.onNewRowsLoaded = function () {
	                var keepSelection = this.filterParams && this.filterParams.newRowsAction === 'keep';
	                if (!keepSelection) {
	                    this.api.setType(CONTAINS);
	                    this.api.setFilter(null);
	                }
	            };
	            TextFilter.prototype.afterGuiAttached = function () {
	                this.eFilterTextField.focus();
	            };
	            TextFilter.prototype.doesFilterPass = function (node) {
	                if (!this.filterText) {
	                    return true;
	                }
	                var value = this.valueGetter(node);
	                if (!value) {
	                    return false;
	                }
	                var valueLowerCase = value.toString().toLowerCase();
	                switch (this.filterType) {
	                    case CONTAINS:
	                        return valueLowerCase.indexOf(this.filterText) >= 0;
	                    case EQUALS:
	                        return valueLowerCase === this.filterText;
	                    case STARTS_WITH:
	                        return valueLowerCase.indexOf(this.filterText) === 0;
	                    case ENDS_WITH:
	                        var index = valueLowerCase.indexOf(this.filterText);
	                        return index >= 0 && index === (valueLowerCase.length - this.filterText.length);
	                    default:
	                        // should never happen
	                        console.warn('invalid filter type ' + this.filterType);
	                        return false;
	                }
	            };
	            TextFilter.prototype.getGui = function () {
	                return this.eGui;
	            };
	            TextFilter.prototype.isFilterActive = function () {
	                return this.filterText !== null;
	            };
	            TextFilter.prototype.createTemplate = function () {
	                return template
	                    .replace('[FILTER...]', this.localeTextFunc('filterOoo', 'Filter...'))
	                    .replace('[EQUALS]', this.localeTextFunc('equals', 'Equals'))
	                    .replace('[CONTAINS]', this.localeTextFunc('contains', 'Contains'))
	                    .replace('[STARTS WITH]', this.localeTextFunc('startsWith', 'Starts with'))
	                    .replace('[ENDS WITH]', this.localeTextFunc('endsWith', 'Ends with'))
	                    .replace('[APPLY FILTER]', this.localeTextFunc('applyFilter', 'Apply Filter'));
	            };
	            TextFilter.prototype.createGui = function () {
	                this.eGui = utils.loadTemplate(this.createTemplate());
	                this.eFilterTextField = this.eGui.querySelector("#filterText");
	                this.eTypeSelect = this.eGui.querySelector("#filterType");
	                utils.addChangeListener(this.eFilterTextField, this.onFilterChanged.bind(this));
	                this.eTypeSelect.addEventListener("change", this.onTypeChanged.bind(this));
	                this.setupApply();
	            };
	            TextFilter.prototype.setupApply = function () {
	                var _this = this;
	                if (this.applyActive) {
	                    this.eApplyButton = this.eGui.querySelector('#applyButton');
	                    this.eApplyButton.addEventListener('click', function () {
	                        _this.filterChangedCallback();
	                    });
	                }
	                else {
	                    utils.removeElement(this.eGui, '#applyPanel');
	                }
	            };
	            TextFilter.prototype.onTypeChanged = function () {
	                this.filterType = parseInt(this.eTypeSelect.value);
	                this.filterChanged();
	            };
	            TextFilter.prototype.onFilterChanged = function () {
	                var filterText = utils.makeNull(this.eFilterTextField.value);
	                if (filterText && filterText.trim() === '') {
	                    filterText = null;
	                }
	                var newFilterText;
	                if (filterText !== null && filterText !== undefined) {
	                    newFilterText = filterText.toLowerCase();
	                }
	                else {
	                    newFilterText = null;
	                }
	                if (this.filterText !== newFilterText) {
	                    this.filterText = newFilterText;
	                    this.filterChanged();
	                }
	            };
	            TextFilter.prototype.filterChanged = function () {
	                this.filterModifiedCallback();
	                if (!this.applyActive) {
	                    this.filterChangedCallback();
	                }
	            };
	            TextFilter.prototype.createApi = function () {
	                var that = this;
	                this.api = {
	                    EQUALS: EQUALS,
	                    CONTAINS: CONTAINS,
	                    STARTS_WITH: STARTS_WITH,
	                    ENDS_WITH: ENDS_WITH,
	                    setType: function (type) {
	                        that.filterType = type;
	                        that.eTypeSelect.value = type;
	                    },
	                    setFilter: function (filter) {
	                        filter = utils.makeNull(filter);
	                        if (filter) {
	                            that.filterText = filter.toLowerCase();
	                            that.eFilterTextField.value = filter;
	                        }
	                        else {
	                            that.filterText = null;
	                            that.eFilterTextField.value = null;
	                        }
	                    },
	                    getType: function () {
	                        return that.filterType;
	                    },
	                    getFilter: function () {
	                        return that.filterText;
	                    },
	                    getModel: function () {
	                        if (that.isFilterActive()) {
	                            return {
	                                type: that.filterType,
	                                filter: that.filterText
	                            };
	                        }
	                        else {
	                            return null;
	                        }
	                    },
	                    setModel: function (dataModel) {
	                        if (dataModel) {
	                            this.setType(dataModel.type);
	                            this.setFilter(dataModel.filter);
	                        }
	                        else {
	                            this.setFilter(null);
	                        }
	                    }
	                };
	            };
	            TextFilter.prototype.getApi = function () {
	                return this.api;
	            };
	            return TextFilter;
	        })();
	        grid.TextFilter = TextFilter;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/// <reference path="textAndNumberFilterParameters.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var utils = grid.Utils;
	        var template = '<div>' +
	            '<div>' +
	            '<select class="ag-filter-select" id="filterType">' +
	            '<option value="1">[EQUALS]</option>' +
	            '<option value="2">[LESS THAN]</option>' +
	            '<option value="3">[GREATER THAN]</option>' +
	            '</select>' +
	            '</div>' +
	            '<div>' +
	            '<input class="ag-filter-filter" id="filterText" type="text" placeholder="[FILTER...]"/>' +
	            '</div>' +
	            '<div class="ag-filter-apply-panel" id="applyPanel">' +
	            '<button type="button" id="applyButton">[APPLY FILTER]</button>' +
	            '</div>' +
	            '</div>';
	        var EQUALS = 1;
	        var LESS_THAN = 2;
	        var GREATER_THAN = 3;
	        var NumberFilter = (function () {
	            function NumberFilter() {
	            }
	            NumberFilter.prototype.init = function (params) {
	                this.filterParams = params.filterParams;
	                this.applyActive = this.filterParams && this.filterParams.apply == true;
	                this.filterChangedCallback = params.filterChangedCallback;
	                this.filterModifiedCallback = params.filterModifiedCallback;
	                this.localeTextFunc = params.localeTextFunc;
	                this.valueGetter = params.valueGetter;
	                this.createGui();
	                this.filterNumber = null;
	                this.filterType = EQUALS;
	                this.createApi();
	            };
	            NumberFilter.prototype.onNewRowsLoaded = function () {
	                var keepSelection = this.filterParams && this.filterParams.newRowsAction === 'keep';
	                if (!keepSelection) {
	                    this.api.setType(EQUALS);
	                    this.api.setFilter(null);
	                }
	            };
	            NumberFilter.prototype.afterGuiAttached = function () {
	                this.eFilterTextField.focus();
	            };
	            NumberFilter.prototype.doesFilterPass = function (node) {
	                if (this.filterNumber === null) {
	                    return true;
	                }
	                var value = this.valueGetter(node);
	                if (!value && value !== 0) {
	                    return false;
	                }
	                var valueAsNumber;
	                if (typeof value === 'number') {
	                    valueAsNumber = value;
	                }
	                else {
	                    valueAsNumber = parseFloat(value);
	                }
	                switch (this.filterType) {
	                    case EQUALS:
	                        return valueAsNumber === this.filterNumber;
	                    case LESS_THAN:
	                        return valueAsNumber < this.filterNumber;
	                    case GREATER_THAN:
	                        return valueAsNumber > this.filterNumber;
	                    default:
	                        // should never happen
	                        console.warn('invalid filter type ' + this.filterType);
	                        return false;
	                }
	            };
	            NumberFilter.prototype.getGui = function () {
	                return this.eGui;
	            };
	            NumberFilter.prototype.isFilterActive = function () {
	                return this.filterNumber !== null;
	            };
	            NumberFilter.prototype.createTemplate = function () {
	                return template
	                    .replace('[FILTER...]', this.localeTextFunc('filterOoo', 'Filter...'))
	                    .replace('[EQUALS]', this.localeTextFunc('equals', 'Equals'))
	                    .replace('[LESS THAN]', this.localeTextFunc('lessThan', 'Less than'))
	                    .replace('[GREATER THAN]', this.localeTextFunc('greaterThan', 'Greater than'))
	                    .replace('[APPLY FILTER]', this.localeTextFunc('applyFilter', 'Apply Filter'));
	            };
	            NumberFilter.prototype.createGui = function () {
	                this.eGui = utils.loadTemplate(this.createTemplate());
	                this.eFilterTextField = this.eGui.querySelector("#filterText");
	                this.eTypeSelect = this.eGui.querySelector("#filterType");
	                utils.addChangeListener(this.eFilterTextField, this.onFilterChanged.bind(this));
	                this.eTypeSelect.addEventListener("change", this.onTypeChanged.bind(this));
	                this.setupApply();
	            };
	            NumberFilter.prototype.setupApply = function () {
	                var _this = this;
	                if (this.applyActive) {
	                    this.eApplyButton = this.eGui.querySelector('#applyButton');
	                    this.eApplyButton.addEventListener('click', function () {
	                        _this.filterChangedCallback();
	                    });
	                }
	                else {
	                    utils.removeElement(this.eGui, '#applyPanel');
	                }
	            };
	            NumberFilter.prototype.onTypeChanged = function () {
	                this.filterType = parseInt(this.eTypeSelect.value);
	                this.filterChanged();
	            };
	            NumberFilter.prototype.filterChanged = function () {
	                this.filterModifiedCallback();
	                if (!this.applyActive) {
	                    this.filterChangedCallback();
	                }
	            };
	            NumberFilter.prototype.onFilterChanged = function () {
	                var filterText = utils.makeNull(this.eFilterTextField.value);
	                if (filterText && filterText.trim() === '') {
	                    filterText = null;
	                }
	                var newFilter;
	                if (filterText !== null && filterText !== undefined) {
	                    newFilter = parseFloat(filterText);
	                }
	                else {
	                    newFilter = null;
	                }
	                if (this.filterNumber !== newFilter) {
	                    this.filterNumber = newFilter;
	                    this.filterChanged();
	                }
	            };
	            NumberFilter.prototype.createApi = function () {
	                var that = this;
	                this.api = {
	                    EQUALS: EQUALS,
	                    LESS_THAN: LESS_THAN,
	                    GREATER_THAN: GREATER_THAN,
	                    setType: function (type) {
	                        that.filterType = type;
	                        that.eTypeSelect.value = type;
	                    },
	                    setFilter: function (filter) {
	                        filter = utils.makeNull(filter);
	                        if (filter !== null && !(typeof filter === 'number')) {
	                            filter = parseFloat(filter);
	                        }
	                        that.filterNumber = filter;
	                        that.eFilterTextField.value = filter;
	                    },
	                    getType: function () {
	                        return that.filterType;
	                    },
	                    getFilter: function () {
	                        return that.filterNumber;
	                    },
	                    getModel: function () {
	                        if (that.isFilterActive()) {
	                            return {
	                                type: that.filterType,
	                                filter: that.filterNumber
	                            };
	                        }
	                        else {
	                            return null;
	                        }
	                    },
	                    setModel: function (dataModel) {
	                        if (dataModel) {
	                            this.setType(dataModel.type);
	                            this.setFilter(dataModel.filter);
	                        }
	                        else {
	                            this.setFilter(null);
	                        }
	                    }
	                };
	            };
	            NumberFilter.prototype.getApi = function () {
	                return this.api;
	            };
	            return NumberFilter;
	        })();
	        grid.NumberFilter = NumberFilter;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/// <reference path="../entities/colDef.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var SetFilterModel = (function () {
	            function SetFilterModel(colDef, rowModel, valueGetter, doesRowPassOtherFilters) {
	                this.colDef = colDef;
	                this.rowModel = rowModel;
	                this.valueGetter = valueGetter;
	                this.doesRowPassOtherFilters = doesRowPassOtherFilters;
	                this.filterParams = this.colDef.filterParams;
	                this.usingProvidedSet = this.filterParams && this.filterParams.values;
	                this.showingAvailableOnly = this.filterParams && !this.filterParams.suppressRemoveEntries;
	                this.createAllUniqueValues();
	                this.createAvailableUniqueValues();
	                // by default, no filter, so we display everything
	                this.displayedValues = this.availableUniqueValues;
	                this.miniFilter = null;
	                // we use a map rather than an array for the selected values as the lookup
	                // for a map is much faster than the lookup for an array, especially when
	                // the length of the array is thousands of records long
	                this.selectedValuesMap = {};
	                this.selectEverything();
	            }
	            // if keepSelection not set will always select all filters
	            // if keepSelection set will keep current state of selected filters
	            //    unless selectAll chosen in which case will select all
	            SetFilterModel.prototype.refreshAfterNewRowsLoaded = function (keepSelection, isSelectAll) {
	                this.createAllUniqueValues();
	                this.createAvailableUniqueValues();
	                var oldModel = Object.keys(this.selectedValuesMap);
	                this.selectedValuesMap = {};
	                this.processMiniFilter();
	                if (keepSelection) {
	                    this.setModel(oldModel, isSelectAll);
	                }
	                else {
	                    this.selectEverything();
	                }
	            };
	            SetFilterModel.prototype.refreshAfterAnyFilterChanged = function () {
	                if (this.showingAvailableOnly) {
	                    this.createAvailableUniqueValues();
	                    this.processMiniFilter();
	                }
	            };
	            SetFilterModel.prototype.createAllUniqueValues = function () {
	                if (this.usingProvidedSet) {
	                    this.allUniqueValues = _.toStrings(this.filterParams.values);
	                }
	                else {
	                    this.allUniqueValues = _.toStrings(this.getUniqueValues(false));
	                }
	                this.sortValues(this.allUniqueValues);
	            };
	            SetFilterModel.prototype.createAvailableUniqueValues = function () {
	                var dontCheckAvailableValues = !this.showingAvailableOnly || this.usingProvidedSet;
	                if (dontCheckAvailableValues) {
	                    this.availableUniqueValues = this.allUniqueValues;
	                    return;
	                }
	                this.availableUniqueValues = _.toStrings(this.getUniqueValues(true));
	                this.sortValues(this.availableUniqueValues);
	            };
	            SetFilterModel.prototype.sortValues = function (values) {
	                if (this.filterParams && this.filterParams.comparator) {
	                    values.sort(this.filterParams.comparator);
	                }
	                else if (this.colDef.comparator) {
	                    values.sort(this.colDef.comparator);
	                }
	                else {
	                    values.sort(_.defaultComparator);
	                }
	            };
	            SetFilterModel.prototype.getUniqueValues = function (filterOutNotAvailable) {
	                var _this = this;
	                var uniqueCheck = {};
	                var result = [];
	                this.rowModel.forEachNode(function (node) {
	                    if (!node.group) {
	                        var value = _this.valueGetter(node);
	                        if (value === "" || value === undefined) {
	                            value = null;
	                        }
	                        if (filterOutNotAvailable) {
	                            if (!_this.doesRowPassOtherFilters(node)) {
	                                return;
	                            }
	                        }
	                        if (value != null && Array.isArray(value)) {
	                            for (var j = 0; j < value.length; j++) {
	                                addUniqueValueIfMissing(value[j]);
	                            }
	                        }
	                        else {
	                            addUniqueValueIfMissing(value);
	                        }
	                    }
	                });
	                function addUniqueValueIfMissing(value) {
	                    if (!uniqueCheck.hasOwnProperty(value)) {
	                        result.push(value);
	                        uniqueCheck[value] = 1;
	                    }
	                }
	                return result;
	            };
	            //sets mini filter. returns true if it changed from last value, otherwise false
	            SetFilterModel.prototype.setMiniFilter = function (newMiniFilter) {
	                newMiniFilter = _.makeNull(newMiniFilter);
	                if (this.miniFilter === newMiniFilter) {
	                    //do nothing if filter has not changed
	                    return false;
	                }
	                this.miniFilter = newMiniFilter;
	                this.processMiniFilter();
	                return true;
	            };
	            SetFilterModel.prototype.getMiniFilter = function () {
	                return this.miniFilter;
	            };
	            SetFilterModel.prototype.processMiniFilter = function () {
	                // if no filter, just use the unique values
	                if (this.miniFilter === null) {
	                    this.displayedValues = this.availableUniqueValues;
	                    return;
	                }
	                // if filter present, we filter down the list
	                this.displayedValues = [];
	                var miniFilterUpperCase = this.miniFilter.toUpperCase();
	                for (var i = 0, l = this.availableUniqueValues.length; i < l; i++) {
	                    var filteredValue = this.availableUniqueValues[i];
	                    if (filteredValue !== null && filteredValue.toString().toUpperCase().indexOf(miniFilterUpperCase) >= 0) {
	                        this.displayedValues.push(filteredValue);
	                    }
	                }
	            };
	            SetFilterModel.prototype.getDisplayedValueCount = function () {
	                return this.displayedValues.length;
	            };
	            SetFilterModel.prototype.getDisplayedValue = function (index) {
	                return this.displayedValues[index];
	            };
	            SetFilterModel.prototype.selectEverything = function () {
	                var count = this.allUniqueValues.length;
	                for (var i = 0; i < count; i++) {
	                    var value = this.allUniqueValues[i];
	                    this.selectedValuesMap[value] = null;
	                }
	                this.selectedValuesCount = count;
	            };
	            SetFilterModel.prototype.isFilterActive = function () {
	                return this.allUniqueValues.length !== this.selectedValuesCount;
	            };
	            SetFilterModel.prototype.selectNothing = function () {
	                this.selectedValuesMap = {};
	                this.selectedValuesCount = 0;
	            };
	            SetFilterModel.prototype.getUniqueValueCount = function () {
	                return this.allUniqueValues.length;
	            };
	            SetFilterModel.prototype.getUniqueValue = function (index) {
	                return this.allUniqueValues[index];
	            };
	            SetFilterModel.prototype.unselectValue = function (value) {
	                if (this.selectedValuesMap[value] !== undefined) {
	                    delete this.selectedValuesMap[value];
	                    this.selectedValuesCount--;
	                }
	            };
	            SetFilterModel.prototype.selectValue = function (value) {
	                if (this.selectedValuesMap[value] === undefined) {
	                    this.selectedValuesMap[value] = null;
	                    this.selectedValuesCount++;
	                }
	            };
	            SetFilterModel.prototype.isValueSelected = function (value) {
	                return this.selectedValuesMap[value] !== undefined;
	            };
	            SetFilterModel.prototype.isEverythingSelected = function () {
	                return this.allUniqueValues.length === this.selectedValuesCount;
	            };
	            SetFilterModel.prototype.isNothingSelected = function () {
	                return this.allUniqueValues.length === 0;
	            };
	            SetFilterModel.prototype.getModel = function () {
	                if (!this.isFilterActive()) {
	                    return null;
	                }
	                var selectedValues = [];
	                _.iterateObject(this.selectedValuesMap, function (key) {
	                    selectedValues.push(key);
	                });
	                return selectedValues;
	            };
	            SetFilterModel.prototype.setModel = function (model, isSelectAll) {
	                if (model && !isSelectAll) {
	                    this.selectNothing();
	                    for (var i = 0; i < model.length; i++) {
	                        var newValue = model[i];
	                        if (this.allUniqueValues.indexOf(newValue) >= 0) {
	                            this.selectValue(model[i]);
	                        }
	                        else {
	                            console.warn('Value ' + newValue + ' is not a valid value for filter');
	                        }
	                    }
	                }
	                else {
	                    this.selectEverything();
	                }
	            };
	            return SetFilterModel;
	        })();
	        grid.SetFilterModel = SetFilterModel;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/** The filter parameters for set filter */
	/// <reference path="../utils.ts" />
	/// <reference path="setFilterModel.ts" />
	/// <reference path="setFilterParameters.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var template = '<div>' +
	            '<div class="ag-filter-header-container">' +
	            '<input class="ag-filter-filter" type="text" placeholder="[SEARCH...]"/>' +
	            '</div>' +
	            '<div class="ag-filter-header-container">' +
	            '<label>' +
	            '<input id="selectAll" type="checkbox" class="ag-filter-checkbox"/>' +
	            '([SELECT ALL])' +
	            '</label>' +
	            '</div>' +
	            '<div class="ag-filter-list-viewport">' +
	            '<div class="ag-filter-list-container">' +
	            '<div id="itemForRepeat" class="ag-filter-item">' +
	            '<label>' +
	            '<input type="checkbox" class="ag-filter-checkbox" filter-checkbox="true"/>' +
	            '<span class="ag-filter-value"></span>' +
	            '</label>' +
	            '</div>' +
	            '</div>' +
	            '</div>' +
	            '<div class="ag-filter-apply-panel" id="applyPanel">' +
	            '<button type="button" id="applyButton">[APPLY FILTER]</button>' +
	            '</div>' +
	            '</div>';
	        var DEFAULT_ROW_HEIGHT = 20;
	        var SetFilter = (function () {
	            function SetFilter() {
	            }
	            SetFilter.prototype.init = function (params) {
	                this.filterParams = params.filterParams;
	                this.rowHeight = (this.filterParams && this.filterParams.cellHeight) ? this.filterParams.cellHeight : DEFAULT_ROW_HEIGHT;
	                this.applyActive = this.filterParams && this.filterParams.apply == true;
	                this.model = new grid.SetFilterModel(params.colDef, params.rowModel, params.valueGetter, params.doesRowPassOtherFilter);
	                this.filterChangedCallback = params.filterChangedCallback;
	                this.filterModifiedCallback = params.filterModifiedCallback;
	                this.valueGetter = params.valueGetter;
	                this.rowsInBodyContainer = {};
	                this.colDef = params.colDef;
	                this.localeTextFunc = params.localeTextFunc;
	                if (this.filterParams) {
	                    this.cellRenderer = this.filterParams.cellRenderer;
	                }
	                this.createGui();
	                this.addScrollListener();
	                this.createApi();
	            };
	            // we need to have the gui attached before we can draw the virtual rows, as the
	            // virtual row logic needs info about the gui state
	            SetFilter.prototype.afterGuiAttached = function () {
	                this.drawVirtualRows();
	            };
	            SetFilter.prototype.isFilterActive = function () {
	                return this.model.isFilterActive();
	            };
	            SetFilter.prototype.doesFilterPass = function (node) {
	                // if no filter, always pass
	                if (this.model.isEverythingSelected()) {
	                    return true;
	                }
	                // if nothing selected in filter, always fail
	                if (this.model.isNothingSelected()) {
	                    return false;
	                }
	                var value = this.valueGetter(node);
	                value = _.makeNull(value);
	                if (Array.isArray(value)) {
	                    for (var i = 0; i < value.length; i++) {
	                        if (this.model.isValueSelected(value[i])) {
	                            return true;
	                        }
	                    }
	                    return false;
	                }
	                else {
	                    return this.model.isValueSelected(value);
	                }
	            };
	            SetFilter.prototype.getGui = function () {
	                return this.eGui;
	            };
	            SetFilter.prototype.onNewRowsLoaded = function () {
	                var keepSelection = this.filterParams && this.filterParams.newRowsAction === 'keep';
	                var isSelectAll = this.eSelectAll && this.eSelectAll.checked && !this.eSelectAll.indeterminate;
	                // default is reset
	                this.model.refreshAfterNewRowsLoaded(keepSelection, isSelectAll);
	                this.setContainerHeight();
	                this.refreshVirtualRows();
	            };
	            SetFilter.prototype.onAnyFilterChanged = function () {
	                this.model.refreshAfterAnyFilterChanged();
	                this.setContainerHeight();
	                this.refreshVirtualRows();
	            };
	            SetFilter.prototype.createTemplate = function () {
	                return template
	                    .replace('[SELECT ALL]', this.localeTextFunc('selectAll', 'Select All'))
	                    .replace('[SEARCH...]', this.localeTextFunc('searchOoo', 'Search...'))
	                    .replace('[APPLY FILTER]', this.localeTextFunc('applyFilter', 'Apply Filter'));
	            };
	            SetFilter.prototype.createGui = function () {
	                var _this = this;
	                this.eGui = _.loadTemplate(this.createTemplate());
	                this.eListContainer = this.eGui.querySelector(".ag-filter-list-container");
	                this.eFilterValueTemplate = this.eGui.querySelector("#itemForRepeat");
	                this.eSelectAll = this.eGui.querySelector("#selectAll");
	                this.eListViewport = this.eGui.querySelector(".ag-filter-list-viewport");
	                this.eMiniFilter = this.eGui.querySelector(".ag-filter-filter");
	                this.eListContainer.style.height = (this.model.getUniqueValueCount() * this.rowHeight) + "px";
	                this.setContainerHeight();
	                this.eMiniFilter.value = this.model.getMiniFilter();
	                _.addChangeListener(this.eMiniFilter, function () {
	                    _this.onMiniFilterChanged();
	                });
	                _.removeAllChildren(this.eListContainer);
	                this.eSelectAll.onclick = this.onSelectAll.bind(this);
	                if (this.model.isEverythingSelected()) {
	                    this.eSelectAll.indeterminate = false;
	                    this.eSelectAll.checked = true;
	                }
	                else if (this.model.isNothingSelected()) {
	                    this.eSelectAll.indeterminate = false;
	                    this.eSelectAll.checked = false;
	                }
	                else {
	                    this.eSelectAll.indeterminate = true;
	                }
	                this.setupApply();
	            };
	            SetFilter.prototype.setupApply = function () {
	                var _this = this;
	                if (this.applyActive) {
	                    this.eApplyButton = this.eGui.querySelector('#applyButton');
	                    this.eApplyButton.addEventListener('click', function () {
	                        _this.filterChangedCallback();
	                    });
	                }
	                else {
	                    _.removeElement(this.eGui, '#applyPanel');
	                }
	            };
	            SetFilter.prototype.setContainerHeight = function () {
	                this.eListContainer.style.height = (this.model.getDisplayedValueCount() * this.rowHeight) + "px";
	            };
	            SetFilter.prototype.drawVirtualRows = function () {
	                var topPixel = this.eListViewport.scrollTop;
	                var bottomPixel = topPixel + this.eListViewport.offsetHeight;
	                var firstRow = Math.floor(topPixel / this.rowHeight);
	                var lastRow = Math.floor(bottomPixel / this.rowHeight);
	                this.ensureRowsRendered(firstRow, lastRow);
	            };
	            SetFilter.prototype.ensureRowsRendered = function (start, finish) {
	                var _this = this;
	                //at the end, this array will contain the items we need to remove
	                var rowsToRemove = Object.keys(this.rowsInBodyContainer);
	                //add in new rows
	                for (var rowIndex = start; rowIndex <= finish; rowIndex++) {
	                    //see if item already there, and if yes, take it out of the 'to remove' array
	                    if (rowsToRemove.indexOf(rowIndex.toString()) >= 0) {
	                        rowsToRemove.splice(rowsToRemove.indexOf(rowIndex.toString()), 1);
	                        continue;
	                    }
	                    //check this row actually exists (in case overflow buffer window exceeds real data)
	                    if (this.model.getDisplayedValueCount() > rowIndex) {
	                        var value = this.model.getDisplayedValue(rowIndex);
	                        _this.insertRow(value, rowIndex);
	                    }
	                }
	                //at this point, everything in our 'rowsToRemove' . . .
	                this.removeVirtualRows(rowsToRemove);
	            };
	            //takes array of row id's
	            SetFilter.prototype.removeVirtualRows = function (rowsToRemove) {
	                var _this = this;
	                rowsToRemove.forEach(function (indexToRemove) {
	                    var eRowToRemove = _this.rowsInBodyContainer[indexToRemove];
	                    _this.eListContainer.removeChild(eRowToRemove);
	                    delete _this.rowsInBodyContainer[indexToRemove];
	                });
	            };
	            SetFilter.prototype.insertRow = function (value, rowIndex) {
	                var _this = this;
	                var eFilterValue = this.eFilterValueTemplate.cloneNode(true);
	                var valueElement = eFilterValue.querySelector(".ag-filter-value");
	                if (this.cellRenderer) {
	                    //renderer provided, so use it
	                    var resultFromRenderer = this.cellRenderer({
	                        value: value
	                    });
	                    if (_.isNode(resultFromRenderer)) {
	                        //a dom node or element was returned, so add child
	                        valueElement.appendChild(resultFromRenderer);
	                    }
	                    else {
	                        //otherwise assume it was html, so just insert
	                        valueElement.innerHTML = resultFromRenderer;
	                    }
	                }
	                else {
	                    //otherwise display as a string
	                    var blanksText = '(' + this.localeTextFunc('blanks', 'Blanks') + ')';
	                    var displayNameOfValue = value === null ? blanksText : value;
	                    valueElement.innerHTML = displayNameOfValue;
	                }
	                var eCheckbox = eFilterValue.querySelector("input");
	                eCheckbox.checked = this.model.isValueSelected(value);
	                eCheckbox.onclick = function () {
	                    _this.onCheckboxClicked(eCheckbox, value);
	                };
	                eFilterValue.style.top = (this.rowHeight * rowIndex) + "px";
	                this.eListContainer.appendChild(eFilterValue);
	                this.rowsInBodyContainer[rowIndex] = eFilterValue;
	            };
	            SetFilter.prototype.onCheckboxClicked = function (eCheckbox, value) {
	                var checked = eCheckbox.checked;
	                if (checked) {
	                    this.model.selectValue(value);
	                    if (this.model.isEverythingSelected()) {
	                        this.eSelectAll.indeterminate = false;
	                        this.eSelectAll.checked = true;
	                    }
	                    else {
	                        this.eSelectAll.indeterminate = true;
	                    }
	                }
	                else {
	                    this.model.unselectValue(value);
	                    //if set is empty, nothing is selected
	                    if (this.model.isNothingSelected()) {
	                        this.eSelectAll.indeterminate = false;
	                        this.eSelectAll.checked = false;
	                    }
	                    else {
	                        this.eSelectAll.indeterminate = true;
	                    }
	                }
	                this.filterChanged();
	            };
	            SetFilter.prototype.filterChanged = function () {
	                this.filterModifiedCallback();
	                if (!this.applyActive) {
	                    this.filterChangedCallback();
	                }
	            };
	            SetFilter.prototype.onMiniFilterChanged = function () {
	                var miniFilterChanged = this.model.setMiniFilter(this.eMiniFilter.value);
	                if (miniFilterChanged) {
	                    this.setContainerHeight();
	                    this.refreshVirtualRows();
	                }
	            };
	            SetFilter.prototype.refreshVirtualRows = function () {
	                this.clearVirtualRows();
	                this.drawVirtualRows();
	            };
	            SetFilter.prototype.clearVirtualRows = function () {
	                var rowsToRemove = Object.keys(this.rowsInBodyContainer);
	                this.removeVirtualRows(rowsToRemove);
	            };
	            SetFilter.prototype.onSelectAll = function () {
	                var checked = this.eSelectAll.checked;
	                if (checked) {
	                    this.model.selectEverything();
	                }
	                else {
	                    this.model.selectNothing();
	                }
	                this.updateAllCheckboxes(checked);
	                this.filterChanged();
	            };
	            SetFilter.prototype.updateAllCheckboxes = function (checked) {
	                var currentlyDisplayedCheckboxes = this.eListContainer.querySelectorAll("[filter-checkbox=true]");
	                for (var i = 0, l = currentlyDisplayedCheckboxes.length; i < l; i++) {
	                    currentlyDisplayedCheckboxes[i].checked = checked;
	                }
	            };
	            SetFilter.prototype.addScrollListener = function () {
	                var _this = this;
	                this.eListViewport.addEventListener("scroll", function () {
	                    _this.drawVirtualRows();
	                });
	            };
	            SetFilter.prototype.getApi = function () {
	                return this.api;
	            };
	            SetFilter.prototype.createApi = function () {
	                var model = this.model;
	                var that = this;
	                this.api = {
	                    setMiniFilter: function (newMiniFilter) {
	                        model.setMiniFilter(newMiniFilter);
	                    },
	                    getMiniFilter: function () {
	                        return model.getMiniFilter();
	                    },
	                    selectEverything: function () {
	                        that.eSelectAll.indeterminate = false;
	                        that.eSelectAll.checked = true;
	                        // not sure if we need to call this, as checking the checkout above might
	                        // fire events.
	                        model.selectEverything();
	                    },
	                    isFilterActive: function () {
	                        return model.isFilterActive();
	                    },
	                    selectNothing: function () {
	                        that.eSelectAll.indeterminate = false;
	                        that.eSelectAll.checked = false;
	                        // not sure if we need to call this, as checking the checkout above might
	                        // fire events.
	                        model.selectNothing();
	                    },
	                    unselectValue: function (value) {
	                        model.unselectValue(value);
	                        that.refreshVirtualRows();
	                    },
	                    selectValue: function (value) {
	                        model.selectValue(value);
	                        that.refreshVirtualRows();
	                    },
	                    isValueSelected: function (value) {
	                        return model.isValueSelected(value);
	                    },
	                    isEverythingSelected: function () {
	                        return model.isEverythingSelected();
	                    },
	                    isNothingSelected: function () {
	                        return model.isNothingSelected();
	                    },
	                    getUniqueValueCount: function () {
	                        return model.getUniqueValueCount();
	                    },
	                    getUniqueValue: function (index) {
	                        return model.getUniqueValue(index);
	                    },
	                    getModel: function () {
	                        return model.getModel();
	                    },
	                    setModel: function (dataModel) {
	                        model.setModel(dataModel);
	                        that.refreshVirtualRows();
	                    }
	                };
	            };
	            return SetFilter;
	        })();
	        grid.SetFilter = SetFilter;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/// <reference path="../constants.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var PopupService = (function () {
	            function PopupService() {
	            }
	            PopupService.prototype.init = function (ePopupParent) {
	                this.ePopupParent = ePopupParent;
	            };
	            PopupService.prototype.positionPopup = function (eventSource, ePopup, keepWithinBounds) {
	                var sourceRect = eventSource.getBoundingClientRect();
	                var parentRect = this.ePopupParent.getBoundingClientRect();
	                var x = sourceRect.left - parentRect.left;
	                var y = sourceRect.top - parentRect.top + sourceRect.height;
	                // if popup is overflowing to the right, move it left
	                if (keepWithinBounds) {
	                    var minWidth;
	                    if (ePopup.clientWidth > 0) {
	                        minWidth = ePopup.clientWidth;
	                    }
	                    else {
	                        minWidth = 200;
	                    }
	                    var widthOfParent = parentRect.right - parentRect.left;
	                    var maxX = widthOfParent - minWidth;
	                    if (x > maxX) {
	                        x = maxX;
	                    }
	                    if (x < 0) {
	                        x = 0;
	                    }
	                }
	                ePopup.style.left = x + "px";
	                ePopup.style.top = y + "px";
	            };
	            //adds an element to a div, but also listens to background checking for clicks,
	            //so that when the background is clicked, the child is removed again, giving
	            //a model look to popups.
	            PopupService.prototype.addAsModalPopup = function (eChild, closeOnEsc) {
	                var eBody = document.body;
	                if (!eBody) {
	                    console.warn('ag-grid: could not find the body of the document, document.body is empty');
	                    return;
	                }
	                var popupAlreadyShown = _.isVisible(eChild);
	                if (popupAlreadyShown) {
	                    return;
	                }
	                this.ePopupParent.appendChild(eChild);
	                var that = this;
	                // if we add these listeners now, then the current mouse
	                // click will be included, which we don't want
	                setTimeout(function () {
	                    if (closeOnEsc) {
	                        eBody.addEventListener('keydown', hidePopupOnEsc);
	                    }
	                    eBody.addEventListener('click', hidePopup);
	                    eChild.addEventListener('click', consumeClick);
	                }, 0);
	                var eventFromChild = null;
	                function hidePopupOnEsc(event) {
	                    var key = event.which || event.keyCode;
	                    if (key === grid.Constants.KEY_ESCAPE) {
	                        hidePopup(null);
	                    }
	                }
	                function hidePopup(event) {
	                    if (event && event === eventFromChild) {
	                        return;
	                    }
	                    that.ePopupParent.removeChild(eChild);
	                    eBody.removeEventListener('keydown', hidePopupOnEsc);
	                    eBody.removeEventListener('click', hidePopup);
	                    eChild.removeEventListener('click', consumeClick);
	                }
	                function consumeClick(event) {
	                    eventFromChild = event;
	                }
	                return hidePopup;
	            };
	            return PopupService;
	        })();
	        grid.PopupService = PopupService;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/// <reference path="textFilter.ts" />
	/// <reference path="numberFilter.ts" />
	/// <reference path="setFilter.ts" />
	/// <reference path="../widgets/agPopupService.ts" />
	/// <reference path="../widgets/agPopupService.ts" />
	/// <reference path="../grid.ts" />
	/// <reference path="../entities/rowNode.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid_2) {
	        var _ = grid_2.Utils;
	        var FilterManager = (function () {
	            function FilterManager() {
	            }
	            FilterManager.prototype.init = function (grid, gridOptionsWrapper, $compile, $scope, columnController, popupService, valueService) {
	                this.$compile = $compile;
	                this.$scope = $scope;
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.grid = grid;
	                this.allFilters = {};
	                this.columnController = columnController;
	                this.popupService = popupService;
	                this.valueService = valueService;
	                this.columnController = columnController;
	                this.quickFilter = null;
	            };
	            FilterManager.prototype.setFilterModel = function (model) {
	                var _this = this;
	                if (model) {
	                    // mark the filters as we set them, so any active filters left over we stop
	                    var modelKeys = Object.keys(model);
	                    _.iterateObject(this.allFilters, function (colId, filterWrapper) {
	                        _.removeFromArray(modelKeys, colId);
	                        var newModel = model[colId];
	                        _this.setModelOnFilterWrapper(filterWrapper.filter, newModel);
	                    });
	                    // at this point, processedFields contains data for which we don't have a filter working yet
	                    _.iterateArray(modelKeys, function (colId) {
	                        var column = _this.columnController.getColumn(colId);
	                        if (!column) {
	                            console.warn('Warning ag-grid setFilterModel - no column found for colId ' + colId);
	                            return;
	                        }
	                        var filterWrapper = _this.getOrCreateFilterWrapper(column);
	                        _this.setModelOnFilterWrapper(filterWrapper.filter, model[colId]);
	                    });
	                }
	                else {
	                    _.iterateObject(this.allFilters, function (key, filterWrapper) {
	                        _this.setModelOnFilterWrapper(filterWrapper.filter, null);
	                    });
	                }
	                this.grid.onFilterChanged();
	            };
	            FilterManager.prototype.setModelOnFilterWrapper = function (filter, newModel) {
	                // because user can provide filters, we provide useful error checking and messages
	                if (typeof filter.getApi !== 'function') {
	                    console.warn('Warning ag-grid - filter missing getApi method, which is needed for getFilterModel');
	                    return;
	                }
	                var filterApi = filter.getApi();
	                if (typeof filterApi.setModel !== 'function') {
	                    console.warn('Warning ag-grid - filter API missing setModel method, which is needed for setFilterModel');
	                    return;
	                }
	                filterApi.setModel(newModel);
	            };
	            FilterManager.prototype.getFilterModel = function () {
	                var result = {};
	                _.iterateObject(this.allFilters, function (key, filterWrapper) {
	                    // because user can provide filters, we provide useful error checking and messages
	                    if (typeof filterWrapper.filter.getApi !== 'function') {
	                        console.warn('Warning ag-grid - filter missing getApi method, which is needed for getFilterModel');
	                        return;
	                    }
	                    var filterApi = filterWrapper.filter.getApi();
	                    if (typeof filterApi.getModel !== 'function') {
	                        console.warn('Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel');
	                        return;
	                    }
	                    var model = filterApi.getModel();
	                    if (model) {
	                        result[key] = model;
	                    }
	                });
	                return result;
	            };
	            FilterManager.prototype.setRowModel = function (rowModel) {
	                this.rowModel = rowModel;
	            };
	            // returns true if any advanced filter (ie not quick filter) active
	            FilterManager.prototype.isAdvancedFilterPresent = function () {
	                var atLeastOneActive = false;
	                _.iterateObject(this.allFilters, function (key, filterWrapper) {
	                    if (!filterWrapper.filter.isFilterActive) {
	                        console.error('Filter is missing method isFilterActive');
	                    }
	                    if (filterWrapper.filter.isFilterActive()) {
	                        atLeastOneActive = true;
	                    }
	                });
	                return atLeastOneActive;
	            };
	            // returns true if quickFilter or advancedFilter
	            FilterManager.prototype.isAnyFilterPresent = function () {
	                return this.isQuickFilterPresent() || this.advancedFilterPresent || this.externalFilterPresent;
	            };
	            // returns true if given col has a filter active
	            FilterManager.prototype.isFilterPresentForCol = function (colId) {
	                var filterWrapper = this.allFilters[colId];
	                if (!filterWrapper) {
	                    return false;
	                }
	                if (!filterWrapper.filter.isFilterActive) {
	                    console.error('Filter is missing method isFilterActive');
	                }
	                var filterPresent = filterWrapper.filter.isFilterActive();
	                return filterPresent;
	            };
	            FilterManager.prototype.doesFilterPass = function (node, filterToSkip) {
	                var data = node.data;
	                var colKeys = Object.keys(this.allFilters);
	                for (var i = 0, l = colKeys.length; i < l; i++) {
	                    var colId = colKeys[i];
	                    var filterWrapper = this.allFilters[colId];
	                    // if no filter, always pass
	                    if (filterWrapper === undefined) {
	                        continue;
	                    }
	                    if (filterWrapper.filter === filterToSkip) {
	                        continue;
	                    }
	                    if (!filterWrapper.filter.doesFilterPass) {
	                        console.error('Filter is missing method doesFilterPass');
	                    }
	                    var params = {
	                        node: node,
	                        data: data
	                    };
	                    if (!filterWrapper.filter.doesFilterPass(params)) {
	                        return false;
	                    }
	                }
	                // all filters passed
	                return true;
	            };
	            // returns true if it has changed (not just same value again)
	            FilterManager.prototype.setQuickFilter = function (newFilter) {
	                if (newFilter === undefined || newFilter === "") {
	                    newFilter = null;
	                }
	                if (this.quickFilter !== newFilter) {
	                    if (this.gridOptionsWrapper.isVirtualPaging()) {
	                        console.warn('ag-grid: cannot do quick filtering when doing virtual paging');
	                        return;
	                    }
	                    //want 'null' to mean to filter, so remove undefined and empty string
	                    if (newFilter === undefined || newFilter === "") {
	                        newFilter = null;
	                    }
	                    if (newFilter !== null) {
	                        newFilter = newFilter.toUpperCase();
	                    }
	                    this.quickFilter = newFilter;
	                    return true;
	                }
	                else {
	                    return false;
	                }
	            };
	            FilterManager.prototype.onFilterChanged = function () {
	                this.advancedFilterPresent = this.isAdvancedFilterPresent();
	                this.externalFilterPresent = this.gridOptionsWrapper.isExternalFilterPresent();
	                _.iterateObject(this.allFilters, function (key, filterWrapper) {
	                    if (filterWrapper.filter.onAnyFilterChanged) {
	                        filterWrapper.filter.onAnyFilterChanged();
	                    }
	                });
	            };
	            FilterManager.prototype.isQuickFilterPresent = function () {
	                return this.quickFilter !== null;
	            };
	            FilterManager.prototype.doesRowPassOtherFilters = function (filterToSkip, node) {
	                return this.doesRowPassFilter(node, filterToSkip);
	            };
	            FilterManager.prototype.doesRowPassFilter = function (node, filterToSkip) {
	                //first up, check quick filter
	                if (this.isQuickFilterPresent()) {
	                    if (!node.quickFilterAggregateText) {
	                        this.aggregateRowForQuickFilter(node);
	                    }
	                    if (node.quickFilterAggregateText.indexOf(this.quickFilter) < 0) {
	                        //quick filter fails, so skip item
	                        return false;
	                    }
	                }
	                //secondly, give the client a chance to reject this row
	                if (this.externalFilterPresent) {
	                    if (!this.gridOptionsWrapper.doesExternalFilterPass(node)) {
	                        return false;
	                    }
	                }
	                //lastly, check our internal advanced filter
	                if (this.advancedFilterPresent) {
	                    if (!this.doesFilterPass(node, filterToSkip)) {
	                        return false;
	                    }
	                }
	                //got this far, all filters pass
	                return true;
	            };
	            FilterManager.prototype.aggregateRowForQuickFilter = function (node) {
	                var aggregatedText = '';
	                var that = this;
	                this.columnController.getAllColumns().forEach(function (column) {
	                    var data = node.data;
	                    var value = that.valueService.getValue(column.getColDef(), data, node);
	                    if (value && value !== '') {
	                        aggregatedText = aggregatedText + value.toString().toUpperCase() + "_";
	                    }
	                });
	                node.quickFilterAggregateText = aggregatedText;
	            };
	            FilterManager.prototype.onNewRowsLoaded = function () {
	                var that = this;
	                Object.keys(this.allFilters).forEach(function (field) {
	                    var filter = that.allFilters[field].filter;
	                    if (filter.onNewRowsLoaded) {
	                        filter.onNewRowsLoaded();
	                    }
	                });
	            };
	            FilterManager.prototype.createValueGetter = function (column) {
	                var that = this;
	                return function valueGetter(node) {
	                    return that.valueService.getValue(column.getColDef(), node.data, node);
	                };
	            };
	            FilterManager.prototype.getFilterApi = function (column) {
	                var filterWrapper = this.getOrCreateFilterWrapper(column);
	                if (filterWrapper) {
	                    if (typeof filterWrapper.filter.getApi === 'function') {
	                        return filterWrapper.filter.getApi();
	                    }
	                }
	            };
	            FilterManager.prototype.getOrCreateFilterWrapper = function (column) {
	                var filterWrapper = this.allFilters[column.getColId()];
	                if (!filterWrapper) {
	                    filterWrapper = this.createFilterWrapper(column);
	                    this.allFilters[column.getColId()] = filterWrapper;
	                }
	                return filterWrapper;
	            };
	            FilterManager.prototype.createFilterWrapper = function (column) {
	                var colDef = column.getColDef();
	                var filterWrapper = {
	                    column: column,
	                    filter: null,
	                    scope: null,
	                    gui: null
	                };
	                if (typeof colDef.filter === 'function') {
	                    // if user provided a filter, just use it
	                    // first up, create child scope if needed
	                    if (this.gridOptionsWrapper.isAngularCompileFilters()) {
	                        filterWrapper.scope = this.$scope.$new();
	                        ;
	                    }
	                    // now create filter (had to cast to any to get 'new' working)
	                    this.assertMethodHasNoParameters(colDef.filter);
	                    filterWrapper.filter = new colDef.filter();
	                }
	                else if (colDef.filter === 'text') {
	                    filterWrapper.filter = new grid_2.TextFilter();
	                }
	                else if (colDef.filter === 'number') {
	                    filterWrapper.filter = new grid_2.NumberFilter();
	                }
	                else {
	                    filterWrapper.filter = new grid_2.SetFilter();
	                }
	                var filterChangedCallback = this.grid.onFilterChanged.bind(this.grid);
	                var filterModifiedCallback = this.grid.onFilterModified.bind(this.grid);
	                var doesRowPassOtherFilters = this.doesRowPassOtherFilters.bind(this, filterWrapper.filter);
	                var filterParams = colDef.filterParams;
	                var params = {
	                    colDef: colDef,
	                    rowModel: this.rowModel,
	                    filterChangedCallback: filterChangedCallback,
	                    filterModifiedCallback: filterModifiedCallback,
	                    filterParams: filterParams,
	                    localeTextFunc: this.gridOptionsWrapper.getLocaleTextFunc(),
	                    valueGetter: this.createValueGetter(column),
	                    doesRowPassOtherFilter: doesRowPassOtherFilters,
	                    context: this.gridOptionsWrapper.getContext,
	                    $scope: filterWrapper.scope
	                };
	                if (!filterWrapper.filter.init) {
	                    throw 'Filter is missing method init';
	                }
	                filterWrapper.filter.init(params);
	                if (!filterWrapper.filter.getGui) {
	                    throw 'Filter is missing method getGui';
	                }
	                var eFilterGui = document.createElement('div');
	                eFilterGui.className = 'ag-filter';
	                var guiFromFilter = filterWrapper.filter.getGui();
	                if (_.isNodeOrElement(guiFromFilter)) {
	                    //a dom node or element was returned, so add child
	                    eFilterGui.appendChild(guiFromFilter);
	                }
	                else {
	                    //otherwise assume it was html, so just insert
	                    var eTextSpan = document.createElement('span');
	                    eTextSpan.innerHTML = guiFromFilter;
	                    eFilterGui.appendChild(eTextSpan);
	                }
	                if (filterWrapper.scope) {
	                    filterWrapper.gui = this.$compile(eFilterGui)(filterWrapper.scope)[0];
	                }
	                else {
	                    filterWrapper.gui = eFilterGui;
	                }
	                return filterWrapper;
	            };
	            FilterManager.prototype.assertMethodHasNoParameters = function (theMethod) {
	                var getRowsParams = _.getFunctionParameters(theMethod);
	                if (getRowsParams.length > 0) {
	                    console.warn('ag-grid: It looks like your filter is of the old type and expecting parameters in the constructor.');
	                    console.warn('ag-grid: From ag-grid 1.14, the constructor should take no parameters and init() used instead.');
	                }
	            };
	            FilterManager.prototype.showFilter = function (column, eventSource) {
	                var filterWrapper = this.getOrCreateFilterWrapper(column);
	                // need to show filter before positioning, as only after filter
	                // is visible can we find out what the width of it is
	                var hidePopup = this.popupService.addAsModalPopup(filterWrapper.gui, true);
	                this.popupService.positionPopup(eventSource, filterWrapper.gui, true);
	                if (filterWrapper.filter.afterGuiAttached) {
	                    var params = {
	                        hidePopup: hidePopup,
	                        eventSource: eventSource
	                    };
	                    filterWrapper.filter.afterGuiAttached(params);
	                }
	            };
	            return FilterManager;
	        })();
	        grid_2.FilterManager = FilterManager;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="./columnGroupChild.ts"/>
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var ColumnGroup = (function () {
	            function ColumnGroup(colGroupDef, groupId, instanceId) {
	                // depends on the open/closed state of the group, only displaying columns are stored here
	                this.displayedChildren = [];
	                this.expandable = false;
	                this.expanded = false;
	                this.colGroupDef = colGroupDef;
	                this.groupId = groupId;
	                this.instanceId = instanceId;
	            }
	            // returns header name if it exists, otherwise null. if will not exist if
	            // this group is a padding group, as they don't have colGroupDef's
	            ColumnGroup.prototype.getHeaderName = function () {
	                if (this.colGroupDef) {
	                    return this.colGroupDef.headerName;
	                }
	                else {
	                    return null;
	                }
	            };
	            ColumnGroup.prototype.getGroupId = function () {
	                return this.groupId;
	            };
	            ColumnGroup.prototype.getInstanceId = function () {
	                return this.instanceId;
	            };
	            ColumnGroup.prototype.setExpanded = function (expanded) {
	                this.expanded = expanded;
	            };
	            ColumnGroup.prototype.isExpandable = function () {
	                return this.expandable;
	            };
	            ColumnGroup.prototype.isExpanded = function () {
	                return this.expanded;
	            };
	            ColumnGroup.prototype.getColGroupDef = function () {
	                return this.colGroupDef;
	            };
	            ColumnGroup.prototype.isChildInThisGroupDeepSearch = function (wantedChild) {
	                var result = false;
	                this.children.forEach(function (foundChild) {
	                    if (wantedChild === foundChild) {
	                        result = true;
	                    }
	                    if (foundChild instanceof ColumnGroup) {
	                        if (foundChild.isChildInThisGroupDeepSearch(wantedChild)) {
	                            result = true;
	                        }
	                    }
	                });
	                return result;
	            };
	            ColumnGroup.prototype.getActualWidth = function () {
	                var groupActualWidth = 0;
	                if (this.displayedChildren) {
	                    this.displayedChildren.forEach(function (child) {
	                        groupActualWidth += child.getActualWidth();
	                    });
	                }
	                return groupActualWidth;
	            };
	            ColumnGroup.prototype.getMinimumWidth = function () {
	                var result = 0;
	                this.displayedChildren.forEach(function (groupChild) {
	                    result += groupChild.getMinimumWidth();
	                });
	                return result;
	            };
	            ColumnGroup.prototype.addChild = function (child) {
	                if (!this.children) {
	                    this.children = [];
	                }
	                this.children.push(child);
	            };
	            ColumnGroup.prototype.getDisplayedChildren = function () {
	                return this.displayedChildren;
	            };
	            ColumnGroup.prototype.getDisplayedLeafColumns = function () {
	                var result = [];
	                this.addDisplayedLeafColumns(result);
	                return result;
	            };
	            ColumnGroup.prototype.getDefinition = function () {
	                return this.colGroupDef;
	            };
	            ColumnGroup.prototype.addDisplayedLeafColumns = function (leafColumns) {
	                this.displayedChildren.forEach(function (child) {
	                    if (child instanceof grid.Column) {
	                        leafColumns.push(child);
	                    }
	                    else if (child instanceof ColumnGroup) {
	                        child.addDisplayedLeafColumns(leafColumns);
	                    }
	                });
	            };
	            ColumnGroup.prototype.getChildren = function () {
	                return this.children;
	            };
	            ColumnGroup.prototype.getColumnGroupShow = function () {
	                if (this.colGroupDef) {
	                    return this.colGroupDef.columnGroupShow;
	                }
	                else {
	                    // if there is no col def, then this must be a padding
	                    // group, which means we exactly only child. we then
	                    // take the value from the child and push it up, making
	                    // this group 'invisible'.
	                    return this.children[0].getColumnGroupShow();
	                }
	            };
	            // need to check that this group has at least one col showing when both expanded and contracted.
	            // if not, then we don't allow expanding and contracting on this group
	            ColumnGroup.prototype.calculateExpandable = function () {
	                // want to make sure the group doesn't disappear when it's open
	                var atLeastOneShowingWhenOpen = false;
	                // want to make sure the group doesn't disappear when it's closed
	                var atLeastOneShowingWhenClosed = false;
	                // want to make sure the group has something to show / hide
	                var atLeastOneChangeable = false;
	                for (var i = 0, j = this.children.length; i < j; i++) {
	                    var abstractColumn = this.children[i];
	                    // if the abstractColumn is a grid generated group, there will be no colDef
	                    var headerGroupShow = abstractColumn.getColumnGroupShow();
	                    if (headerGroupShow === 'open') {
	                        atLeastOneShowingWhenOpen = true;
	                        atLeastOneChangeable = true;
	                    }
	                    else if (headerGroupShow === 'closed') {
	                        atLeastOneShowingWhenClosed = true;
	                        atLeastOneChangeable = true;
	                    }
	                    else {
	                        atLeastOneShowingWhenOpen = true;
	                        atLeastOneShowingWhenClosed = true;
	                    }
	                }
	                this.expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;
	            };
	            ColumnGroup.prototype.calculateDisplayedColumns = function () {
	                // clear out last time we calculated
	                this.displayedChildren = [];
	                // it not expandable, everything is visible
	                if (!this.expandable) {
	                    this.displayedChildren = this.children;
	                    return;
	                }
	                // and calculate again
	                for (var i = 0, j = this.children.length; i < j; i++) {
	                    var abstractColumn = this.children[i];
	                    var headerGroupShow = abstractColumn.getColumnGroupShow();
	                    switch (headerGroupShow) {
	                        case 'open':
	                            // when set to open, only show col if group is open
	                            if (this.expanded) {
	                                this.displayedChildren.push(abstractColumn);
	                            }
	                            break;
	                        case 'closed':
	                            // when set to open, only show col if group is open
	                            if (!this.expanded) {
	                                this.displayedChildren.push(abstractColumn);
	                            }
	                            break;
	                        default:
	                            // default is always show the column
	                            this.displayedChildren.push(abstractColumn);
	                            break;
	                    }
	                }
	            };
	            return ColumnGroup;
	        })();
	        grid.ColumnGroup = ColumnGroup;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../constants.ts" />
	/// <reference path="columnGroup.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var constants = grid.Constants;
	        // Wrapper around a user provide column definition. The grid treats the column definition as ready only.
	        // This class contains all the runtime information about a column, plus some logic (the definition has no logic).
	        // This class implements both interfaces ColumnGroupChild and OriginalColumnGroupChild as the class can
	        // appear as a child of either the original tree or the displayed tree. However the relevant group classes
	        // for each type only implements one, as each group can only appear in it's associated tree (eg OriginalColumnGroup
	        // can only appear in OriginalColumn tree).
	        var Column = (function () {
	            function Column(colDef, actualWidth, colId) {
	                this.colDef = colDef;
	                this.actualWidth = actualWidth;
	                this.visible = !colDef.hide;
	                this.sort = colDef.sort;
	                this.sortedAt = colDef.sortedAt;
	                this.colId = colId;
	                if (colDef.pinned === true || colDef.pinned === 'left') {
	                    this.pinned = 'left';
	                }
	                else if (colDef.pinned === 'right') {
	                    this.pinned = 'right';
	                }
	            }
	            Column.prototype.getSort = function () {
	                return this.sort;
	            };
	            Column.prototype.setSort = function (sort) {
	                this.sort = sort;
	            };
	            Column.prototype.getSortedAt = function () {
	                return this.sortedAt;
	            };
	            Column.prototype.setSortedAt = function (sortedAt) {
	                this.sortedAt = sortedAt;
	            };
	            Column.prototype.setAggFunc = function (aggFunc) {
	                this.aggFunc = aggFunc;
	            };
	            Column.prototype.getAggFunc = function () {
	                return this.aggFunc;
	            };
	            Column.prototype.getIndex = function () {
	                return this.index;
	            };
	            Column.prototype.setIndex = function (index) {
	                this.index = index;
	            };
	            Column.prototype.setPinned = function (pinned) {
	                if (pinned === true || pinned === Column.PINNED_LEFT) {
	                    this.pinned = Column.PINNED_LEFT;
	                }
	                else if (pinned === Column.PINNED_RIGHT) {
	                    this.pinned = Column.PINNED_RIGHT;
	                }
	                else {
	                    this.pinned = null;
	                }
	            };
	            Column.prototype.isPinned = function () {
	                return this.pinned === Column.PINNED_LEFT || this.pinned === Column.PINNED_RIGHT;
	            };
	            Column.prototype.getPinned = function () {
	                return this.pinned;
	            };
	            Column.prototype.setVisible = function (visible) {
	                this.visible = visible === true;
	            };
	            Column.prototype.isVisible = function () {
	                return this.visible;
	            };
	            Column.prototype.getColDef = function () {
	                return this.colDef;
	            };
	            Column.prototype.getColumnGroupShow = function () {
	                return this.colDef.columnGroupShow;
	            };
	            Column.prototype.getColId = function () {
	                return this.colId;
	            };
	            Column.prototype.getDefinition = function () {
	                return this.colDef;
	            };
	            Column.prototype.getActualWidth = function () {
	                return this.actualWidth;
	            };
	            Column.prototype.setActualWidth = function (actualWidth) {
	                this.actualWidth = actualWidth;
	            };
	            Column.prototype.isGreaterThanMax = function (width) {
	                if (this.colDef.maxWidth >= constants.MIN_COL_WIDTH) {
	                    return width > this.colDef.maxWidth;
	                }
	                else {
	                    return false;
	                }
	            };
	            Column.prototype.getMinimumWidth = function () {
	                return Math.max(this.colDef.minWidth, constants.MIN_COL_WIDTH);
	            };
	            Column.prototype.setMinimum = function () {
	                this.actualWidth = this.getMinimumWidth();
	            };
	            Column.PINNED_RIGHT = 'right';
	            Column.PINNED_LEFT = 'left';
	            Column.AGG_SUM = 'sum';
	            Column.AGG_MIN = 'min';
	            Column.AGG_MAX = 'max';
	            Column.SORT_ASC = 'asc';
	            Column.SORT_DESC = 'desc';
	            return Column;
	        })();
	        grid.Column = Column;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var LoggerFactory = (function () {
	            function LoggerFactory() {
	            }
	            LoggerFactory.prototype.init = function (gridOptionsWrapper) {
	                this.logging = gridOptionsWrapper.isDebug();
	            };
	            LoggerFactory.prototype.create = function (name) {
	                return new Logger(name, this.logging);
	            };
	            return LoggerFactory;
	        })();
	        grid.LoggerFactory = LoggerFactory;
	        var Logger = (function () {
	            function Logger(name, logging) {
	                this.name = name;
	                this.logging = logging;
	            }
	            Logger.prototype.log = function (message) {
	                if (this.logging) {
	                    console.log('ag-Grid.' + this.name + ': ' + message);
	                }
	            };
	            return Logger;
	        })();
	        grid.Logger = Logger;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="columnController/columnController.ts" />
	/// <reference path="gridOptionsWrapper.ts" />
	/// <reference path="logger.ts" />
	/// <reference path="events.ts" />
	/// <reference path="eventService.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var MasterSlaveService = (function () {
	            function MasterSlaveService() {
	                // flag to mark if we are consuming. to avoid cyclic events (ie slave firing back to master
	                // while processing a master event) we mark this if consuming an event, and if we are, then
	                // we don't fire back any events.
	                this.consuming = false;
	            }
	            MasterSlaveService.prototype.init = function (gridOptionsWrapper, columnController, gridPanel, loggerFactory, eventService) {
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.columnController = columnController;
	                this.gridPanel = gridPanel;
	                this.eventService = eventService;
	                this.logger = loggerFactory.create('MasterSlaveService');
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_MOVED, this.fireColumnEvent.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_VISIBLE, this.fireColumnEvent.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_PINNED, this.fireColumnEvent.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_GROUP_OPENED, this.fireColumnEvent.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_RESIZED, this.fireColumnEvent.bind(this));
	            };
	            // common logic across all the fire methods
	            MasterSlaveService.prototype.fireEvent = function (callback) {
	                // if we are already consuming, then we are acting on an event from a master,
	                // so we don't cause a cyclic firing of events
	                if (this.consuming) {
	                    return;
	                }
	                // iterate through the slave grids, and pass each slave service to the callback
	                var slaveGrids = this.gridOptionsWrapper.getSlaveGrids();
	                if (slaveGrids) {
	                    slaveGrids.forEach(function (slaveGridOptions) {
	                        if (slaveGridOptions.api) {
	                            var slaveService = slaveGridOptions.api.__getMasterSlaveService();
	                            callback(slaveService);
	                        }
	                    });
	                }
	            };
	            // common logic across all consume methods. very little common logic, however extracting
	            // guarantees consistency across the methods.
	            MasterSlaveService.prototype.onEvent = function (callback) {
	                this.consuming = true;
	                callback();
	                this.consuming = false;
	            };
	            MasterSlaveService.prototype.fireColumnEvent = function (event) {
	                this.fireEvent(function (slaveService) {
	                    slaveService.onColumnEvent(event);
	                });
	            };
	            MasterSlaveService.prototype.fireHorizontalScrollEvent = function (horizontalScroll) {
	                this.fireEvent(function (slaveService) {
	                    slaveService.onScrollEvent(horizontalScroll);
	                });
	            };
	            MasterSlaveService.prototype.onScrollEvent = function (horizontalScroll) {
	                var _this = this;
	                this.onEvent(function () {
	                    _this.gridPanel.setHorizontalScrollPosition(horizontalScroll);
	                });
	            };
	            MasterSlaveService.prototype.getMasterColumns = function (event) {
	                var result = [];
	                if (event.getColumn()) {
	                    result.push(event.getColumn());
	                }
	                if (event.getColumns()) {
	                    event.getColumns().forEach(function (column) {
	                        result.push(column);
	                    });
	                }
	                return result;
	            };
	            MasterSlaveService.prototype.getColumnIds = function (event) {
	                var result = [];
	                if (event.getColumn()) {
	                    result.push(event.getColumn().getColId());
	                }
	                if (event.getColumns()) {
	                    event.getColumns().forEach(function (column) {
	                        result.push(column.getColId());
	                    });
	                }
	                return result;
	            };
	            MasterSlaveService.prototype.onColumnEvent = function (event) {
	                var _this = this;
	                this.onEvent(function () {
	                    // the column in the event is from the master grid. need to
	                    // look up the equivalent from this (slave) grid
	                    var masterColumn = event.getColumn();
	                    var slaveColumn;
	                    if (masterColumn) {
	                        slaveColumn = _this.columnController.getColumn(masterColumn.getColId());
	                    }
	                    // if event was with respect to a master column, that is not present in this
	                    // grid, then we ignore the event
	                    if (masterColumn && !slaveColumn) {
	                        return;
	                    }
	                    // likewise for column group
	                    var masterColumnGroup = event.getColumnGroup();
	                    var slaveColumnGroup;
	                    if (masterColumnGroup) {
	                        var colId = masterColumnGroup.getGroupId();
	                        var instanceId = masterColumnGroup.getInstanceId();
	                        slaveColumnGroup = _this.columnController.getColumnGroup(colId, instanceId);
	                    }
	                    if (masterColumnGroup && !slaveColumnGroup) {
	                        return;
	                    }
	                    // in time, all the methods below should use the column ids, it's a more generic way
	                    // of handling columns, and also allows for single or multi column events
	                    var columnIds = _this.getColumnIds(event);
	                    var masterColumns = _this.getMasterColumns(event);
	                    switch (event.getType()) {
	                        case grid.Events.EVENT_COLUMN_MOVED:
	                            _this.logger.log('onColumnEvent-> processing ' + event + ' fromIndex = ' + event.getFromIndex() + ', toIndex = ' + event.getToIndex());
	                            _this.columnController.moveColumn(event.getFromIndex(), event.getToIndex());
	                            break;
	                        case grid.Events.EVENT_COLUMN_VISIBLE:
	                            _this.logger.log('onColumnEvent-> processing ' + event + ' visible = ' + event.isVisible());
	                            _this.columnController.setColumnsVisible(columnIds, event.isVisible());
	                            break;
	                        case grid.Events.EVENT_COLUMN_PINNED:
	                            _this.logger.log('onColumnEvent-> processing ' + event + ' pinned = ' + event.getPinned());
	                            _this.columnController.setColumnsPinned(columnIds, event.getPinned());
	                            break;
	                        case grid.Events.EVENT_COLUMN_GROUP_OPENED:
	                            _this.logger.log('onColumnEvent-> processing ' + event + ' expanded = ' + masterColumnGroup.isExpanded());
	                            _this.columnController.setColumnGroupOpened(slaveColumnGroup, masterColumnGroup.isExpanded());
	                            break;
	                        case grid.Events.EVENT_COLUMN_RESIZED:
	                            masterColumns.forEach(function (masterColumn) {
	                                _this.logger.log('onColumnEvent-> processing ' + event + ' actualWidth = ' + masterColumn.getActualWidth());
	                                _this.columnController.setColumnWidth(masterColumn.getColId(), masterColumn.getActualWidth(), event.isFinished());
	                            });
	                            break;
	                    }
	                });
	            };
	            return MasterSlaveService;
	        })();
	        grid.MasterSlaveService = MasterSlaveService;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        // class returns unique instance id's for columns.
	        // eg, the following calls (in this order) will result in:
	        //
	        // getInstanceIdForKey('country') => 0
	        // getInstanceIdForKey('country') => 1
	        // getInstanceIdForKey('country') => 2
	        // getInstanceIdForKey('country') => 3
	        // getInstanceIdForKey('age') => 0
	        // getInstanceIdForKey('age') => 1
	        // getInstanceIdForKey('country') => 4
	        var GroupInstanceIdCreator = (function () {
	            function GroupInstanceIdCreator() {
	                // this map contains keys to numbers, so we remember what the last call was
	                this.existingIds = {};
	            }
	            GroupInstanceIdCreator.prototype.getInstanceIdForKey = function (key) {
	                var lastResult = this.existingIds[key];
	                var result;
	                if (typeof lastResult !== 'number') {
	                    // first time this key
	                    result = 0;
	                }
	                else {
	                    result = lastResult + 1;
	                }
	                this.existingIds[key] = result;
	                return result;
	            };
	            return GroupInstanceIdCreator;
	        })();
	        grid.GroupInstanceIdCreator = GroupInstanceIdCreator;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path='../entities/colDef.ts'/>
	/// <reference path='../entities/column.ts'/>
	/// <reference path='../entities/columnGroup.ts'/>
	/// <reference path='../logger.ts'/>
	/// <reference path='groupInstanceIdCreator.ts'/>
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        // takes in a list of columns, as specified by the column definitions, and returns column groups
	        var DisplayedGroupCreator = (function () {
	            function DisplayedGroupCreator() {
	            }
	            DisplayedGroupCreator.prototype.init = function (columnUtils) {
	                this.columnUtils = columnUtils;
	            };
	            DisplayedGroupCreator.prototype.createDisplayedGroups = function (sortedVisibleColumns, balancedColumnTree, groupInstanceIdCreator) {
	                var _this = this;
	                var result = [];
	                var previousRealPath;
	                var previousOriginalPath;
	                // go through each column, then do a bottom up comparison to the previous column, and start
	                // to share groups if they converge at any point.
	                sortedVisibleColumns.forEach(function (currentColumn) {
	                    var currentOriginalPath = _this.getOriginalPathForColumn(balancedColumnTree, currentColumn);
	                    var currentRealPath = [];
	                    var firstColumn = !previousOriginalPath;
	                    for (var i = 0; i < currentOriginalPath.length; i++) {
	                        if (firstColumn || currentOriginalPath[i] !== previousOriginalPath[i]) {
	                            // new group needed
	                            var originalGroup = currentOriginalPath[i];
	                            var groupId = originalGroup.getGroupId();
	                            var instanceId = groupInstanceIdCreator.getInstanceIdForKey(groupId);
	                            var newGroup = new grid.ColumnGroup(originalGroup.getColGroupDef(), groupId, instanceId);
	                            currentRealPath[i] = newGroup;
	                            // if top level, add to result, otherwise add to parent
	                            if (i == 0) {
	                                result.push(newGroup);
	                            }
	                            else {
	                                currentRealPath[i - 1].addChild(newGroup);
	                            }
	                        }
	                        else {
	                            // reuse old group
	                            currentRealPath[i] = previousRealPath[i];
	                        }
	                    }
	                    var noColumnGroups = currentRealPath.length === 0;
	                    if (noColumnGroups) {
	                        // if we are not grouping, then the result of the above is an empty
	                        // path (no groups), and we just add the column to the root list.
	                        result.push(currentColumn);
	                    }
	                    else {
	                        var leafGroup = currentRealPath[currentRealPath.length - 1];
	                        leafGroup.addChild(currentColumn);
	                    }
	                    previousRealPath = currentRealPath;
	                    previousOriginalPath = currentOriginalPath;
	                });
	                this.columnUtils.deptFirstAllColumnTreeSearch(result, function (child) {
	                    if (child instanceof grid.ColumnGroup) {
	                        child.calculateExpandable();
	                    }
	                });
	                return result;
	            };
	            DisplayedGroupCreator.prototype.createFakePath = function (balancedColumnTree) {
	                var result = [];
	                var currentChildren = balancedColumnTree;
	                // this while look does search on the balanced tree, so our result is the right length
	                var index = 0;
	                while (currentChildren && currentChildren[0] && currentChildren[0] instanceof grid.OriginalColumnGroup) {
	                    // putting in a deterministic fake id, in case the API in the future needs to reference the col
	                    result.push(new grid.OriginalColumnGroup(null, 'FAKE_PATH_' + index));
	                    currentChildren = currentChildren[0].getChildren();
	                    index++;
	                }
	                return result;
	            };
	            DisplayedGroupCreator.prototype.getOriginalPathForColumn = function (balancedColumnTree, column) {
	                var result = [];
	                var found = false;
	                recursePath(balancedColumnTree, 0);
	                // it's possible we didn't find a path. this happens if the column is generated
	                // by the grid, in that the definition didn't come from the client. in this case,
	                // we create a fake original path.
	                if (found) {
	                    return result;
	                }
	                else {
	                    return this.createFakePath(balancedColumnTree);
	                }
	                function recursePath(balancedColumnTree, dept) {
	                    for (var i = 0; i < balancedColumnTree.length; i++) {
	                        if (found) {
	                            // quit the search, so 'result' is kept with the found result
	                            return;
	                        }
	                        var node = balancedColumnTree[i];
	                        if (node instanceof grid.OriginalColumnGroup) {
	                            var nextNode = node;
	                            recursePath(nextNode.getChildren(), dept + 1);
	                            result[dept] = node;
	                        }
	                        else {
	                            if (node === column) {
	                                found = true;
	                            }
	                        }
	                    }
	                }
	            };
	            return DisplayedGroupCreator;
	        })();
	        grid.DisplayedGroupCreator = DisplayedGroupCreator;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="./originalColumnGroupChild.ts"/>
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var OriginalColumnGroup = (function () {
	            function OriginalColumnGroup(colGroupDef, groupId) {
	                this.colGroupDef = colGroupDef;
	                this.groupId = groupId;
	            }
	            OriginalColumnGroup.prototype.getGroupId = function () {
	                return this.groupId;
	            };
	            OriginalColumnGroup.prototype.setChildren = function (children) {
	                this.children = children;
	            };
	            OriginalColumnGroup.prototype.getChildren = function () {
	                return this.children;
	            };
	            OriginalColumnGroup.prototype.getColGroupDef = function () {
	                return this.colGroupDef;
	            };
	            return OriginalColumnGroup;
	        })();
	        grid.OriginalColumnGroup = OriginalColumnGroup;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        // class returns a unique id to use for the column. it checks the existing columns, and if the requested
	        // id is already taken, it will start appending numbers until it gets a unique id.
	        // eg, if the col field is 'name', it will try ids: {name, name_1, name_2...}
	        // if no field or id provided in the col, it will try the ids of natural numbers
	        var ColumnKeyCreator = (function () {
	            function ColumnKeyCreator() {
	                this.existingKeys = [];
	            }
	            ColumnKeyCreator.prototype.getUniqueKey = function (colId, colField) {
	                var count = 0;
	                while (true) {
	                    var idToTry;
	                    if (colId) {
	                        idToTry = colId;
	                        if (count !== 0) {
	                            idToTry += '_' + count;
	                        }
	                    }
	                    else if (colField) {
	                        idToTry = colField;
	                        if (count !== 0) {
	                            idToTry += '_' + count;
	                        }
	                    }
	                    else {
	                        idToTry = '' + count;
	                    }
	                    if (this.existingKeys.indexOf(idToTry) < 0) {
	                        this.existingKeys.push(idToTry);
	                        return idToTry;
	                    }
	                    count++;
	                }
	            };
	            return ColumnKeyCreator;
	        })();
	        grid.ColumnKeyCreator = ColumnKeyCreator;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path='../entities/colDef.ts'/>
	/// <reference path='../entities/column.ts'/>
	/// <reference path='../entities/originalColumnGroup.ts'/>
	/// <reference path='../logger.ts'/>
	/// <reference path='columnKeyCreator.ts'/>
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        // takes in a list of columns, as specified by the column definitions, and returns column groups
	        var BalancedColumnTreeBuilder = (function () {
	            function BalancedColumnTreeBuilder() {
	            }
	            BalancedColumnTreeBuilder.prototype.init = function (gridOptionsWrapper, loggerFactory, columnUtils) {
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.columnUtils = columnUtils;
	                this.logger = loggerFactory.create('BalancedColumnTreeBuilder');
	            };
	            BalancedColumnTreeBuilder.prototype.createBalancedColumnGroups = function (abstractColDefs) {
	                // column key creator dishes out unique column id's in a deterministic way,
	                // so if we have two grids (that cold be master/slave) with same column definitions,
	                // then this ensures the two grids use identical id's.
	                var columnKeyCreator = new grid.ColumnKeyCreator();
	                // create am unbalanced tree that maps the provided definitions
	                var unbalancedTree = this.recursivelyCreateColumns(abstractColDefs, 0, columnKeyCreator);
	                var treeDept = this.findMaxDept(unbalancedTree, 0);
	                this.logger.log('Number of levels for grouped columns is ' + treeDept);
	                var balancedTree = this.balanceColumnTree(unbalancedTree, 0, treeDept, columnKeyCreator);
	                return {
	                    balancedTree: balancedTree,
	                    treeDept: treeDept
	                };
	            };
	            BalancedColumnTreeBuilder.prototype.balanceColumnTree = function (unbalancedTree, currentDept, columnDept, columnKeyCreator) {
	                var _this = this;
	                var result = [];
	                // go through each child, for groups, recurse a level deeper,
	                // for columns we need to pad
	                unbalancedTree.forEach(function (child) {
	                    if (child instanceof grid.OriginalColumnGroup) {
	                        var originalGroup = child;
	                        var newChildren = _this.balanceColumnTree(originalGroup.getChildren(), currentDept + 1, columnDept, columnKeyCreator);
	                        originalGroup.setChildren(newChildren);
	                        result.push(originalGroup);
	                    }
	                    else {
	                        var newChild = child;
	                        for (var i = columnDept - 1; i >= currentDept; i--) {
	                            var newColId = columnKeyCreator.getUniqueKey(null, null);
	                            var paddedGroup = new grid.OriginalColumnGroup(null, newColId);
	                            paddedGroup.setChildren([newChild]);
	                            newChild = paddedGroup;
	                        }
	                        result.push(newChild);
	                    }
	                });
	                return result;
	            };
	            BalancedColumnTreeBuilder.prototype.findMaxDept = function (treeChildren, dept) {
	                var maxDeptThisLevel = dept;
	                for (var i = 0; i < treeChildren.length; i++) {
	                    var abstractColumn = treeChildren[i];
	                    if (abstractColumn instanceof grid.OriginalColumnGroup) {
	                        var originalGroup = abstractColumn;
	                        var newDept = this.findMaxDept(originalGroup.getChildren(), dept + 1);
	                        if (maxDeptThisLevel < newDept) {
	                            maxDeptThisLevel = newDept;
	                        }
	                    }
	                }
	                return maxDeptThisLevel;
	            };
	            BalancedColumnTreeBuilder.prototype.recursivelyCreateColumns = function (abstractColDefs, level, columnKeyCreator) {
	                var _this = this;
	                var result = [];
	                if (!abstractColDefs) {
	                    return result;
	                }
	                abstractColDefs.forEach(function (abstractColDef) {
	                    _this.checkForDeprecatedItems(abstractColDef);
	                    if (_this.isColumnGroup(abstractColDef)) {
	                        var groupColDef = abstractColDef;
	                        var groupId = columnKeyCreator.getUniqueKey(groupColDef.groupId, null);
	                        var originalGroup = new grid.OriginalColumnGroup(groupColDef, groupId);
	                        var children = _this.recursivelyCreateColumns(groupColDef.children, level + 1, columnKeyCreator);
	                        originalGroup.setChildren(children);
	                        result.push(originalGroup);
	                    }
	                    else {
	                        var colDef = abstractColDef;
	                        var width = _this.columnUtils.calculateColInitialWidth(colDef);
	                        var colId = columnKeyCreator.getUniqueKey(colDef.colId, colDef.field);
	                        var column = new grid.Column(colDef, width, colId);
	                        result.push(column);
	                    }
	                });
	                return result;
	            };
	            BalancedColumnTreeBuilder.prototype.checkForDeprecatedItems = function (colDef) {
	                if (colDef) {
	                    var colDefNoType = colDef; // take out the type, so we can access attributes not defined in the type
	                    if (colDefNoType.group !== undefined) {
	                        console.warn('ag-grid: colDef.group is invalid, please check documentation on how to do grouping as it changed in version 3');
	                    }
	                    if (colDefNoType.headerGroup !== undefined) {
	                        console.warn('ag-grid: colDef.headerGroup is invalid, please check documentation on how to do grouping as it changed in version 3');
	                    }
	                    if (colDefNoType.headerGroupShow !== undefined) {
	                        console.warn('ag-grid: colDef.headerGroupShow is invalid, should be columnGroupShow, please check documentation on how to do grouping as it changed in version 3');
	                    }
	                }
	            };
	            // if object has children, we assume it's a group
	            BalancedColumnTreeBuilder.prototype.isColumnGroup = function (abstractColDef) {
	                return abstractColDef.children !== undefined;
	            };
	            return BalancedColumnTreeBuilder;
	        })();
	        grid.BalancedColumnTreeBuilder = BalancedColumnTreeBuilder;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var AutoWidthCalculator = (function () {
	            function AutoWidthCalculator() {
	            }
	            AutoWidthCalculator.prototype.init = function (rowRenderer, gridPanel) {
	                this.gridPanel = gridPanel;
	                this.rowRenderer = rowRenderer;
	            };
	            // this is the trick: we create a dummy container and clone all the cells
	            // into the dummy, then check the dummy's width. then destroy the dummy
	            // as we don't need it any more.
	            // drawback: only the cells visible on the screen are considered
	            AutoWidthCalculator.prototype.getPreferredWidthForColumn = function (column) {
	                var eDummyContainer = document.createElement('span');
	                // position fixed, so it isn't restricted to the boundaries of the parent
	                eDummyContainer.style.position = 'fixed';
	                eDummyContainer.style.backgroundColor = 'red';
	                // we put the dummy into the body container, so it will inherit all the
	                // css styles that the real cells are inheriting
	                var eBodyContainer = this.gridPanel.getBodyContainer();
	                eBodyContainer.appendChild(eDummyContainer);
	                // get all the cells that are currently displayed (this only brings back
	                // rendered cells, rows not rendered due to row visualisation will not be here)
	                var eOriginalCells = this.rowRenderer.getAllCellsForColumn(column);
	                eOriginalCells.forEach(function (eCell, index) {
	                    // make a deep clone of the cell
	                    var eCellClone = eCell.cloneNode(true);
	                    // the original has a fixed width, we remove this to allow the natural width based on content
	                    eCellClone.style.width = '';
	                    // we put the cell into a containing div, as otherwise the cells would just line up
	                    // on the same line, standard flow layout, by putting them into divs, they are laid
	                    // out one per line
	                    var eCloneParent = document.createElement('div');
	                    // table-row, so that each cell is on a row. i also tried display='block', but this
	                    // didn't work in IE
	                    eCloneParent.style.display = 'table-row';
	                    // the twig on the branch, the branch on the tree, the tree in the hole,
	                    // the hole in the bog, the bog in the clone, the clone in the parent,
	                    // the parent in the dummy, and the dummy down in the vall-e-ooo, OOOOOOOOO! Oh row the rattling bog....
	                    eCloneParent.appendChild(eCellClone);
	                    eDummyContainer.appendChild(eCloneParent);
	                });
	                // at this point, all the clones are lined up vertically with natural widths. the dummy
	                // container will have a width wide enough just to fit the largest.
	                var dummyContainerWidth = eDummyContainer.offsetWidth;
	                // we are finished with the dummy container, so get rid of it
	                eBodyContainer.removeChild(eDummyContainer);
	                // we add 4 as I found without it, the gui still put '...' after some of the texts
	                return dummyContainerWidth + 4;
	            };
	            return AutoWidthCalculator;
	        })();
	        grid.AutoWidthCalculator = AutoWidthCalculator;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/// <reference path="../constants.ts" />
	/// <reference path="../entities/column.ts" />
	/// <reference path="../entities/columnGroup.ts" />
	/// <reference path="../columnChangeEvent.ts" />
	/// <reference path="../masterSlaveService.ts" />
	/// <reference path="./displayedGroupCreator.ts" />
	/// <reference path="./balancedColumnTreeBuilder.ts" />
	/// <reference path="../rendering/autoWidthCalculator.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var constants = grid.Constants;
	        var ColumnApi = (function () {
	            function ColumnApi(_columnController) {
	                this._columnController = _columnController;
	            }
	            ColumnApi.prototype.sizeColumnsToFit = function (gridWidth) { this._columnController.sizeColumnsToFit(gridWidth); };
	            ColumnApi.prototype.setColumnGroupOpened = function (group, newValue, instanceId) { this._columnController.setColumnGroupOpened(group, newValue, instanceId); };
	            ColumnApi.prototype.getColumnGroup = function (name, instanceId) { return this._columnController.getColumnGroup(name, instanceId); };
	            ColumnApi.prototype.getDisplayNameForCol = function (column) { return this._columnController.getDisplayNameForCol(column); };
	            ColumnApi.prototype.getColumn = function (key) { return this._columnController.getColumn(key); };
	            ColumnApi.prototype.setState = function (columnState) { return this._columnController.setState(columnState); };
	            ColumnApi.prototype.getState = function () { return this._columnController.getState(); };
	            ColumnApi.prototype.resetState = function () { this._columnController.resetState(); };
	            ColumnApi.prototype.isPinning = function () { return this._columnController.isPinningLeft() || this._columnController.isPinningRight(); };
	            ColumnApi.prototype.isPinningLeft = function () { return this._columnController.isPinningLeft(); };
	            ColumnApi.prototype.isPinningRight = function () { return this._columnController.isPinningRight(); };
	            ColumnApi.prototype.getDisplayedColAfter = function (col) { return this._columnController.getDisplayedColAfter(col); };
	            ColumnApi.prototype.getDisplayedColBefore = function (col) { return this._columnController.getDisplayedColBefore(col); };
	            ColumnApi.prototype.setColumnVisible = function (key, visible) { this._columnController.setColumnVisible(key, visible); };
	            ColumnApi.prototype.setColumnsVisible = function (keys, visible) { this._columnController.setColumnsVisible(keys, visible); };
	            ColumnApi.prototype.setColumnPinned = function (key, pinned) { this._columnController.setColumnPinned(key, pinned); };
	            ColumnApi.prototype.setColumnsPinned = function (keys, pinned) { this._columnController.setColumnsPinned(keys, pinned); };
	            ColumnApi.prototype.getAllColumns = function () { return this._columnController.getAllColumns(); };
	            ColumnApi.prototype.getDisplayedLeftColumns = function () { return this._columnController.getDisplayedLeftColumns(); };
	            ColumnApi.prototype.getDisplayedCenterColumns = function () { return this._columnController.getDisplayedCenterColumns(); };
	            ColumnApi.prototype.getDisplayedRightColumns = function () { return this._columnController.getDisplayedRightColumns(); };
	            ColumnApi.prototype.getRowGroupColumns = function () { return this._columnController.getRowGroupColumns(); };
	            ColumnApi.prototype.getValueColumns = function () { return this._columnController.getValueColumns(); };
	            ColumnApi.prototype.moveColumn = function (fromIndex, toIndex) { this._columnController.moveColumn(fromIndex, toIndex); };
	            ColumnApi.prototype.moveRowGroupColumn = function (fromIndex, toIndex) { this._columnController.moveRowGroupColumn(fromIndex, toIndex); };
	            ColumnApi.prototype.setColumnAggFunction = function (column, aggFunc) { this._columnController.setColumnAggFunction(column, aggFunc); };
	            ColumnApi.prototype.setColumnWidth = function (key, newWidth, finished) {
	                if (finished === void 0) { finished = true; }
	                this._columnController.setColumnWidth(key, newWidth, finished);
	            };
	            ColumnApi.prototype.removeValueColumn = function (column) { this._columnController.removeValueColumn(column); };
	            ColumnApi.prototype.addValueColumn = function (column) { this._columnController.addValueColumn(column); };
	            ColumnApi.prototype.removeRowGroupColumn = function (column) { this._columnController.removeRowGroupColumn(column); };
	            ColumnApi.prototype.addRowGroupColumn = function (column) { this._columnController.addRowGroupColumn(column); };
	            ColumnApi.prototype.getLeftDisplayedColumnGroups = function () { return this._columnController.getLeftDisplayedColumnGroups(); };
	            ColumnApi.prototype.getCenterDisplayedColumnGroups = function () { return this._columnController.getCenterDisplayedColumnGroups(); };
	            ColumnApi.prototype.getRightDisplayedColumnGroups = function () { return this._columnController.getRightDisplayedColumnGroups(); };
	            ColumnApi.prototype.getAllDisplayedColumnGroups = function () { return this._columnController.getAllDisplayedColumnGroups(); };
	            ColumnApi.prototype.autoSizeColumn = function (key) { return this._columnController.autoSizeColumn(key); };
	            ColumnApi.prototype.autoSizeColumns = function (keys) { return this._columnController.autoSizeColumns(keys); };
	            ColumnApi.prototype.columnGroupOpened = function (group, newValue) {
	                console.error('ag-Grid: columnGroupOpened no longer exists, use setColumnGroupOpened');
	                this.setColumnGroupOpened(group, newValue);
	            };
	            ColumnApi.prototype.hideColumns = function (colIds, hide) {
	                console.error('ag-Grid: hideColumns is deprecated, use setColumnsVisible');
	                this._columnController.setColumnsVisible(colIds, !hide);
	            };
	            ColumnApi.prototype.hideColumn = function (colId, hide) {
	                console.error('ag-Grid: hideColumn is deprecated, use setColumnVisible');
	                this._columnController.setColumnVisible(colId, !hide);
	            };
	            return ColumnApi;
	        })();
	        grid.ColumnApi = ColumnApi;
	        var ColumnController = (function () {
	            function ColumnController() {
	                this.headerRowCount = 0;
	                this.setupComplete = false;
	            }
	            ColumnController.prototype.init = function (angularGrid, selectionRendererFactory, gridOptionsWrapper, expressionService, valueService, masterSlaveController, eventService, balancedColumnTreeBuilder, displayedGroupCreator, columnUtils, autoWidthCalculator, loggerFactory) {
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.angularGrid = angularGrid;
	                this.selectionRendererFactory = selectionRendererFactory;
	                this.expressionService = expressionService;
	                this.valueService = valueService;
	                this.masterSlaveController = masterSlaveController;
	                this.eventService = eventService;
	                this.balancedColumnTreeBuilder = balancedColumnTreeBuilder;
	                this.displayedGroupCreator = displayedGroupCreator;
	                this.columnUtils = columnUtils;
	                this.autoWidthCalculator = autoWidthCalculator;
	                this.logger = loggerFactory.create('ColumnController');
	            };
	            ColumnController.prototype.autoSizeColumns = function (keys) {
	                var _this = this;
	                this.actionOnColumns(keys, function (column) {
	                    var requiredWidth = _this.autoWidthCalculator.getPreferredWidthForColumn(column);
	                    if (requiredWidth > 0) {
	                        var newWidth = _this.normaliseColumnWidth(column, requiredWidth);
	                        column.setActualWidth(newWidth);
	                    }
	                }, function () {
	                    return new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_RESIZED).withFinished(true);
	                });
	            };
	            ColumnController.prototype.autoSizeColumn = function (key) {
	                this.autoSizeColumns([key]);
	            };
	            ColumnController.prototype.getColumnsFromTree = function (rootColumns) {
	                var result = [];
	                recursiveFindColumns(rootColumns);
	                return result;
	                function recursiveFindColumns(childColumns) {
	                    for (var i = 0; i < childColumns.length; i++) {
	                        var child = childColumns[i];
	                        if (child instanceof grid.Column) {
	                            result.push(child);
	                        }
	                        else if (child instanceof grid.OriginalColumnGroup) {
	                            recursiveFindColumns(child.getChildren());
	                        }
	                    }
	                }
	            };
	            ColumnController.prototype.getAllDisplayedColumnGroups = function () {
	                if (this.displayedLeftColumnTree && this.displayedRightColumnTree && this.displayedCentreColumnTree) {
	                    return this.displayedLeftColumnTree
	                        .concat(this.displayedCentreColumnTree)
	                        .concat(this.displayedRightColumnTree);
	                }
	                else {
	                    return null;
	                }
	            };
	            ColumnController.prototype.getColumnApi = function () {
	                return new ColumnApi(this);
	            };
	            ColumnController.prototype.isSetupComplete = function () {
	                return this.setupComplete;
	            };
	            // + gridPanel -> for resizing the body and setting top margin
	            ColumnController.prototype.getHeaderRowCount = function () {
	                return this.headerRowCount;
	            };
	            // + headerRenderer -> setting pinned body width
	            ColumnController.prototype.getLeftDisplayedColumnGroups = function () {
	                return this.displayedLeftColumnTree;
	            };
	            // + headerRenderer -> setting pinned body width
	            ColumnController.prototype.getRightDisplayedColumnGroups = function () {
	                return this.displayedRightColumnTree;
	            };
	            // + headerRenderer -> setting pinned body width
	            ColumnController.prototype.getCenterDisplayedColumnGroups = function () {
	                return this.displayedCentreColumnTree;
	            };
	            // + csvCreator
	            ColumnController.prototype.getAllDisplayedColumns = function () {
	                // order we add the arrays together is important, so the result
	                // has the columns left to right, as they appear on the screen.
	                return this.displayedLeftColumns
	                    .concat(this.displayedCenterColumns)
	                    .concat(this.displayedRightColumns);
	            };
	            // used by:
	            // + angularGrid -> setting pinned body width
	            ColumnController.prototype.getPinnedLeftContainerWidth = function () {
	                return this.getWithOfColsInList(this.displayedLeftColumns);
	            };
	            ColumnController.prototype.getPinnedRightContainerWidth = function () {
	                return this.getWithOfColsInList(this.displayedRightColumns);
	            };
	            ColumnController.prototype.addRowGroupColumn = function (column) {
	                if (this.allColumns.indexOf(column) < 0) {
	                    console.warn('not a valid column: ' + column);
	                    return;
	                }
	                if (this.rowGroupColumns.indexOf(column) >= 0) {
	                    console.warn('column is already a value column');
	                    return;
	                }
	                this.rowGroupColumns.push(column);
	                // because we could be taking out columns, the displayed
	                // columns may differ, so need to work out all the columns again
	                this.updateModel();
	                var event = new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE);
	                this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE, event);
	            };
	            ColumnController.prototype.removeRowGroupColumn = function (column) {
	                if (this.rowGroupColumns.indexOf(column) < 0) {
	                    console.warn('column not a row group');
	                    return;
	                }
	                _.removeFromArray(this.rowGroupColumns, column);
	                this.updateModel();
	                var event = new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE);
	                this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE, event);
	            };
	            ColumnController.prototype.addValueColumn = function (column) {
	                if (this.allColumns.indexOf(column) < 0) {
	                    console.warn('not a valid column: ' + column);
	                    return;
	                }
	                if (this.valueColumns.indexOf(column) >= 0) {
	                    console.warn('column is already a value column');
	                    return;
	                }
	                if (!column.getAggFunc()) {
	                    column.setAggFunc(grid.Column.AGG_SUM);
	                }
	                this.valueColumns.push(column);
	                var event = new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_VALUE_CHANGE);
	                this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_VALUE_CHANGE, event);
	            };
	            ColumnController.prototype.removeValueColumn = function (column) {
	                if (this.valueColumns.indexOf(column) < 0) {
	                    console.warn('column not a value');
	                    return;
	                }
	                _.removeFromArray(this.valueColumns, column);
	                var event = new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_VALUE_CHANGE);
	                this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_VALUE_CHANGE, event);
	            };
	            ColumnController.prototype.doesColumnExistInGrid = function (column) {
	                var columnInAllColumns = this.allColumns.indexOf(column) >= 0;
	                var columnIsGroupAutoColumn = column === this.groupAutoColumn;
	                return columnInAllColumns || columnIsGroupAutoColumn;
	            };
	            ColumnController.prototype.getFirstRightPinnedColIndex = function () {
	                return this.displayedLeftColumns.length + this.displayedCenterColumns.length;
	            };
	            // returns the widht we can set to this col, taking into consideration min and max widths
	            ColumnController.prototype.normaliseColumnWidth = function (column, newWidth) {
	                if (newWidth < column.getMinimumWidth()) {
	                    newWidth = column.getMinimumWidth();
	                }
	                if (column.isGreaterThanMax(newWidth)) {
	                    newWidth = column.getColDef().maxWidth;
	                }
	                return newWidth;
	            };
	            ColumnController.prototype.setColumnWidth = function (key, newWidth, finished) {
	                var column = this.getColumn(key);
	                if (!column) {
	                    return;
	                }
	                newWidth = this.normaliseColumnWidth(column, newWidth);
	                // check for change first, to avoid unnecessary firing of events
	                // however we always fire 'finished' events. this is important
	                // when groups are resized, as if the group is changing slowly,
	                // eg 1 pixel at a time, then each change will fire change events
	                // in all the columns in the group, but only one with get the pixel.
	                if (finished || column.getActualWidth() !== newWidth) {
	                    column.setActualWidth(newWidth);
	                    var event = new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_RESIZED).withColumn(column).withFinished(finished);
	                    this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_RESIZED, event);
	                }
	            };
	            ColumnController.prototype.setColumnAggFunction = function (column, aggFunc) {
	                column.setAggFunc(aggFunc);
	                var event = new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_VALUE_CHANGE);
	                this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_VALUE_CHANGE, event);
	            };
	            ColumnController.prototype.moveRowGroupColumn = function (fromIndex, toIndex) {
	                var column = this.rowGroupColumns[fromIndex];
	                this.rowGroupColumns.splice(fromIndex, 1);
	                this.rowGroupColumns.splice(toIndex, 0, column);
	                var event = new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE);
	                this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE, event);
	            };
	            ColumnController.prototype.moveColumn = function (fromIndex, toIndex) {
	                var column = this.allColumns[fromIndex];
	                this.allColumns.splice(fromIndex, 1);
	                this.allColumns.splice(toIndex, 0, column);
	                this.updateModel();
	                var event = new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_MOVED)
	                    .withFromIndex(fromIndex)
	                    .withToIndex(toIndex);
	                this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_MOVED, event);
	            };
	            // used by:
	            // + angularGrid -> for setting body width
	            // + rowController -> setting main row widths (when inserting and resizing)
	            ColumnController.prototype.getBodyContainerWidth = function () {
	                var result = this.getWithOfColsInList(this.displayedCenterColumns);
	                return result;
	            };
	            // + rowController
	            ColumnController.prototype.getValueColumns = function () {
	                return this.valueColumns;
	            };
	            // + toolPanel
	            ColumnController.prototype.getRowGroupColumns = function () {
	                return this.rowGroupColumns;
	            };
	            // + rowController -> while inserting rows
	            ColumnController.prototype.getDisplayedCenterColumns = function () {
	                return this.displayedCenterColumns;
	            };
	            // + rowController -> while inserting rows
	            ColumnController.prototype.getDisplayedLeftColumns = function () {
	                return this.displayedLeftColumns;
	            };
	            ColumnController.prototype.getDisplayedRightColumns = function () {
	                return this.displayedRightColumns;
	            };
	            // used by:
	            // + inMemoryRowController -> sorting, building quick filter text
	            // + headerRenderer -> sorting (clearing icon)
	            ColumnController.prototype.getAllColumns = function () {
	                return this.allColumns;
	            };
	            ColumnController.prototype.setColumnVisible = function (key, visible) {
	                this.setColumnsVisible([key], visible);
	            };
	            ColumnController.prototype.setColumnsVisible = function (keys, visible) {
	                this.actionOnColumns(keys, function (column) {
	                    column.setVisible(visible);
	                }, function () {
	                    return new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_VISIBLE).withVisible(visible);
	                });
	            };
	            ColumnController.prototype.setColumnPinned = function (key, pinned) {
	                this.setColumnsPinned([key], pinned);
	            };
	            ColumnController.prototype.setColumnsPinned = function (keys, pinned) {
	                var actualPinned;
	                if (pinned === true || pinned === grid.Column.PINNED_LEFT) {
	                    actualPinned = grid.Column.PINNED_LEFT;
	                }
	                else if (pinned === grid.Column.PINNED_RIGHT) {
	                    actualPinned = grid.Column.PINNED_RIGHT;
	                }
	                else {
	                    actualPinned = null;
	                }
	                this.actionOnColumns(keys, function (column) {
	                    column.setPinned(actualPinned);
	                }, function () {
	                    return new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_PINNED).withPinned(actualPinned);
	                });
	            };
	            // does an action on a set of columns. provides common functionality for looking up the
	            // columns based on key, getting a list of effected columns, and then updated the event
	            // with either one column (if it was just one col) or a list of columns
	            ColumnController.prototype.actionOnColumns = function (keys, action, createEvent) {
	                var _this = this;
	                if (!keys || keys.length === 0) {
	                    return;
	                }
	                var updatedColumns = [];
	                keys.forEach(function (key) {
	                    var column = _this.getColumn(key);
	                    if (!column) {
	                        return;
	                    }
	                    action(column);
	                    updatedColumns.push(column);
	                });
	                if (updatedColumns.length === 0) {
	                    return;
	                }
	                this.updateModel();
	                var event = createEvent();
	                event.withColumns(updatedColumns);
	                if (updatedColumns.length === 1) {
	                    event.withColumn(updatedColumns[0]);
	                }
	                this.eventService.dispatchEvent(event.getType(), event);
	            };
	            ColumnController.prototype.getDisplayedColBefore = function (col) {
	                var allDisplayedColumns = this.getAllDisplayedColumns();
	                var oldIndex = allDisplayedColumns.indexOf(col);
	                if (oldIndex > 0) {
	                    return allDisplayedColumns[oldIndex - 1];
	                }
	                else {
	                    return null;
	                }
	            };
	            // used by:
	            // + rowRenderer -> for navigation
	            ColumnController.prototype.getDisplayedColAfter = function (col) {
	                var allDisplayedColumns = this.getAllDisplayedColumns();
	                var oldIndex = allDisplayedColumns.indexOf(col);
	                if (oldIndex < (allDisplayedColumns.length - 1)) {
	                    return allDisplayedColumns[oldIndex + 1];
	                }
	                else {
	                    return null;
	                }
	            };
	            ColumnController.prototype.isPinningLeft = function () {
	                return this.displayedLeftColumns.length > 0;
	            };
	            ColumnController.prototype.isPinningRight = function () {
	                return this.displayedRightColumns.length > 0;
	            };
	            ColumnController.prototype.getState = function () {
	                if (!this.allColumns || this.allColumns.length < 0) {
	                    return [];
	                }
	                var result = [];
	                for (var i = 0; i < this.allColumns.length; i++) {
	                    var column = this.allColumns[i];
	                    var rowGroupIndex = this.rowGroupColumns.indexOf(column);
	                    var resultItem = {
	                        colId: column.getColId(),
	                        hide: !column.isVisible(),
	                        aggFunc: column.getAggFunc() ? column.getAggFunc() : null,
	                        width: column.getActualWidth(),
	                        pinned: column.getPinned(),
	                        rowGroupIndex: rowGroupIndex >= 0 ? rowGroupIndex : null
	                    };
	                    result.push(resultItem);
	                }
	                return result;
	            };
	            ColumnController.prototype.resetState = function () {
	                // we can't use 'allColumns' as the order might of messed up, so get the original ordered list
	                var originalColumns = this.allColumns = this.getColumnsFromTree(this.originalBalancedTree);
	                var state = [];
	                if (originalColumns) {
	                    originalColumns.forEach(function (column) {
	                        state.push({
	                            colId: column.getColId(),
	                            aggFunc: column.getColDef().aggFunc,
	                            hide: column.getColDef().hide,
	                            pinned: column.getColDef().pinned,
	                            rowGroupIndex: column.getColDef().rowGroupIndex,
	                            width: column.getColDef().width
	                        });
	                    });
	                }
	                this.setState(state);
	            };
	            ColumnController.prototype.setState = function (columnState) {
	                var _this = this;
	                var oldColumnList = this.allColumns;
	                this.allColumns = [];
	                this.rowGroupColumns = [];
	                this.valueColumns = [];
	                if (columnState) {
	                    columnState.forEach(function (stateItem) {
	                        var oldColumn = _.find(oldColumnList, 'colId', stateItem.colId);
	                        if (!oldColumn) {
	                            console.warn('ag-grid: column ' + stateItem.colId + ' not found');
	                            return;
	                        }
	                        // following ensures we are left with boolean true or false, eg converts (null, undefined, 0) all to true
	                        oldColumn.setVisible(!stateItem.hide);
	                        // sets pinned to 'left' or 'right'
	                        oldColumn.setPinned(stateItem.pinned === true);
	                        // if width provided and valid, use it, otherwise stick with the old width
	                        if (stateItem.width >= constants.MIN_COL_WIDTH) {
	                            oldColumn.setActualWidth(stateItem.width);
	                        }
	                        // accept agg func only if valid
	                        var aggFuncValid = [grid.Column.AGG_MIN, grid.Column.AGG_MAX, grid.Column.AGG_SUM].indexOf(stateItem.aggFunc) >= 0;
	                        if (aggFuncValid) {
	                            oldColumn.setAggFunc(stateItem.aggFunc);
	                            _this.valueColumns.push(oldColumn);
	                        }
	                        else {
	                            oldColumn.setAggFunc(null);
	                        }
	                        // if rowGroup
	                        if (typeof stateItem.rowGroupIndex === 'number' && stateItem.rowGroupIndex >= 0) {
	                            _this.rowGroupColumns.push(oldColumn);
	                        }
	                        _this.allColumns.push(oldColumn);
	                        oldColumnList.splice(oldColumnList.indexOf(oldColumn), 1);
	                    });
	                }
	                // anything left over, we got no data for, so add in the column as non-value, non-rowGroup and hidden
	                oldColumnList.forEach(function (oldColumn) {
	                    oldColumn.setVisible(false);
	                    oldColumn.setAggFunc(null);
	                    oldColumn.setPinned(null);
	                    _this.allColumns.push(oldColumn);
	                });
	                // sort the row group columns
	                this.rowGroupColumns.sort(function (colA, colB) {
	                    var rowGroupIndexA = -1;
	                    var rowGroupIndexB = -1;
	                    for (var i = 0; i < columnState.length; i++) {
	                        var state = columnState[i];
	                        if (state.colId === colA.getColId()) {
	                            rowGroupIndexA = state.rowGroupIndex;
	                        }
	                        if (state.colId === colB.getColId()) {
	                            rowGroupIndexB = state.rowGroupIndex;
	                        }
	                    }
	                    return rowGroupIndexA - rowGroupIndexB;
	                });
	                this.updateModel();
	                var event = new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED);
	                this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED, event);
	            };
	            ColumnController.prototype.getColumns = function (keys) {
	                var _this = this;
	                var foundColumns = [];
	                if (keys) {
	                    keys.forEach(function (key) {
	                        var column = _this.getColumn(key);
	                        if (column) {
	                            foundColumns.push(column);
	                        }
	                    });
	                }
	                return foundColumns;
	            };
	            ColumnController.prototype.getColumn = function (key) {
	                if (!key) {
	                    return null;
	                }
	                for (var i = 0; i < this.allColumns.length; i++) {
	                    if (colMatches(this.allColumns[i])) {
	                        return this.allColumns[i];
	                    }
	                }
	                if (this.groupAutoColumn && colMatches(this.groupAutoColumn)) {
	                    return this.groupAutoColumn;
	                }
	                function colMatches(column) {
	                    var columnMatches = column === key;
	                    var colDefMatches = column.getColDef() === key;
	                    var idMatches = column.getColId() === key;
	                    return columnMatches || colDefMatches || idMatches;
	                }
	                console.log('could not find column for key ' + key);
	                return null;
	            };
	            ColumnController.prototype.getDisplayNameForCol = function (column) {
	                var colDef = column.colDef;
	                var headerValueGetter = colDef.headerValueGetter;
	                if (headerValueGetter) {
	                    var params = {
	                        colDef: colDef,
	                        api: this.gridOptionsWrapper.getApi(),
	                        context: this.gridOptionsWrapper.getContext()
	                    };
	                    if (typeof headerValueGetter === 'function') {
	                        // valueGetter is a function, so just call it
	                        return headerValueGetter(params);
	                    }
	                    else if (typeof headerValueGetter === 'string') {
	                        // valueGetter is an expression, so execute the expression
	                        return this.expressionService.evaluate(headerValueGetter, params);
	                    }
	                    else {
	                        console.warn('ag-grid: headerValueGetter must be a function or a string');
	                    }
	                }
	                else if (colDef.displayName) {
	                    console.warn("ag-grid: Found displayName " + colDef.displayName + ", please use headerName instead, displayName is deprecated.");
	                    return colDef.displayName;
	                }
	                else {
	                    return colDef.headerName;
	                }
	            };
	            // returns the group with matching colId and instanceId. If instanceId is missing,
	            // matches only on the colId.
	            ColumnController.prototype.getColumnGroup = function (colId, instanceId) {
	                if (!colId) {
	                    return null;
	                }
	                if (colId instanceof grid.ColumnGroup) {
	                    return colId;
	                }
	                var allColumnGroups = this.getAllDisplayedColumnGroups();
	                var checkInstanceId = typeof instanceId === 'number';
	                var result = null;
	                this.columnUtils.deptFirstAllColumnTreeSearch(allColumnGroups, function (child) {
	                    if (child instanceof grid.ColumnGroup) {
	                        var columnGroup = child;
	                        var matched;
	                        if (checkInstanceId) {
	                            matched = colId === columnGroup.getGroupId() && instanceId === columnGroup.getInstanceId();
	                        }
	                        else {
	                            matched = colId === columnGroup.getGroupId();
	                        }
	                        if (matched) {
	                            result = columnGroup;
	                        }
	                    }
	                });
	                return result;
	            };
	            // called by angularGrid
	            ColumnController.prototype.onColumnsChanged = function () {
	                var columnDefs = this.gridOptionsWrapper.getColumnDefs();
	                var balancedTreeResult = this.balancedColumnTreeBuilder.createBalancedColumnGroups(columnDefs);
	                this.originalBalancedTree = balancedTreeResult.balancedTree;
	                this.headerRowCount = balancedTreeResult.treeDept + 1;
	                this.allColumns = this.getColumnsFromTree(this.originalBalancedTree);
	                this.extractRowGroupColumns();
	                this.createValueColumns();
	                this.updateModel();
	                var event = new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED);
	                this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED, event);
	                this.setupComplete = true;
	            };
	            ColumnController.prototype.extractRowGroupColumns = function () {
	                var _this = this;
	                this.rowGroupColumns = [];
	                // pull out the columns
	                this.allColumns.forEach(function (column) {
	                    if (typeof column.getColDef().rowGroupIndex === 'number') {
	                        _this.rowGroupColumns.push(column);
	                    }
	                });
	                // then sort them
	                this.rowGroupColumns.sort(function (colA, colB) {
	                    return colA.getColDef().rowGroupIndex - colB.getColDef().rowGroupIndex;
	                });
	            };
	            // called by headerRenderer - when a header is opened or closed
	            ColumnController.prototype.setColumnGroupOpened = function (passedGroup, newValue, instanceId) {
	                var groupToUse = this.getColumnGroup(passedGroup, instanceId);
	                if (!groupToUse) {
	                    return;
	                }
	                this.logger.log('columnGroupOpened(' + groupToUse.getGroupId() + ',' + newValue + ')');
	                groupToUse.setExpanded(newValue);
	                this.updateGroupsAndDisplayedColumns();
	                var event = new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_GROUP_OPENED).withColumnGroup(groupToUse);
	                this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_GROUP_OPENED, event);
	            };
	            ColumnController.prototype.updateModel = function () {
	                // following 3 methods are only called from here
	                this.createGroupAutoColumn();
	                var visibleColumns = this.updateVisibleColumns();
	                // only called from here
	                this.buildAllGroups(visibleColumns);
	                // this is also called when a group is opened or closed
	                this.updateGroupsAndDisplayedColumns();
	            };
	            ColumnController.prototype.updateGroupsAndDisplayedColumns = function () {
	                this.updateGroups();
	                this.updateDisplayedColumnsFromGroups();
	            };
	            ColumnController.prototype.updateDisplayedColumnsFromGroups = function () {
	                var _this = this;
	                // if grouping, then only show col as per group rules
	                this.displayedLeftColumns = [];
	                this.displayedRightColumns = [];
	                this.displayedCenterColumns = [];
	                this.columnUtils.deptFirstDisplayedColumnTreeSearch(this.displayedLeftColumnTree, function (child) {
	                    if (child instanceof grid.Column) {
	                        _this.displayedLeftColumns.push(child);
	                    }
	                });
	                this.columnUtils.deptFirstDisplayedColumnTreeSearch(this.displayedRightColumnTree, function (child) {
	                    if (child instanceof grid.Column) {
	                        _this.displayedRightColumns.push(child);
	                    }
	                });
	                this.columnUtils.deptFirstDisplayedColumnTreeSearch(this.displayedCentreColumnTree, function (child) {
	                    if (child instanceof grid.Column) {
	                        _this.displayedCenterColumns.push(child);
	                    }
	                });
	            };
	            // called from api
	            ColumnController.prototype.sizeColumnsToFit = function (gridWidth) {
	                var _this = this;
	                // avoid divide by zero
	                var allDisplayedColumns = this.getAllDisplayedColumns();
	                if (gridWidth <= 0 || allDisplayedColumns.length === 0) {
	                    return;
	                }
	                var colsToNotSpread = _.filter(allDisplayedColumns, function (column) {
	                    return column.getColDef().suppressSizeToFit === true;
	                });
	                var colsToSpread = _.filter(allDisplayedColumns, function (column) {
	                    return column.getColDef().suppressSizeToFit !== true;
	                });
	                // make a copy of the cols that are going to be resized
	                var colsToFireEventFor = colsToSpread.slice(0);
	                var finishedResizing = false;
	                while (!finishedResizing) {
	                    finishedResizing = true;
	                    var availablePixels = gridWidth - getTotalWidth(colsToNotSpread);
	                    if (availablePixels <= 0) {
	                        // no width, set everything to minimum
	                        colsToSpread.forEach(function (column) {
	                            column.setMinimum();
	                        });
	                    }
	                    else {
	                        var scale = availablePixels / getTotalWidth(colsToSpread);
	                        // we set the pixels for the last col based on what's left, as otherwise
	                        // we could be a pixel or two short or extra because of rounding errors.
	                        var pixelsForLastCol = availablePixels;
	                        // backwards through loop, as we are removing items as we go
	                        for (var i = colsToSpread.length - 1; i >= 0; i--) {
	                            var column = colsToSpread[i];
	                            var newWidth = Math.round(column.getActualWidth() * scale);
	                            if (newWidth < column.getMinimumWidth()) {
	                                column.setMinimum();
	                                moveToNotSpread(column);
	                                finishedResizing = false;
	                            }
	                            else if (column.isGreaterThanMax(newWidth)) {
	                                column.setActualWidth(column.getColDef().maxWidth);
	                                moveToNotSpread(column);
	                                finishedResizing = false;
	                            }
	                            else {
	                                var onLastCol = i === 0;
	                                if (onLastCol) {
	                                    column.setActualWidth(pixelsForLastCol);
	                                }
	                                else {
	                                    pixelsForLastCol -= newWidth;
	                                    column.setActualWidth(newWidth);
	                                }
	                            }
	                        }
	                    }
	                }
	                // widths set, refresh the gui
	                colsToFireEventFor.forEach(function (column) {
	                    var event = new grid.ColumnChangeEvent(grid.Events.EVENT_COLUMN_RESIZED).withColumn(column);
	                    _this.eventService.dispatchEvent(grid.Events.EVENT_COLUMN_RESIZED, event);
	                });
	                function moveToNotSpread(column) {
	                    _.removeFromArray(colsToSpread, column);
	                    colsToNotSpread.push(column);
	                }
	                function getTotalWidth(columns) {
	                    var result = 0;
	                    for (var i = 0; i < columns.length; i++) {
	                        result += columns[i].getActualWidth();
	                    }
	                    return result;
	                }
	            };
	            ColumnController.prototype.buildAllGroups = function (visibleColumns) {
	                var leftVisibleColumns = _.filter(visibleColumns, function (column) {
	                    return column.getPinned() === 'left';
	                });
	                var rightVisibleColumns = _.filter(visibleColumns, function (column) {
	                    return column.getPinned() === 'right';
	                });
	                var centerVisibleColumns = _.filter(visibleColumns, function (column) {
	                    return column.getPinned() !== 'left' && column.getPinned() !== 'right';
	                });
	                var groupInstanceIdCreator = new grid.GroupInstanceIdCreator();
	                this.displayedLeftColumnTree = this.displayedGroupCreator.createDisplayedGroups(leftVisibleColumns, this.originalBalancedTree, groupInstanceIdCreator);
	                this.displayedRightColumnTree = this.displayedGroupCreator.createDisplayedGroups(rightVisibleColumns, this.originalBalancedTree, groupInstanceIdCreator);
	                this.displayedCentreColumnTree = this.displayedGroupCreator.createDisplayedGroups(centerVisibleColumns, this.originalBalancedTree, groupInstanceIdCreator);
	            };
	            ColumnController.prototype.updateGroups = function () {
	                var allGroups = this.getAllDisplayedColumnGroups();
	                this.columnUtils.deptFirstAllColumnTreeSearch(allGroups, function (child) {
	                    if (child instanceof grid.ColumnGroup) {
	                        var group = child;
	                        group.calculateDisplayedColumns();
	                    }
	                });
	            };
	            ColumnController.prototype.createGroupAutoColumn = function () {
	                // see if we need to insert the default grouping column
	                var needAGroupColumn = this.rowGroupColumns.length > 0
	                    && !this.gridOptionsWrapper.isGroupSuppressAutoColumn()
	                    && !this.gridOptionsWrapper.isGroupUseEntireRow()
	                    && !this.gridOptionsWrapper.isGroupSuppressRow();
	                if (needAGroupColumn) {
	                    // if one provided by user, use it, otherwise create one
	                    var groupColDef = this.gridOptionsWrapper.getGroupColumnDef();
	                    if (!groupColDef) {
	                        var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	                        groupColDef = {
	                            headerName: localeTextFunc('group', 'Group'),
	                            cellRenderer: {
	                                renderer: 'group'
	                            }
	                        };
	                    }
	                    var groupColumnWidth = this.columnUtils.calculateColInitialWidth(groupColDef);
	                    var colId = 'ag-Grid-AutoColumn';
	                    this.groupAutoColumn = new grid.Column(groupColDef, groupColumnWidth, colId);
	                }
	                else {
	                    this.groupAutoColumn = null;
	                }
	            };
	            ColumnController.prototype.updateVisibleColumns = function () {
	                var visibleColumns = [];
	                if (this.groupAutoColumn) {
	                    visibleColumns.push(this.groupAutoColumn);
	                }
	                for (var i = 0; i < this.allColumns.length; i++) {
	                    var column = this.allColumns[i];
	                    var hideBecauseOfRowGroup = this.rowGroupColumns.indexOf(column) >= 0
	                        && this.gridOptionsWrapper.isGroupHideGroupColumns();
	                    if (column.isVisible() && !hideBecauseOfRowGroup) {
	                        column.setIndex(visibleColumns.length);
	                        visibleColumns.push(this.allColumns[i]);
	                    }
	                }
	                return visibleColumns;
	            };
	            ColumnController.prototype.createValueColumns = function () {
	                this.valueColumns = [];
	                // override with columns that have the aggFunc specified explicitly
	                for (var i = 0; i < this.allColumns.length; i++) {
	                    var column = this.allColumns[i];
	                    if (column.getColDef().aggFunc) {
	                        column.setAggFunc(column.getColDef().aggFunc);
	                        this.valueColumns.push(column);
	                    }
	                }
	            };
	            ColumnController.prototype.getWithOfColsInList = function (columnList) {
	                var result = 0;
	                for (var i = 0; i < columnList.length; i++) {
	                    result += columnList[i].getActualWidth();
	                }
	                return result;
	            };
	            return ColumnController;
	        })();
	        grid.ColumnController = ColumnController;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var SVG_NS = "http://www.w3.org/2000/svg";
	        var SvgFactory = (function () {
	            function SvgFactory() {
	            }
	            SvgFactory.getInstance = function () {
	                if (!this.theInstance) {
	                    this.theInstance = new SvgFactory();
	                }
	                return this.theInstance;
	            };
	            SvgFactory.prototype.createFilterSvg = function () {
	                var eSvg = createIconSvg();
	                var eFunnel = document.createElementNS(SVG_NS, "polygon");
	                eFunnel.setAttribute("points", "0,0 4,4 4,10 6,10 6,4 10,0");
	                eFunnel.setAttribute("class", "ag-header-icon");
	                eSvg.appendChild(eFunnel);
	                return eSvg;
	            };
	            SvgFactory.prototype.createColumnShowingSvg = function () {
	                return createCircle(true);
	            };
	            SvgFactory.prototype.createColumnHiddenSvg = function () {
	                return createCircle(false);
	            };
	            SvgFactory.prototype.createMenuSvg = function () {
	                var eSvg = document.createElementNS(SVG_NS, "svg");
	                var size = "12";
	                eSvg.setAttribute("width", size);
	                eSvg.setAttribute("height", size);
	                ["0", "5", "10"].forEach(function (y) {
	                    var eLine = document.createElementNS(SVG_NS, "rect");
	                    eLine.setAttribute("y", y);
	                    eLine.setAttribute("width", size);
	                    eLine.setAttribute("height", "2");
	                    eLine.setAttribute("class", "ag-header-icon");
	                    eSvg.appendChild(eLine);
	                });
	                return eSvg;
	            };
	            SvgFactory.prototype.createArrowUpSvg = function () {
	                return createPolygonSvg("0,10 5,0 10,10");
	            };
	            SvgFactory.prototype.createArrowLeftSvg = function () {
	                return createPolygonSvg("10,0 0,5 10,10");
	            };
	            SvgFactory.prototype.createArrowDownSvg = function () {
	                return createPolygonSvg("0,0 5,10 10,0");
	            };
	            SvgFactory.prototype.createArrowRightSvg = function () {
	                return createPolygonSvg("0,0 10,5 0,10");
	            };
	            SvgFactory.prototype.createSmallArrowDownSvg = function () {
	                return createPolygonSvg("0,0 3,6 6,0", 6);
	            };
	            // UnSort Icon SVG
	            SvgFactory.prototype.createArrowUpDownSvg = function () {
	                var svg = createIconSvg();
	                var eAscIcon = document.createElementNS(SVG_NS, "polygon");
	                eAscIcon.setAttribute("points", '0,4 5,0 10,4');
	                svg.appendChild(eAscIcon);
	                var eDescIcon = document.createElementNS(SVG_NS, "polygon");
	                eDescIcon.setAttribute("points", '0,6 5,10 10,6');
	                svg.appendChild(eDescIcon);
	                return svg;
	            };
	            return SvgFactory;
	        })();
	        grid.SvgFactory = SvgFactory;
	        function createPolygonSvg(points, width) {
	            var eSvg = createIconSvg(width);
	            var eDescIcon = document.createElementNS(SVG_NS, "polygon");
	            eDescIcon.setAttribute("points", points);
	            eSvg.appendChild(eDescIcon);
	            return eSvg;
	        }
	        // util function for the above
	        function createIconSvg(width) {
	            var eSvg = document.createElementNS(SVG_NS, "svg");
	            if (width > 0) {
	                eSvg.setAttribute("width", width);
	                eSvg.setAttribute("height", width);
	            }
	            else {
	                eSvg.setAttribute("width", "10");
	                eSvg.setAttribute("height", "10");
	            }
	            return eSvg;
	        }
	        function createCircle(fill) {
	            var eSvg = createIconSvg();
	            var eCircle = document.createElementNS(SVG_NS, "circle");
	            eCircle.setAttribute("cx", "5");
	            eCircle.setAttribute("cy", "5");
	            eCircle.setAttribute("r", "5");
	            eCircle.setAttribute("stroke", "black");
	            eCircle.setAttribute("stroke-width", "2");
	            if (fill) {
	                eCircle.setAttribute("fill", "black");
	            }
	            else {
	                eCircle.setAttribute("fill", "none");
	            }
	            eSvg.appendChild(eCircle);
	            return eSvg;
	        }
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts"/>
	/// <reference path="../svgFactory.ts"/>
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var svgFactory = grid.SvgFactory.getInstance();
	        var HeaderTemplateLoader = (function () {
	            function HeaderTemplateLoader() {
	            }
	            HeaderTemplateLoader.prototype.init = function (gridOptionsWrapper) {
	                this.gridOptionsWrapper = gridOptionsWrapper;
	            };
	            HeaderTemplateLoader.prototype.createHeaderElement = function (column) {
	                var params = {
	                    column: column,
	                    colDef: column.getColDef,
	                    context: this.gridOptionsWrapper.getContext(),
	                    api: this.gridOptionsWrapper.getApi()
	                };
	                // option 1 - see if user provided a template in colDef
	                var userProvidedTemplate = column.getColDef().headerCellTemplate;
	                if (typeof userProvidedTemplate === 'function') {
	                    var colDefFunc = userProvidedTemplate;
	                    userProvidedTemplate = colDefFunc(params);
	                }
	                // option 2 - check the gridOptions for cellTemplate
	                if (!userProvidedTemplate && this.gridOptionsWrapper.getHeaderCellTemplate()) {
	                    userProvidedTemplate = this.gridOptionsWrapper.getHeaderCellTemplate();
	                }
	                // option 3 - check the gridOptions for templateFunction
	                if (!userProvidedTemplate && this.gridOptionsWrapper.getHeaderCellTemplateFunc()) {
	                    var gridOptionsFunc = this.gridOptionsWrapper.getHeaderCellTemplateFunc();
	                    userProvidedTemplate = gridOptionsFunc(params);
	                }
	                // finally, if still no template, use the default
	                if (!userProvidedTemplate) {
	                    userProvidedTemplate = this.createDefaultHeaderElement(column);
	                }
	                // template can be a string or a dom element, if string we need to convert to a dom element
	                var result;
	                if (typeof userProvidedTemplate === 'string') {
	                    result = _.loadTemplate(userProvidedTemplate);
	                }
	                else if (_.isNodeOrElement(userProvidedTemplate)) {
	                    result = userProvidedTemplate;
	                }
	                else {
	                    console.error('ag-Grid: header template must be a string or an HTML element');
	                }
	                return result;
	            };
	            HeaderTemplateLoader.prototype.createDefaultHeaderElement = function (column) {
	                var eTemplate = _.loadTemplate(HeaderTemplateLoader.HEADER_CELL_TEMPLATE);
	                this.addInIcon(eTemplate, 'sortAscending', '#agSortAsc', column, svgFactory.createArrowUpSvg);
	                this.addInIcon(eTemplate, 'sortDescending', '#agSortDesc', column, svgFactory.createArrowDownSvg);
	                this.addInIcon(eTemplate, 'sortUnSort', '#agNoSort', column, svgFactory.createArrowUpDownSvg);
	                this.addInIcon(eTemplate, 'menu', '#agMenu', column, svgFactory.createMenuSvg);
	                this.addInIcon(eTemplate, 'filter', '#agFilter', column, svgFactory.createFilterSvg);
	                return eTemplate;
	            };
	            HeaderTemplateLoader.prototype.addInIcon = function (eTemplate, iconName, cssSelector, column, defaultIconFactory) {
	                var eIcon = _.createIconNoSpan(iconName, this.gridOptionsWrapper, column, defaultIconFactory);
	                eTemplate.querySelector(cssSelector).appendChild(eIcon);
	            };
	            HeaderTemplateLoader.HEADER_CELL_TEMPLATE = '<div class="ag-header-cell">' +
	                '  <div id="agResizeBar" class="ag-header-cell-resize"></div>' +
	                '  <span id="agMenu" class="ag-header-icon ag-header-cell-menu-button"></span>' +
	                '  <div class="ag-header-cell-label">' +
	                '    <span id="agSortAsc" class="ag-header-icon ag-sort-ascending-icon"></span>' +
	                '    <span id="agSortDesc" class="ag-header-icon ag-sort-descending-icon"></span>' +
	                '    <span id="agNoSort" class="ag-header-icon ag-sort-none-icon"></span>' +
	                '    <span id="agFilter" class="ag-header-icon ag-filter-icon"></span>' +
	                '    <span id="agText" class="ag-header-cell-text"></span>' +
	                '  </div>' +
	                '</div>';
	            return HeaderTemplateLoader;
	        })();
	        grid.HeaderTemplateLoader = HeaderTemplateLoader;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var TemplateService = (function () {
	            function TemplateService() {
	                this.templateCache = {};
	                this.waitingCallbacks = {};
	            }
	            TemplateService.prototype.init = function ($scope) {
	                this.$scope = $scope;
	            };
	            // returns the template if it is loaded, or null if it is not loaded
	            // but will call the callback when it is loaded
	            TemplateService.prototype.getTemplate = function (url, callback) {
	                var templateFromCache = this.templateCache[url];
	                if (templateFromCache) {
	                    return templateFromCache;
	                }
	                var callbackList = this.waitingCallbacks[url];
	                var that = this;
	                if (!callbackList) {
	                    // first time this was called, so need a new list for callbacks
	                    callbackList = [];
	                    this.waitingCallbacks[url] = callbackList;
	                    // and also need to do the http request
	                    var client = new XMLHttpRequest();
	                    client.onload = function () {
	                        that.handleHttpResult(this, url);
	                    };
	                    client.open("GET", url);
	                    client.send();
	                }
	                // add this callback
	                if (callback) {
	                    callbackList.push(callback);
	                }
	                // caller needs to wait for template to load, so return null
	                return null;
	            };
	            TemplateService.prototype.handleHttpResult = function (httpResult, url) {
	                if (httpResult.status !== 200 || httpResult.response === null) {
	                    console.warn('Unable to get template error ' + httpResult.status + ' - ' + url);
	                    return;
	                }
	                // response success, so process it
	                // in IE9 the response is in - responseText
	                this.templateCache[url] = httpResult.response || httpResult.responseText;
	                // inform all listeners that this is now in the cache
	                var callbacks = this.waitingCallbacks[url];
	                for (var i = 0; i < callbacks.length; i++) {
	                    var callback = callbacks[i];
	                    // we could pass the callback the response, however we know the client of this code
	                    // is the cell renderer, and it passes the 'cellRefresh' method in as the callback
	                    // which doesn't take any parameters.
	                    callback();
	                }
	                if (this.$scope) {
	                    var that = this;
	                    setTimeout(function () {
	                        that.$scope.$apply();
	                    }, 0);
	                }
	            };
	            return TemplateService;
	        })();
	        grid.TemplateService = TemplateService;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var SelectionRendererFactory = (function () {
	            function SelectionRendererFactory() {
	            }
	            SelectionRendererFactory.prototype.init = function (angularGrid, selectionController) {
	                this.angularGrid = angularGrid;
	                this.selectionController = selectionController;
	            };
	            SelectionRendererFactory.prototype.createSelectionCheckbox = function (node, rowIndex) {
	                var eCheckbox = document.createElement('input');
	                eCheckbox.type = "checkbox";
	                eCheckbox.name = "name";
	                eCheckbox.className = 'ag-selection-checkbox';
	                setCheckboxState(eCheckbox, this.selectionController.isNodeSelected(node));
	                var that = this;
	                eCheckbox.onclick = function (event) {
	                    event.stopPropagation();
	                };
	                eCheckbox.onchange = function () {
	                    var newValue = eCheckbox.checked;
	                    if (newValue) {
	                        that.selectionController.selectIndex(rowIndex, true);
	                    }
	                    else {
	                        that.selectionController.deselectIndex(rowIndex);
	                    }
	                };
	                this.angularGrid.addVirtualRowListener(rowIndex, {
	                    rowSelected: function (selected) {
	                        setCheckboxState(eCheckbox, selected);
	                    },
	                    rowRemoved: function () {
	                    }
	                });
	                return eCheckbox;
	            };
	            return SelectionRendererFactory;
	        })();
	        grid.SelectionRendererFactory = SelectionRendererFactory;
	        function setCheckboxState(eCheckbox, state) {
	            if (typeof state === 'boolean') {
	                eCheckbox.checked = state;
	                eCheckbox.indeterminate = false;
	            }
	            else {
	                // isNodeSelected returns back undefined if it's a group and the children
	                // are a mix of selected and unselected
	                eCheckbox.indeterminate = true;
	            }
	        }
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	var ag;
	(function (ag) {
	    var vdom;
	    (function (vdom) {
	        var _ = ag.grid.Utils;
	        var VElement = (function () {
	            function VElement() {
	                this.id = VElement.idSequence++;
	            }
	            VElement.prototype.getId = function () {
	                return this.id;
	            };
	            VElement.prototype.addElementAttachedListener = function (listener) {
	                if (!this.elementAttachedListeners) {
	                    this.elementAttachedListeners = [];
	                }
	                this.elementAttachedListeners.push(listener);
	            };
	            VElement.prototype.fireElementAttached = function (element) {
	                if (!this.elementAttachedListeners) {
	                    return;
	                }
	                for (var i = 0; i < this.elementAttachedListeners.length; i++) {
	                    var listener = this.elementAttachedListeners[i];
	                    listener(element);
	                }
	            };
	            // abstract
	            VElement.prototype.elementAttached = function (element) {
	                this.fireElementAttached(element);
	            };
	            VElement.prototype.toHtmlString = function () { return null; };
	            VElement.idSequence = 0;
	            return VElement;
	        })();
	        vdom.VElement = VElement;
	    })(vdom = ag.vdom || (ag.vdom = {}));
	})(ag || (ag = {}));
	/// <reference path="vElement.ts" />
	/// <reference path="../utils.ts" />
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var ag;
	(function (ag) {
	    var vdom;
	    (function (vdom) {
	        var _ = ag.grid.Utils;
	        var VHtmlElement = (function (_super) {
	            __extends(VHtmlElement, _super);
	            function VHtmlElement(type) {
	                _super.call(this);
	                this.style = {};
	                this.type = type;
	            }
	            VHtmlElement.prototype.getElement = function () {
	                return this.element;
	            };
	            VHtmlElement.prototype.setInnerHtml = function (innerHtml) {
	                if (this.bound) {
	                    this.element.innerHTML = innerHtml;
	                }
	                else {
	                    this.innerHtml = innerHtml;
	                }
	            };
	            VHtmlElement.prototype.addStyles = function (styles) {
	                var _this = this;
	                if (!styles) {
	                    return;
	                }
	                if (!this.bound && !this.style) {
	                    this.style = {};
	                }
	                _.iterateObject(styles, function (key, value) {
	                    if (_this.bound) {
	                        var style = _this.element.style;
	                        style[key] = value;
	                    }
	                    else {
	                        _this.style[key] = value;
	                    }
	                });
	            };
	            VHtmlElement.prototype.attachEventListeners = function (node) {
	                if (!this.eventListeners) {
	                    return;
	                }
	                for (var i = 0; i < this.eventListeners.length; i++) {
	                    var listener = this.eventListeners[i];
	                    node.addEventListener(listener.event, listener.listener);
	                }
	            };
	            VHtmlElement.prototype.addClass = function (newClass) {
	                if (this.bound) {
	                    _.addCssClass(this.element, newClass);
	                }
	                else {
	                    if (!this.classes) {
	                        this.classes = [];
	                    }
	                    this.classes.push(newClass);
	                }
	            };
	            VHtmlElement.prototype.removeClass = function (oldClass) {
	                if (this.bound) {
	                    _.removeCssClass(this.element, oldClass);
	                }
	                else {
	                    if (!this.classes) {
	                        return;
	                    }
	                    while (this.classes.indexOf(oldClass) >= 0) {
	                        _.removeFromArray(this.classes, oldClass);
	                    }
	                }
	            };
	            VHtmlElement.prototype.addClasses = function (classes) {
	                if (!classes || classes.length <= 0) {
	                    return;
	                }
	                if (this.bound) {
	                    for (var i = 0; i < classes.length; i++) {
	                        _.addCssClass(this.element, classes[i]);
	                    }
	                }
	                else {
	                    if (!this.classes) {
	                        this.classes = [];
	                    }
	                    for (var j = 0; j < classes.length; j++) {
	                        this.classes.push(classes[j]);
	                    }
	                }
	            };
	            VHtmlElement.prototype.toHtmlString = function () {
	                var buff = '';
	                // opening element
	                buff += '<' + this.type + ' v_element_id="' + this.getId() + '" ';
	                buff += this.toHtmlStringClasses();
	                buff += this.toHtmlStringAttributes();
	                buff += this.toHtmlStringStyles();
	                buff += '>';
	                // contents
	                if (this.innerHtml !== null && this.innerHtml !== undefined) {
	                    buff += this.innerHtml;
	                }
	                buff += this.toHtmlStringChildren();
	                // closing element
	                buff += '</' + this.type + '>';
	                return buff;
	            };
	            VHtmlElement.prototype.toHtmlStringChildren = function () {
	                if (!this.children) {
	                    return '';
	                }
	                var result = '';
	                for (var i = 0; i < this.children.length; i++) {
	                    result += this.children[i].toHtmlString();
	                }
	                return result;
	            };
	            VHtmlElement.prototype.toHtmlStringAttributes = function () {
	                if (!this.attributes) {
	                    return '';
	                }
	                var result = '';
	                _.iterateObject(this.attributes, function (key, value) {
	                    result += ' ' + key + '="' + value + '"';
	                });
	                return result;
	            };
	            VHtmlElement.prototype.toHtmlStringClasses = function () {
	                if (!this.classes) {
	                    return '';
	                }
	                return ' class="' + this.classes.join(' ') + '"';
	            };
	            VHtmlElement.prototype.toHtmlStringStyles = function () {
	                var result = ' style="';
	                var atLeastOne = false;
	                _.iterateObject(this.style, function (key, value) {
	                    result += ' ' + key + ': ' + value + ';';
	                    atLeastOne = true;
	                });
	                result += '"';
	                if (atLeastOne) {
	                    return result;
	                }
	                else {
	                    return '';
	                }
	            };
	            VHtmlElement.prototype.appendChild = function (child) {
	                if (this.bound) {
	                    if (_.isNodeOrElement(child)) {
	                        this.element.appendChild(child);
	                    }
	                    else {
	                        console.error('cannot appendChild with virtual child to already bound VHTMLElement');
	                    }
	                }
	                else {
	                    if (!this.children) {
	                        this.children = [];
	                    }
	                    if (_.isNodeOrElement(child)) {
	                        this.children.push(new vdom.VWrapperElement(child));
	                    }
	                    else {
	                        this.children.push(child);
	                    }
	                }
	            };
	            VHtmlElement.prototype.setAttribute = function (key, value) {
	                if (this.bound) {
	                    this.element.setAttribute(key, value);
	                }
	                else {
	                    if (!this.attributes) {
	                        this.attributes = {};
	                    }
	                    this.attributes[key] = value;
	                }
	            };
	            VHtmlElement.prototype.addEventListener = function (event, listener) {
	                if (this.bound) {
	                    this.element.addEventListener(event, listener);
	                }
	                else {
	                    if (!this.eventListeners) {
	                        this.eventListeners = [];
	                    }
	                    var entry = new VEventListener(event, listener);
	                    this.eventListeners.push(entry);
	                }
	            };
	            VHtmlElement.prototype.elementAttached = function (element) {
	                _super.prototype.elementAttached.call(this, element);
	                this.element = element;
	                this.attachEventListeners(element);
	                this.fireElementAttachedToChildren(element);
	                this.bound = true;
	            };
	            VHtmlElement.prototype.fireElementAttachedToChildren = function (element) {
	                if (!this.children) {
	                    return;
	                }
	                for (var i = 0; i < this.children.length; i++) {
	                    var child = this.children[i];
	                    var childElement = element.querySelector('[v_element_id="' + child.getId() + '"]');
	                    child.elementAttached(childElement);
	                }
	            };
	            return VHtmlElement;
	        })(vdom.VElement);
	        vdom.VHtmlElement = VHtmlElement;
	        var VEventListener = (function () {
	            function VEventListener(event, listener) {
	                this.event = event;
	                this.listener = listener;
	            }
	            return VEventListener;
	        })();
	    })(vdom = ag.vdom || (ag.vdom = {}));
	})(ag || (ag = {}));
	/// <reference path="vElement.ts" />
	var ag;
	(function (ag) {
	    var vdom;
	    (function (vdom) {
	        var VWrapperElement = (function (_super) {
	            __extends(VWrapperElement, _super);
	            function VWrapperElement(wrappedElement) {
	                _super.call(this);
	                this.wrappedElement = wrappedElement;
	            }
	            VWrapperElement.prototype.toHtmlString = function () {
	                return '<span v_element_id="' + this.getId() + '"></span>';
	            };
	            VWrapperElement.prototype.elementAttached = function (element) {
	                var parent = element.parentNode;
	                parent.insertBefore(this.wrappedElement, element);
	                parent.removeChild(element);
	            };
	            return VWrapperElement;
	        })(vdom.VElement);
	        vdom.VWrapperElement = VWrapperElement;
	    })(vdom = ag.vdom || (ag.vdom = {}));
	})(ag || (ag = {}));
	/// <reference path='../columnController/columnController.ts' />
	/// <reference path='../utils.ts' />
	/// <reference path="../gridOptionsWrapper.ts" />
	/// <reference path="../expressionService.ts" />
	/// <reference path="../selectionRendererFactory.ts" />
	/// <reference path="rowRenderer.ts" />
	/// <reference path="../selectionController.ts" />
	/// <reference path="../templateService.ts" />
	/// <reference path="../virtualDom/vHtmlElement.ts" />
	/// <reference path="../virtualDom/vWrapperElement.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var RenderedCell = (function () {
	            function RenderedCell(firstRightPinnedCol, column, $compile, rowRenderer, gridOptionsWrapper, expressionService, selectionRendererFactory, selectionController, templateService, cellRendererMap, node, rowIndex, colIndex, scope, columnController, valueService, eventService) {
	                this.firstRightPinnedColumn = firstRightPinnedCol;
	                this.column = column;
	                this.rowRenderer = rowRenderer;
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.expressionService = expressionService;
	                this.selectionRendererFactory = selectionRendererFactory;
	                this.selectionController = selectionController;
	                this.cellRendererMap = cellRendererMap;
	                this.$compile = $compile;
	                this.templateService = templateService;
	                this.columnController = columnController;
	                this.valueService = valueService;
	                this.eventService = eventService;
	                this.node = node;
	                this.rowIndex = rowIndex;
	                this.colIndex = colIndex;
	                this.scope = scope;
	                this.data = this.getDataForRow();
	                this.value = this.getValue();
	                this.checkboxSelection = this.calculateCheckboxSelection();
	                this.setupComponents();
	            }
	            RenderedCell.prototype.calculateCheckboxSelection = function () {
	                // never allow selection on floating rows
	                if (this.node.floating) {
	                    return false;
	                }
	                // if boolean set, then just use it
	                var colDef = this.column.getColDef();
	                if (typeof colDef.checkboxSelection === 'boolean') {
	                    return colDef.checkboxSelection;
	                }
	                // if function, then call the function to find out. we first check colDef for
	                // a function, and if missing then check gridOptions, so colDef has precedence
	                var selectionFunc;
	                if (typeof colDef.checkboxSelection === 'function') {
	                    selectionFunc = colDef.checkboxSelection;
	                }
	                if (!selectionFunc && this.gridOptionsWrapper.getCheckboxSelection()) {
	                    selectionFunc = this.gridOptionsWrapper.getCheckboxSelection();
	                }
	                if (selectionFunc) {
	                    var params = this.createParams();
	                    return selectionFunc(params);
	                }
	                return false;
	            };
	            RenderedCell.prototype.getColumn = function () {
	                return this.column;
	            };
	            RenderedCell.prototype.getValue = function () {
	                return this.valueService.getValue(this.column.getColDef(), this.data, this.node);
	            };
	            RenderedCell.prototype.getVGridCell = function () {
	                return this.vGridCell;
	            };
	            RenderedCell.prototype.getDataForRow = function () {
	                if (this.node.footer) {
	                    // if footer, we always show the data
	                    return this.node.data;
	                }
	                else if (this.node.group) {
	                    // if header and header is expanded, we show data in footer only
	                    var footersEnabled = this.gridOptionsWrapper.isGroupIncludeFooter();
	                    var suppressHideHeader = this.gridOptionsWrapper.isGroupSuppressBlankHeader();
	                    if (this.node.expanded && footersEnabled && !suppressHideHeader) {
	                        return undefined;
	                    }
	                    else {
	                        return this.node.data;
	                    }
	                }
	                else {
	                    // otherwise it's a normal node, just return data as normal
	                    return this.node.data;
	                }
	            };
	            RenderedCell.prototype.setupComponents = function () {
	                this.vGridCell = new ag.vdom.VHtmlElement("div");
	                this.vGridCell.setAttribute("col", (this.column.getIndex() !== undefined && this.column.getIndex() !== null) ? this.column.getIndex().toString() : '');
	                this.vGridCell.setAttribute("colId", this.column.getColId());
	                // only set tab index if cell selection is enabled
	                if (!this.gridOptionsWrapper.isSuppressCellSelection() && !this.node.floating) {
	                    this.vGridCell.setAttribute("tabindex", "-1");
	                }
	                // these are the grid styles, don't change between soft refreshes
	                this.addClasses();
	                this.addCellClickedHandler();
	                this.addCellDoubleClickedHandler();
	                this.addCellContextMenuHandler();
	                if (!this.node.floating) {
	                    this.addCellNavigationHandler();
	                }
	                this.vGridCell.addStyles({ width: this.column.getActualWidth() + "px" });
	                this.createParentOfValue();
	                this.populateCell();
	                if (this.eCheckbox) {
	                    this.setSelected(this.selectionController.isNodeSelected(this.node));
	                }
	            };
	            // called by rowRenderer when user navigates via tab key
	            RenderedCell.prototype.startEditing = function (key) {
	                var _this = this;
	                var that = this;
	                this.editingCell = true;
	                _.removeAllChildren(this.vGridCell.getElement());
	                var eInput = document.createElement('input');
	                eInput.type = 'text';
	                _.addCssClass(eInput, 'ag-cell-edit-input');
	                var startWithOldValue = key !== grid.Constants.KEY_BACKSPACE && key !== grid.Constants.KEY_DELETE;
	                var value = this.getValue();
	                if (startWithOldValue && value !== null && value !== undefined) {
	                    eInput.value = value;
	                }
	                eInput.style.width = (this.column.getActualWidth() - 14) + 'px';
	                this.vGridCell.appendChild(eInput);
	                eInput.focus();
	                eInput.select();
	                var blurListener = function () {
	                    that.stopEditing(eInput, blurListener);
	                };
	                //stop entering if we loose focus
	                eInput.addEventListener("blur", blurListener);
	                //stop editing if enter pressed
	                eInput.addEventListener('keypress', function (event) {
	                    var key = event.which || event.keyCode;
	                    if (key === grid.Constants.KEY_ENTER) {
	                        _this.stopEditing(eInput, blurListener);
	                        _this.focusCell(true);
	                    }
	                });
	                //stop editing if enter pressed
	                eInput.addEventListener('keydown', function (event) {
	                    var key = event.which || event.keyCode;
	                    if (key === grid.Constants.KEY_ESCAPE) {
	                        _this.stopEditing(eInput, blurListener, true);
	                        _this.focusCell(true);
	                    }
	                });
	                // tab key doesn't generate keypress, so need keydown to listen for that
	                eInput.addEventListener('keydown', function (event) {
	                    var key = event.which || event.keyCode;
	                    if (key == grid.Constants.KEY_TAB) {
	                        that.stopEditing(eInput, blurListener);
	                        that.rowRenderer.startEditingNextCell(that.rowIndex, that.column, event.shiftKey);
	                        // we don't want the default tab action, so return false, this stops the event from bubbling
	                        event.preventDefault();
	                        return false;
	                    }
	                });
	            };
	            RenderedCell.prototype.focusCell = function (forceBrowserFocus) {
	                this.rowRenderer.focusCell(this.vGridCell.getElement(), this.rowIndex, this.column.getIndex(), this.column.getColDef(), forceBrowserFocus);
	            };
	            RenderedCell.prototype.stopEditing = function (eInput, blurListener, reset) {
	                if (reset === void 0) { reset = false; }
	                this.editingCell = false;
	                var newValue = eInput.value;
	                var colDef = this.column.getColDef();
	                //If we don't remove the blur listener first, we get:
	                //Uncaught NotFoundError: Failed to execute 'removeChild' on 'Node': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?
	                eInput.removeEventListener('blur', blurListener);
	                if (!reset) {
	                    var paramsForCallbacks = {
	                        node: this.node,
	                        data: this.node.data,
	                        oldValue: this.node.data[colDef.field],
	                        newValue: newValue,
	                        rowIndex: this.rowIndex,
	                        colDef: colDef,
	                        api: this.gridOptionsWrapper.getApi(),
	                        context: this.gridOptionsWrapper.getContext()
	                    };
	                    if (colDef.newValueHandler) {
	                        colDef.newValueHandler(paramsForCallbacks);
	                    }
	                    else {
	                        this.node.data[colDef.field] = newValue;
	                    }
	                    // at this point, the value has been updated
	                    this.value = this.getValue();
	                    paramsForCallbacks.newValue = this.value;
	                    if (typeof colDef.onCellValueChanged === 'function') {
	                        colDef.onCellValueChanged(paramsForCallbacks);
	                    }
	                    this.eventService.dispatchEvent(grid.Events.EVENT_CELL_VALUE_CHANGED, paramsForCallbacks);
	                }
	                _.removeAllChildren(this.vGridCell.getElement());
	                if (this.checkboxSelection) {
	                    this.vGridCell.appendChild(this.vCellWrapper.getElement());
	                }
	                this.refreshCell();
	            };
	            RenderedCell.prototype.createParams = function () {
	                var params = {
	                    node: this.node,
	                    data: this.node.data,
	                    value: this.value,
	                    rowIndex: this.rowIndex,
	                    colIndex: this.colIndex,
	                    colDef: this.column.getColDef(),
	                    $scope: this.scope,
	                    context: this.gridOptionsWrapper.getContext(),
	                    api: this.gridOptionsWrapper.getApi()
	                };
	                return params;
	            };
	            RenderedCell.prototype.createEvent = function (event, eventSource) {
	                var agEvent = this.createParams();
	                agEvent.event = event;
	                agEvent.eventSource = eventSource;
	                return agEvent;
	            };
	            RenderedCell.prototype.addCellDoubleClickedHandler = function () {
	                var that = this;
	                var colDef = this.column.getColDef();
	                this.vGridCell.addEventListener('dblclick', function (event) {
	                    // always dispatch event to eventService
	                    var agEvent = that.createEvent(event, this);
	                    that.eventService.dispatchEvent(grid.Events.EVENT_CELL_DOUBLE_CLICKED, agEvent);
	                    // check if colDef also wants to handle event
	                    if (typeof colDef.onCellDoubleClicked === 'function') {
	                        colDef.onCellDoubleClicked(agEvent);
	                    }
	                    if (!that.gridOptionsWrapper.isSingleClickEdit() && that.isCellEditable()) {
	                        that.startEditing();
	                    }
	                });
	            };
	            RenderedCell.prototype.addCellContextMenuHandler = function () {
	                var that = this;
	                var colDef = this.column.getColDef();
	                this.vGridCell.addEventListener('contextmenu', function (event) {
	                    var agEvent = that.createEvent(event, this);
	                    that.eventService.dispatchEvent(grid.Events.EVENT_CELL_CONTEXT_MENU, agEvent);
	                    if (colDef.onCellContextMenu) {
	                        colDef.onCellContextMenu(agEvent);
	                    }
	                });
	            };
	            RenderedCell.prototype.isCellEditable = function () {
	                if (this.editingCell) {
	                    return false;
	                }
	                // never allow editing of groups
	                if (this.node.group) {
	                    return false;
	                }
	                // if boolean set, then just use it
	                var colDef = this.column.getColDef();
	                if (typeof colDef.editable === 'boolean') {
	                    return colDef.editable;
	                }
	                // if function, then call the function to find out
	                if (typeof colDef.editable === 'function') {
	                    var params = this.createParams();
	                    var editableFunc = colDef.editable;
	                    return editableFunc(params);
	                }
	                return false;
	            };
	            RenderedCell.prototype.addCellClickedHandler = function () {
	                var colDef = this.column.getColDef();
	                var that = this;
	                this.vGridCell.addEventListener("click", function (event) {
	                    // we pass false to focusCell, as we don't want the cell to focus
	                    // also get the browser focus. if we did, then the cellRenderer could
	                    // have a text field in it, for example, and as the user clicks on the
	                    // text field, the text field, the focus doesn't get to the text
	                    // field, instead to goes to the div behind, making it impossible to
	                    // select the text field.
	                    if (!that.node.floating) {
	                        that.focusCell(false);
	                    }
	                    var agEvent = that.createEvent(event, this);
	                    that.eventService.dispatchEvent(grid.Events.EVENT_CELL_CLICKED, agEvent);
	                    if (colDef.onCellClicked) {
	                        colDef.onCellClicked(agEvent);
	                    }
	                    if (that.gridOptionsWrapper.isSingleClickEdit() && that.isCellEditable()) {
	                        that.startEditing();
	                    }
	                });
	            };
	            RenderedCell.prototype.populateCell = function () {
	                // populate
	                this.putDataIntoCell();
	                // style
	                this.addStylesFromCollDef();
	                this.addClassesFromCollDef();
	                this.addClassesFromRules();
	            };
	            RenderedCell.prototype.addStylesFromCollDef = function () {
	                var colDef = this.column.getColDef();
	                if (colDef.cellStyle) {
	                    var cssToUse;
	                    if (typeof colDef.cellStyle === 'function') {
	                        var cellStyleParams = {
	                            value: this.value,
	                            data: this.node.data,
	                            node: this.node,
	                            colDef: colDef,
	                            column: this.column,
	                            $scope: this.scope,
	                            context: this.gridOptionsWrapper.getContext(),
	                            api: this.gridOptionsWrapper.getApi()
	                        };
	                        var cellStyleFunc = colDef.cellStyle;
	                        cssToUse = cellStyleFunc(cellStyleParams);
	                    }
	                    else {
	                        cssToUse = colDef.cellStyle;
	                    }
	                    if (cssToUse) {
	                        this.vGridCell.addStyles(cssToUse);
	                    }
	                }
	            };
	            RenderedCell.prototype.addClassesFromCollDef = function () {
	                var _this = this;
	                var colDef = this.column.getColDef();
	                if (colDef.cellClass) {
	                    var classToUse;
	                    if (typeof colDef.cellClass === 'function') {
	                        var cellClassParams = {
	                            value: this.value,
	                            data: this.node.data,
	                            node: this.node,
	                            colDef: colDef,
	                            $scope: this.scope,
	                            context: this.gridOptionsWrapper.getContext(),
	                            api: this.gridOptionsWrapper.getApi()
	                        };
	                        var cellClassFunc = colDef.cellClass;
	                        classToUse = cellClassFunc(cellClassParams);
	                    }
	                    else {
	                        classToUse = colDef.cellClass;
	                    }
	                    if (typeof classToUse === 'string') {
	                        this.vGridCell.addClass(classToUse);
	                    }
	                    else if (Array.isArray(classToUse)) {
	                        classToUse.forEach(function (cssClassItem) {
	                            _this.vGridCell.addClass(cssClassItem);
	                        });
	                    }
	                }
	            };
	            RenderedCell.prototype.addClassesFromRules = function () {
	                var colDef = this.column.getColDef();
	                var classRules = colDef.cellClassRules;
	                if (typeof classRules === 'object' && classRules !== null) {
	                    var params = {
	                        value: this.value,
	                        data: this.node.data,
	                        node: this.node,
	                        colDef: colDef,
	                        rowIndex: this.rowIndex,
	                        api: this.gridOptionsWrapper.getApi(),
	                        context: this.gridOptionsWrapper.getContext()
	                    };
	                    var classNames = Object.keys(classRules);
	                    for (var i = 0; i < classNames.length; i++) {
	                        var className = classNames[i];
	                        var rule = classRules[className];
	                        var resultOfRule;
	                        if (typeof rule === 'string') {
	                            resultOfRule = this.expressionService.evaluate(rule, params);
	                        }
	                        else if (typeof rule === 'function') {
	                            resultOfRule = rule(params);
	                        }
	                        if (resultOfRule) {
	                            this.vGridCell.addClass(className);
	                        }
	                        else {
	                            this.vGridCell.removeClass(className);
	                        }
	                    }
	                }
	            };
	            // rename this to 'add key event listener
	            RenderedCell.prototype.addCellNavigationHandler = function () {
	                var that = this;
	                this.vGridCell.addEventListener('keydown', function (event) {
	                    if (that.editingCell) {
	                        return;
	                    }
	                    // only interested on key presses that are directly on this element, not any children elements. this
	                    // stops navigation if the user is in, for example, a text field inside the cell, and user hits
	                    // on of the keys we are looking for.
	                    if (event.target !== that.vGridCell.getElement()) {
	                        return;
	                    }
	                    var key = event.which || event.keyCode;
	                    var startNavigation = key === grid.Constants.KEY_DOWN || key === grid.Constants.KEY_UP
	                        || key === grid.Constants.KEY_LEFT || key === grid.Constants.KEY_RIGHT;
	                    if (startNavigation) {
	                        event.preventDefault();
	                        that.rowRenderer.navigateToNextCell(key, that.rowIndex, that.column);
	                        return;
	                    }
	                    var startEdit = that.isKeycodeForStartEditing(key);
	                    if (startEdit && that.isCellEditable()) {
	                        that.startEditing(key);
	                        // if we don't prevent default, then the editor that get displayed also picks up the 'enter key'
	                        // press, and stops editing immediately, hence giving he user experience that nothing happened
	                        event.preventDefault();
	                        return;
	                    }
	                    var selectRow = key === grid.Constants.KEY_SPACE;
	                    if (selectRow && that.gridOptionsWrapper.isRowSelection()) {
	                        var selected = that.selectionController.isNodeSelected(that.node);
	                        if (selected) {
	                            that.selectionController.deselectNode(that.node);
	                        }
	                        else {
	                            that.selectionController.selectNode(that.node, true);
	                        }
	                        event.preventDefault();
	                        return;
	                    }
	                });
	            };
	            RenderedCell.prototype.isKeycodeForStartEditing = function (key) {
	                return key === grid.Constants.KEY_ENTER || key === grid.Constants.KEY_BACKSPACE || key === grid.Constants.KEY_DELETE;
	            };
	            RenderedCell.prototype.createSelectionCheckbox = function () {
	                this.eCheckbox = document.createElement('input');
	                this.eCheckbox.type = "checkbox";
	                this.eCheckbox.name = "name";
	                this.eCheckbox.className = 'ag-selection-checkbox';
	                this.eCheckbox.addEventListener('click', function (event) {
	                    event.stopPropagation();
	                });
	                var that = this;
	                this.checkboxOnChangeListener = function () {
	                    var newValue = that.eCheckbox.checked;
	                    if (newValue) {
	                        that.selectionController.selectIndex(that.rowIndex, true);
	                    }
	                    else {
	                        that.selectionController.deselectIndex(that.rowIndex);
	                    }
	                };
	                this.eCheckbox.onchange = this.checkboxOnChangeListener;
	            };
	            RenderedCell.prototype.setSelected = function (state) {
	                if (!this.eCheckbox) {
	                    return;
	                }
	                this.eCheckbox.onchange = null;
	                if (typeof state === 'boolean') {
	                    this.eCheckbox.checked = state;
	                    this.eCheckbox.indeterminate = false;
	                }
	                else {
	                    // isNodeSelected returns back undefined if it's a group and the children
	                    // are a mix of selected and unselected
	                    this.eCheckbox.indeterminate = true;
	                }
	                this.eCheckbox.onchange = this.checkboxOnChangeListener;
	            };
	            RenderedCell.prototype.createParentOfValue = function () {
	                if (this.checkboxSelection) {
	                    this.vCellWrapper = new ag.vdom.VHtmlElement('span');
	                    this.vCellWrapper.addClass('ag-cell-wrapper');
	                    this.vGridCell.appendChild(this.vCellWrapper);
	                    this.createSelectionCheckbox();
	                    this.vCellWrapper.appendChild(new ag.vdom.VWrapperElement(this.eCheckbox));
	                    // eventually we call eSpanWithValue.innerHTML = xxx, so cannot include the checkbox (above) in this span
	                    this.vSpanWithValue = new ag.vdom.VHtmlElement('span');
	                    this.vSpanWithValue.addClass('ag-cell-value');
	                    this.vCellWrapper.appendChild(this.vSpanWithValue);
	                    this.vParentOfValue = this.vSpanWithValue;
	                }
	                else {
	                    this.vGridCell.addClass('ag-cell-value');
	                    this.vParentOfValue = this.vGridCell;
	                }
	            };
	            RenderedCell.prototype.isVolatile = function () {
	                return this.column.getColDef().volatile;
	            };
	            RenderedCell.prototype.refreshCell = function () {
	                _.removeAllChildren(this.vParentOfValue.getElement());
	                this.value = this.getValue();
	                this.populateCell();
	                if (this.checkboxSelection) {
	                    this.setSelected(this.selectionController.isNodeSelected(this.node));
	                }
	                // if angular compiling, then need to also compile the cell again (angular compiling sucks, please wait...)
	                if (this.gridOptionsWrapper.isAngularCompileRows()) {
	                    this.$compile(this.vGridCell.getElement())(this.scope);
	                }
	            };
	            RenderedCell.prototype.putDataIntoCell = function () {
	                // template gets preference, then cellRenderer, then do it ourselves
	                var colDef = this.column.getColDef();
	                if (colDef.template) {
	                    this.vParentOfValue.setInnerHtml(colDef.template);
	                }
	                else if (colDef.templateUrl) {
	                    var template = this.templateService.getTemplate(colDef.templateUrl, this.refreshCell.bind(this, true));
	                    if (template) {
	                        this.vParentOfValue.setInnerHtml(template);
	                    }
	                }
	                else if (colDef.floatingCellRenderer && this.node.floating) {
	                    this.useCellRenderer(colDef.floatingCellRenderer);
	                }
	                else if (colDef.cellRenderer) {
	                    this.useCellRenderer(colDef.cellRenderer);
	                }
	                else {
	                    // if we insert undefined, then it displays as the string 'undefined', ugly!
	                    if (this.value !== undefined && this.value !== null && this.value !== '') {
	                        this.vParentOfValue.setInnerHtml(this.value.toString());
	                    }
	                }
	            };
	            RenderedCell.prototype.useCellRenderer = function (cellRenderer) {
	                var colDef = this.column.getColDef();
	                var rendererParams = {
	                    value: this.value,
	                    valueGetter: this.getValue,
	                    data: this.node.data,
	                    node: this.node,
	                    colDef: colDef,
	                    column: this.column,
	                    $scope: this.scope,
	                    rowIndex: this.rowIndex,
	                    api: this.gridOptionsWrapper.getApi(),
	                    context: this.gridOptionsWrapper.getContext(),
	                    refreshCell: this.refreshCell.bind(this),
	                    eGridCell: this.vGridCell
	                };
	                // start duplicated code
	                var actualCellRenderer;
	                if (typeof cellRenderer === 'object' && cellRenderer !== null) {
	                    var cellRendererObj = cellRenderer;
	                    actualCellRenderer = this.cellRendererMap[cellRendererObj.renderer];
	                    if (!actualCellRenderer) {
	                        throw 'Cell renderer ' + cellRenderer + ' not found, available are ' + Object.keys(this.cellRendererMap);
	                    }
	                }
	                else if (typeof cellRenderer === 'function') {
	                    actualCellRenderer = cellRenderer;
	                }
	                else {
	                    throw 'Cell Renderer must be String or Function';
	                }
	                var resultFromRenderer = actualCellRenderer(rendererParams);
	                // end duplicated code
	                if (_.isNodeOrElement(resultFromRenderer)) {
	                    // a dom node or element was returned, so add child
	                    this.vParentOfValue.appendChild(resultFromRenderer);
	                }
	                else {
	                    // otherwise assume it was html, so just insert
	                    this.vParentOfValue.setInnerHtml(resultFromRenderer);
	                }
	            };
	            RenderedCell.prototype.addClasses = function () {
	                this.vGridCell.addClass('ag-cell');
	                this.vGridCell.addClass('ag-cell-no-focus');
	                this.vGridCell.addClass('cell-col-' + this.column.getIndex());
	                if (this.node.group && this.node.footer) {
	                    this.vGridCell.addClass('ag-footer-cell');
	                }
	                if (this.node.group && !this.node.footer) {
	                    this.vGridCell.addClass('ag-group-cell');
	                }
	                if (this.firstRightPinnedColumn) {
	                    this.vGridCell.addClass('ag-cell-first-right-pinned');
	                }
	            };
	            return RenderedCell;
	        })();
	        grid.RenderedCell = RenderedCell;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../gridOptionsWrapper.ts" />
	/// <reference path="../grid.ts" />
	/// <reference path="../utils.ts" />
	/// <reference path="../columnController/columnController.ts" />
	/// <reference path="../expressionService.ts" />
	/// <reference path="rowRenderer.ts" />
	/// <reference path="../templateService.ts" />
	/// <reference path="../selectionController.ts" />
	/// <reference path="renderedCell.ts" />
	/// <reference path="../virtualDom/vHtmlElement.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var RenderedRow = (function () {
	            function RenderedRow(gridOptionsWrapper, valueService, parentScope, angularGrid, columnController, expressionService, cellRendererMap, selectionRendererFactory, $compile, templateService, selectionController, rowRenderer, eBodyContainer, ePinnedLeftContainer, ePinnedRightContainer, node, rowIndex, eventService) {
	                this.renderedCells = {};
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.valueService = valueService;
	                this.parentScope = parentScope;
	                this.angularGrid = angularGrid;
	                this.expressionService = expressionService;
	                this.columnController = columnController;
	                this.cellRendererMap = cellRendererMap;
	                this.selectionRendererFactory = selectionRendererFactory;
	                this.$compile = $compile;
	                this.templateService = templateService;
	                this.selectionController = selectionController;
	                this.rowRenderer = rowRenderer;
	                this.eBodyContainer = eBodyContainer;
	                this.ePinnedLeftContainer = ePinnedLeftContainer;
	                this.ePinnedRightContainer = ePinnedRightContainer;
	                this.pinningLeft = columnController.isPinningLeft();
	                this.pinningRight = columnController.isPinningRight();
	                this.eventService = eventService;
	                var groupHeaderTakesEntireRow = this.gridOptionsWrapper.isGroupUseEntireRow();
	                var rowIsHeaderThatSpans = node.group && groupHeaderTakesEntireRow;
	                this.vBodyRow = this.createRowContainer();
	                if (this.pinningLeft) {
	                    this.vPinnedLeftRow = this.createRowContainer();
	                }
	                if (this.pinningRight) {
	                    this.vPinnedRightRow = this.createRowContainer();
	                }
	                this.rowIndex = rowIndex;
	                this.node = node;
	                this.scope = this.createChildScopeOrNull(node.data);
	                if (!rowIsHeaderThatSpans) {
	                    this.drawNormalRow();
	                }
	                this.addDynamicStyles();
	                this.addDynamicClasses();
	                var rowStr = this.rowIndex.toString();
	                if (this.node.floatingBottom) {
	                    rowStr = 'fb-' + rowStr;
	                }
	                else if (this.node.floatingTop) {
	                    rowStr = 'ft-' + rowStr;
	                }
	                this.vBodyRow.setAttribute('row', rowStr);
	                if (this.pinningLeft) {
	                    this.vPinnedLeftRow.setAttribute('row', rowStr);
	                }
	                if (this.pinningRight) {
	                    this.vPinnedRightRow.setAttribute('row', rowStr);
	                }
	                if (typeof this.gridOptionsWrapper.getBusinessKeyForNodeFunc() === 'function') {
	                    var businessKey = this.gridOptionsWrapper.getBusinessKeyForNodeFunc()(this.node);
	                    if (typeof businessKey === 'string' || typeof businessKey === 'number') {
	                        this.vBodyRow.setAttribute('row-id', businessKey);
	                        if (this.pinningLeft) {
	                            this.vPinnedLeftRow.setAttribute('row-id', businessKey);
	                        }
	                        if (this.pinningRight) {
	                            this.vPinnedRightRow.setAttribute('row-id', businessKey);
	                        }
	                    }
	                }
	                // if showing scrolls, position on the container
	                if (!this.gridOptionsWrapper.isForPrint()) {
	                    var topPx = this.node.rowTop + "px";
	                    this.vBodyRow.style.top = topPx;
	                    if (this.pinningLeft) {
	                        this.vPinnedLeftRow.style.top = topPx;
	                    }
	                    if (this.pinningRight) {
	                        this.vPinnedRightRow.style.top = topPx;
	                    }
	                }
	                var heightPx = this.node.rowHeight + 'px';
	                this.vBodyRow.style.height = heightPx;
	                if (this.pinningLeft) {
	                    this.vPinnedLeftRow.style.height = heightPx;
	                }
	                if (this.pinningRight) {
	                    this.vPinnedRightRow.style.height = heightPx;
	                }
	                // if group item, insert the first row
	                if (rowIsHeaderThatSpans) {
	                    this.createGroupRow();
	                }
	                this.bindVirtualElement(this.vBodyRow);
	                if (this.pinningLeft) {
	                    this.bindVirtualElement(this.vPinnedLeftRow);
	                }
	                if (this.pinningRight) {
	                    this.bindVirtualElement(this.vPinnedRightRow);
	                }
	                if (this.scope) {
	                    this.$compile(this.vBodyRow.getElement())(this.scope);
	                    if (this.pinningLeft) {
	                        this.$compile(this.vPinnedLeftRow.getElement())(this.scope);
	                    }
	                    if (this.pinningRight) {
	                        this.$compile(this.vPinnedRightRow.getElement())(this.scope);
	                    }
	                }
	                this.eBodyContainer.appendChild(this.vBodyRow.getElement());
	                if (this.pinningLeft) {
	                    this.ePinnedLeftContainer.appendChild(this.vPinnedLeftRow.getElement());
	                }
	                if (this.pinningRight) {
	                    this.ePinnedRightContainer.appendChild(this.vPinnedRightRow.getElement());
	                }
	            }
	            RenderedRow.prototype.onRowSelected = function (selected) {
	                _.iterateObject(this.renderedCells, function (key, renderedCell) {
	                    renderedCell.setSelected(selected);
	                });
	            };
	            RenderedRow.prototype.softRefresh = function () {
	                _.iterateObject(this.renderedCells, function (key, renderedCell) {
	                    if (renderedCell.isVolatile()) {
	                        renderedCell.refreshCell();
	                    }
	                });
	            };
	            RenderedRow.prototype.getRenderedCellForColumn = function (column) {
	                return this.renderedCells[column.getIndex()];
	            };
	            RenderedRow.prototype.getCellForCol = function (column) {
	                var renderedCell = this.renderedCells[column.getIndex()];
	                if (renderedCell) {
	                    return renderedCell.getVGridCell().getElement();
	                }
	                else {
	                    return null;
	                }
	            };
	            RenderedRow.prototype.destroy = function () {
	                this.destroyScope();
	                if (this.pinningLeft) {
	                    this.ePinnedLeftContainer.removeChild(this.vPinnedLeftRow.getElement());
	                }
	                if (this.pinningRight) {
	                    this.ePinnedRightContainer.removeChild(this.vPinnedRightRow.getElement());
	                }
	                this.eBodyContainer.removeChild(this.vBodyRow.getElement());
	            };
	            RenderedRow.prototype.destroyScope = function () {
	                if (this.scope) {
	                    this.scope.$destroy();
	                    this.scope = null;
	                }
	            };
	            RenderedRow.prototype.isDataInList = function (rows) {
	                return rows.indexOf(this.node.data) >= 0;
	            };
	            RenderedRow.prototype.isNodeInList = function (nodes) {
	                return nodes.indexOf(this.node) >= 0;
	            };
	            RenderedRow.prototype.isGroup = function () {
	                return this.node.group === true;
	            };
	            RenderedRow.prototype.drawNormalRow = function () {
	                var columns = this.columnController.getAllDisplayedColumns();
	                var firstRightPinnedColIndex = this.columnController.getFirstRightPinnedColIndex();
	                for (var colIndex = 0; colIndex < columns.length; colIndex++) {
	                    var column = columns[colIndex];
	                    var firstRightPinnedCol = colIndex === firstRightPinnedColIndex;
	                    var renderedCell = new grid.RenderedCell(firstRightPinnedCol, column, this.$compile, this.rowRenderer, this.gridOptionsWrapper, this.expressionService, this.selectionRendererFactory, this.selectionController, this.templateService, this.cellRendererMap, this.node, this.rowIndex, colIndex, this.scope, this.columnController, this.valueService, this.eventService);
	                    var vGridCell = renderedCell.getVGridCell();
	                    if (column.getPinned() === grid.Column.PINNED_LEFT) {
	                        this.vPinnedLeftRow.appendChild(vGridCell);
	                    }
	                    else if (column.getPinned() === grid.Column.PINNED_RIGHT) {
	                        this.vPinnedRightRow.appendChild(vGridCell);
	                    }
	                    else {
	                        this.vBodyRow.appendChild(vGridCell);
	                    }
	                    this.renderedCells[column.getIndex()] = renderedCell;
	                }
	            };
	            RenderedRow.prototype.bindVirtualElement = function (vElement) {
	                var html = vElement.toHtmlString();
	                var element = _.loadTemplate(html);
	                vElement.elementAttached(element);
	            };
	            RenderedRow.prototype.createGroupRow = function () {
	                var eGroupRow = this.createGroupSpanningEntireRowCell(false);
	                if (this.pinningLeft) {
	                    this.vPinnedLeftRow.appendChild(eGroupRow);
	                    var eGroupRowPadding = this.createGroupSpanningEntireRowCell(true);
	                    this.vBodyRow.appendChild(eGroupRowPadding);
	                }
	                else {
	                    this.vBodyRow.appendChild(eGroupRow);
	                }
	                if (this.pinningRight) {
	                    var ePinnedRightPadding = this.createGroupSpanningEntireRowCell(true);
	                    this.vPinnedRightRow.appendChild(ePinnedRightPadding);
	                }
	            };
	            RenderedRow.prototype.createGroupSpanningEntireRowCell = function (padding) {
	                var eRow;
	                // padding means we are on the right hand side of a pinned table, ie
	                // in the main body.
	                if (padding) {
	                    eRow = document.createElement('span');
	                }
	                else {
	                    var rowCellRenderer = this.gridOptionsWrapper.getGroupRowRenderer();
	                    if (!rowCellRenderer) {
	                        rowCellRenderer = {
	                            renderer: 'group',
	                            innerRenderer: this.gridOptionsWrapper.getGroupRowInnerRenderer()
	                        };
	                    }
	                    var params = {
	                        node: this.node,
	                        data: this.node.data,
	                        rowIndex: this.rowIndex,
	                        api: this.gridOptionsWrapper.getApi(),
	                        colDef: {
	                            cellRenderer: rowCellRenderer
	                        }
	                    };
	                    // start duplicated code
	                    var actualCellRenderer;
	                    if (typeof rowCellRenderer === 'object' && rowCellRenderer !== null) {
	                        var cellRendererObj = rowCellRenderer;
	                        actualCellRenderer = this.cellRendererMap[cellRendererObj.renderer];
	                        if (!actualCellRenderer) {
	                            throw 'Cell renderer ' + rowCellRenderer + ' not found, available are ' + Object.keys(this.cellRendererMap);
	                        }
	                    }
	                    else if (typeof rowCellRenderer === 'function') {
	                        actualCellRenderer = rowCellRenderer;
	                    }
	                    else {
	                        throw 'Cell Renderer must be String or Function';
	                    }
	                    var resultFromRenderer = actualCellRenderer(params);
	                    // end duplicated code
	                    if (_.isNodeOrElement(resultFromRenderer)) {
	                        // a dom node or element was returned, so add child
	                        eRow = resultFromRenderer;
	                    }
	                    else {
	                        // otherwise assume it was html, so just insert
	                        eRow = _.loadTemplate(resultFromRenderer);
	                    }
	                }
	                if (this.node.footer) {
	                    _.addCssClass(eRow, 'ag-footer-cell-entire-row');
	                }
	                else {
	                    _.addCssClass(eRow, 'ag-group-cell-entire-row');
	                }
	                return eRow;
	            };
	            RenderedRow.prototype.setMainRowWidth = function (width) {
	                this.vBodyRow.addStyles({ width: width + "px" });
	            };
	            RenderedRow.prototype.createChildScopeOrNull = function (data) {
	                if (this.gridOptionsWrapper.isAngularCompileRows()) {
	                    var newChildScope = this.parentScope.$new();
	                    newChildScope.data = data;
	                    return newChildScope;
	                }
	                else {
	                    return null;
	                }
	            };
	            RenderedRow.prototype.addDynamicStyles = function () {
	                var rowStyle = this.gridOptionsWrapper.getRowStyle();
	                if (rowStyle) {
	                    if (typeof rowStyle === 'function') {
	                        console.log('ag-Grid: rowStyle should be a string or an array, not be a function, use getRowStyle() instead');
	                    }
	                    else {
	                        this.vBodyRow.addStyles(rowStyle);
	                        if (this.pinningLeft) {
	                            this.vPinnedLeftRow.addStyles(rowStyle);
	                        }
	                        if (this.pinningRight) {
	                            this.vPinnedRightRow.addStyles(rowStyle);
	                        }
	                    }
	                }
	                var rowStyleFunc = this.gridOptionsWrapper.getRowStyleFunc();
	                if (rowStyleFunc) {
	                    var params = {
	                        data: this.node.data,
	                        node: this.node,
	                        api: this.gridOptionsWrapper.getApi(),
	                        context: this.gridOptionsWrapper.getContext(),
	                        $scope: this.scope
	                    };
	                    var cssToUseFromFunc = rowStyleFunc(params);
	                    this.vBodyRow.addStyles(cssToUseFromFunc);
	                    if (this.pinningLeft) {
	                        this.vPinnedLeftRow.addStyles(cssToUseFromFunc);
	                    }
	                    if (this.pinningRight) {
	                        this.vPinnedRightRow.addStyles(cssToUseFromFunc);
	                    }
	                }
	            };
	            RenderedRow.prototype.createParams = function () {
	                var params = {
	                    node: this.node,
	                    data: this.node.data,
	                    rowIndex: this.rowIndex,
	                    $scope: this.scope,
	                    context: this.gridOptionsWrapper.getContext(),
	                    api: this.gridOptionsWrapper.getApi()
	                };
	                return params;
	            };
	            RenderedRow.prototype.createEvent = function (event, eventSource) {
	                var agEvent = this.createParams();
	                agEvent.event = event;
	                agEvent.eventSource = eventSource;
	                return agEvent;
	            };
	            RenderedRow.prototype.createRowContainer = function () {
	                var vRow = new ag.vdom.VHtmlElement('div');
	                var that = this;
	                vRow.addEventListener("click", function (event) {
	                    var agEvent = that.createEvent(event, this);
	                    that.eventService.dispatchEvent(grid.Events.EVENT_ROW_CLICKED, agEvent);
	                    // ctrlKey for windows, metaKey for Apple
	                    var multiSelectKeyPressed = event.ctrlKey || event.metaKey;
	                    that.angularGrid.onRowClicked(multiSelectKeyPressed, that.rowIndex, that.node);
	                });
	                vRow.addEventListener("dblclick", function (event) {
	                    var agEvent = that.createEvent(event, this);
	                    that.eventService.dispatchEvent(grid.Events.EVENT_ROW_DOUBLE_CLICKED, agEvent);
	                });
	                return vRow;
	            };
	            RenderedRow.prototype.getRowNode = function () {
	                return this.node;
	            };
	            RenderedRow.prototype.getRowIndex = function () {
	                return this.rowIndex;
	            };
	            RenderedRow.prototype.refreshCells = function (colIds) {
	                if (!colIds) {
	                    return;
	                }
	                var columnsToRefresh = this.columnController.getColumns(colIds);
	                _.iterateObject(this.renderedCells, function (key, renderedCell) {
	                    var colForCel = renderedCell.getColumn();
	                    if (columnsToRefresh.indexOf(colForCel) >= 0) {
	                        renderedCell.refreshCell();
	                    }
	                });
	            };
	            RenderedRow.prototype.addDynamicClasses = function () {
	                var classes = [];
	                classes.push('ag-row');
	                classes.push('ag-row-no-focus');
	                classes.push(this.rowIndex % 2 == 0 ? "ag-row-even" : "ag-row-odd");
	                if (this.selectionController.isNodeSelected(this.node)) {
	                    classes.push("ag-row-selected");
	                }
	                if (this.node.group) {
	                    classes.push("ag-row-group");
	                    // if a group, put the level of the group in
	                    classes.push("ag-row-level-" + this.node.level);
	                    if (!this.node.footer && this.node.expanded) {
	                        classes.push("ag-row-group-expanded");
	                    }
	                    if (!this.node.footer && !this.node.expanded) {
	                        // opposite of expanded is contracted according to the internet.
	                        classes.push("ag-row-group-contracted");
	                    }
	                    if (this.node.footer) {
	                        classes.push("ag-row-footer");
	                    }
	                }
	                else {
	                    // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item
	                    if (this.node.parent) {
	                        classes.push("ag-row-level-" + (this.node.parent.level + 1));
	                    }
	                    else {
	                        classes.push("ag-row-level-0");
	                    }
	                }
	                // add in extra classes provided by the config
	                var gridOptionsRowClass = this.gridOptionsWrapper.getRowClass();
	                if (gridOptionsRowClass) {
	                    if (typeof gridOptionsRowClass === 'function') {
	                        console.warn('ag-Grid: rowClass should not be a function, please use getRowClass instead');
	                    }
	                    else {
	                        if (typeof gridOptionsRowClass === 'string') {
	                            classes.push(gridOptionsRowClass);
	                        }
	                        else if (Array.isArray(gridOptionsRowClass)) {
	                            gridOptionsRowClass.forEach(function (classItem) {
	                                classes.push(classItem);
	                            });
	                        }
	                    }
	                }
	                var gridOptionsRowClassFunc = this.gridOptionsWrapper.getRowClassFunc();
	                if (gridOptionsRowClassFunc) {
	                    var params = {
	                        node: this.node,
	                        data: this.node.data,
	                        rowIndex: this.rowIndex,
	                        context: this.gridOptionsWrapper.getContext(),
	                        api: this.gridOptionsWrapper.getApi()
	                    };
	                    var classToUseFromFunc = gridOptionsRowClassFunc(params);
	                    if (classToUseFromFunc) {
	                        if (typeof classToUseFromFunc === 'string') {
	                            classes.push(classToUseFromFunc);
	                        }
	                        else if (Array.isArray(classToUseFromFunc)) {
	                            classToUseFromFunc.forEach(function (classItem) {
	                                classes.push(classItem);
	                            });
	                        }
	                    }
	                }
	                this.vBodyRow.addClasses(classes);
	                if (this.pinningLeft) {
	                    this.vPinnedLeftRow.addClasses(classes);
	                }
	                if (this.pinningRight) {
	                    this.vPinnedRightRow.addClasses(classes);
	                }
	            };
	            return RenderedRow;
	        })();
	        grid.RenderedRow = RenderedRow;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../svgFactory.ts" />
	/// <reference path="../utils.ts" />
	/// <reference path="../constants.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var svgFactory = grid.SvgFactory.getInstance();
	        var utils = grid.Utils;
	        var constants = grid.Constants;
	        function groupCellRendererFactory(gridOptionsWrapper, selectionRendererFactory, expressionService) {
	            return function groupCellRenderer(params) {
	                var eGroupCell = document.createElement('span');
	                var node = params.node;
	                var cellExpandable = node.group && !node.footer;
	                if (cellExpandable) {
	                    addExpandAndContract(eGroupCell, params);
	                }
	                var checkboxNeeded = params.colDef && params.colDef.cellRenderer && params.colDef.cellRenderer.checkbox && !node.footer;
	                if (checkboxNeeded) {
	                    var eCheckbox = selectionRendererFactory.createSelectionCheckbox(node, params.rowIndex);
	                    eGroupCell.appendChild(eCheckbox);
	                }
	                if (params.colDef && params.colDef.cellRenderer && params.colDef.cellRenderer.innerRenderer) {
	                    createFromInnerRenderer(eGroupCell, params, params.colDef.cellRenderer.innerRenderer);
	                }
	                else if (node.footer) {
	                    createFooterCell(eGroupCell, params);
	                }
	                else if (node.group) {
	                    createGroupCell(eGroupCell, params);
	                }
	                else {
	                    createLeafCell(eGroupCell, params);
	                }
	                // only do this if an indent - as this overwrites the padding that
	                // the theme set, which will make things look 'not aligned' for the
	                // first group level.
	                var suppressPadding = params.colDef && params.colDef.cellRenderer
	                    && params.colDef.cellRenderer.suppressPadding;
	                if (!suppressPadding && (node.footer || node.level > 0)) {
	                    var paddingFactor;
	                    if (params.colDef && params.colDef.cellRenderer && params.colDef.cellRenderer.padding >= 0) {
	                        paddingFactor = params.colDef.cellRenderer.padding;
	                    }
	                    else {
	                        paddingFactor = 10;
	                    }
	                    var paddingPx = node.level * paddingFactor;
	                    if (node.footer) {
	                        paddingPx += 10;
	                    }
	                    else if (!node.group) {
	                        paddingPx += 5;
	                    }
	                    eGroupCell.style.paddingLeft = paddingPx + 'px';
	                }
	                return eGroupCell;
	            };
	            function addExpandAndContract(eGroupCell, params) {
	                var eExpandIcon = createGroupExpandIcon(true);
	                var eContractIcon = createGroupExpandIcon(false);
	                eGroupCell.appendChild(eExpandIcon);
	                eGroupCell.appendChild(eContractIcon);
	                eExpandIcon.addEventListener('click', expandOrContract);
	                eContractIcon.addEventListener('click', expandOrContract);
	                eGroupCell.addEventListener('dblclick', expandOrContract);
	                showAndHideExpandAndContract(eExpandIcon, eContractIcon, params.node.expanded);
	                // if parent cell was passed, then we can listen for when focus is on the cell,
	                // and then expand / contract as the user hits enter or space-bar
	                if (params.eGridCell) {
	                    params.eGridCell.addEventListener('keydown', function (event) {
	                        if (utils.isKeyPressed(event, constants.KEY_ENTER)) {
	                            expandOrContract();
	                            event.preventDefault();
	                        }
	                    });
	                }
	                function expandOrContract() {
	                    expandGroup(eExpandIcon, eContractIcon, params);
	                }
	            }
	            function showAndHideExpandAndContract(eExpandIcon, eContractIcon, expanded) {
	                utils.setVisible(eExpandIcon, !expanded);
	                utils.setVisible(eContractIcon, expanded);
	            }
	            function createFromInnerRenderer(eGroupCell, params, renderer) {
	                utils.useRenderer(eGroupCell, renderer, params);
	            }
	            function getRefreshFromIndex(params) {
	                if (gridOptionsWrapper.isGroupIncludeFooter()) {
	                    return params.rowIndex;
	                }
	                else {
	                    return params.rowIndex + 1;
	                }
	            }
	            function expandGroup(eExpandIcon, eContractIcon, params) {
	                params.node.expanded = !params.node.expanded;
	                var refreshIndex = getRefreshFromIndex(params);
	                params.api.onGroupExpandedOrCollapsed(refreshIndex);
	                showAndHideExpandAndContract(eExpandIcon, eContractIcon, params.node.expanded);
	            }
	            function createGroupExpandIcon(expanded) {
	                var eIcon;
	                if (expanded) {
	                    eIcon = utils.createIcon('groupContracted', gridOptionsWrapper, null, svgFactory.createArrowRightSvg);
	                }
	                else {
	                    eIcon = utils.createIcon('groupExpanded', gridOptionsWrapper, null, svgFactory.createArrowDownSvg);
	                }
	                utils.addCssClass(eIcon, 'ag-group-expand');
	                return eIcon;
	            }
	            // creates cell with 'Total {{key}}' for a group
	            function createFooterCell(eGroupCell, params) {
	                var footerValue;
	                var groupName = getGroupName(params);
	                if (params.colDef && params.colDef.cellRenderer && params.colDef.cellRenderer.footerValueGetter) {
	                    var footerValueGetter = params.colDef.cellRenderer.footerValueGetter;
	                    // params is same as we were given, except we set the value as the item to display
	                    var paramsClone = utils.cloneObject(params);
	                    paramsClone.value = groupName;
	                    if (typeof footerValueGetter === 'function') {
	                        footerValue = footerValueGetter(paramsClone);
	                    }
	                    else if (typeof footerValueGetter === 'string') {
	                        footerValue = expressionService.evaluate(footerValueGetter, paramsClone);
	                    }
	                    else {
	                        console.warn('ag-Grid: footerValueGetter should be either a function or a string (expression)');
	                    }
	                }
	                else {
	                    footerValue = 'Total ' + groupName;
	                }
	                var eText = document.createTextNode(footerValue);
	                eGroupCell.appendChild(eText);
	            }
	            function getGroupName(params) {
	                var cellRenderer = params.colDef.cellRenderer;
	                if (cellRenderer && cellRenderer.keyMap
	                    && typeof cellRenderer.keyMap === 'object' && params.colDef.cellRenderer !== null) {
	                    var valueFromMap = cellRenderer.keyMap[params.node.key];
	                    if (valueFromMap) {
	                        return valueFromMap;
	                    }
	                    else {
	                        return params.node.key;
	                    }
	                }
	                else {
	                    return params.node.key;
	                }
	            }
	            // creates cell with '{{key}} ({{childCount}})' for a group
	            function createGroupCell(eGroupCell, params) {
	                var groupName = getGroupName(params);
	                var colDefOfGroupedCol = params.api.getColumnDef(params.node.field);
	                if (colDefOfGroupedCol && typeof colDefOfGroupedCol.cellRenderer === 'function') {
	                    params.value = groupName;
	                    utils.useRenderer(eGroupCell, colDefOfGroupedCol.cellRenderer, params);
	                }
	                else {
	                    eGroupCell.appendChild(document.createTextNode(groupName));
	                }
	                // only include the child count if it's included, eg if user doing custom aggregation,
	                // then this could be left out, or set to -1, ie no child count
	                var suppressCount = params.colDef.cellRenderer && params.colDef.cellRenderer.suppressCount;
	                if (!suppressCount && params.node.allChildrenCount >= 0) {
	                    eGroupCell.appendChild(document.createTextNode(" (" + params.node.allChildrenCount + ")"));
	                }
	            }
	            // creates cell with '{{key}} ({{childCount}})' for a group
	            function createLeafCell(eParent, params) {
	                if (params.value) {
	                    var eText = document.createTextNode(' ' + params.value);
	                    eParent.appendChild(eText);
	                }
	            }
	        }
	        grid.groupCellRendererFactory = groupCellRendererFactory;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/// <reference path="../constants.ts" />
	/// <reference path="../rowControllers/floatingRowModel.ts" />
	/// <reference path="renderedRow.ts" />
	/// <reference path="../cellRenderers/groupCellRendererFactory.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var RowRenderer = (function () {
	            function RowRenderer() {
	                this.renderedTopFloatingRows = [];
	                this.renderedBottomFloatingRows = [];
	            }
	            RowRenderer.prototype.init = function (columnModel, gridOptionsWrapper, gridPanel, angularGrid, selectionRendererFactory, $compile, $scope, selectionController, expressionService, templateService, valueService, eventService, floatingRowModel) {
	                this.columnModel = columnModel;
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.angularGrid = angularGrid;
	                this.selectionRendererFactory = selectionRendererFactory;
	                this.gridPanel = gridPanel;
	                this.$compile = $compile;
	                this.$scope = $scope;
	                this.selectionController = selectionController;
	                this.expressionService = expressionService;
	                this.templateService = templateService;
	                this.valueService = valueService;
	                this.findAllElements(gridPanel);
	                this.eventService = eventService;
	                this.floatingRowModel = floatingRowModel;
	                this.cellRendererMap = {
	                    'group': grid.groupCellRendererFactory(gridOptionsWrapper, selectionRendererFactory, expressionService),
	                    'default': function (params) {
	                        return params.value;
	                    }
	                };
	                // map of row ids to row objects. keeps track of which elements
	                // are rendered for which rows in the dom.
	                this.renderedRows = {};
	            };
	            RowRenderer.prototype.setRowModel = function (rowModel) {
	                this.rowModel = rowModel;
	            };
	            RowRenderer.prototype.getAllCellsForColumn = function (column) {
	                var eCells = [];
	                _.iterateObject(this.renderedRows, callback);
	                _.iterateObject(this.renderedBottomFloatingRows, callback);
	                _.iterateObject(this.renderedBottomFloatingRows, callback);
	                function callback(key, renderedRow) {
	                    var eCell = renderedRow.getCellForCol(column);
	                    if (eCell) {
	                        eCells.push(eCell);
	                    }
	                }
	                return eCells;
	            };
	            RowRenderer.prototype.onIndividualColumnResized = function (column) {
	                var newWidthPx = column.getActualWidth() + "px";
	                var selectorForAllColsInCell = ".cell-col-" + column.getIndex();
	                this.eParentsOfRows.forEach(function (rowContainer) {
	                    var cellsForThisCol = rowContainer.querySelectorAll(selectorForAllColsInCell);
	                    for (var i = 0; i < cellsForThisCol.length; i++) {
	                        var element = cellsForThisCol[i];
	                        element.style.width = newWidthPx;
	                    }
	                });
	            };
	            RowRenderer.prototype.setMainRowWidths = function () {
	                var mainRowWidth = this.columnModel.getBodyContainerWidth() + "px";
	                this.eAllBodyContainers.forEach(function (container) {
	                    var unpinnedRows = container.querySelectorAll(".ag-row");
	                    for (var i = 0; i < unpinnedRows.length; i++) {
	                        unpinnedRows[i].style.width = mainRowWidth;
	                    }
	                });
	            };
	            RowRenderer.prototype.findAllElements = function (gridPanel) {
	                this.eBodyContainer = gridPanel.getBodyContainer();
	                this.ePinnedLeftColsContainer = gridPanel.getPinnedLeftColsContainer();
	                this.ePinnedRightColsContainer = gridPanel.getPinnedRightColsContainer();
	                this.eFloatingTopContainer = gridPanel.getFloatingTopContainer();
	                this.eFloatingTopPinnedLeftContainer = gridPanel.getPinnedLeftFloatingTop();
	                this.eFloatingTopPinnedRightContainer = gridPanel.getPinnedRightFloatingTop();
	                this.eFloatingBottomContainer = gridPanel.getFloatingBottomContainer();
	                this.eFloatingBottomPinnedLeftContainer = gridPanel.getPinnedLeftFloatingBottom();
	                this.eFloatingBottomPinnedRightContainer = gridPanel.getPinnedRightFloatingBottom();
	                this.eBodyViewport = gridPanel.getBodyViewport();
	                this.eParentsOfRows = gridPanel.getRowsParent();
	                this.eAllBodyContainers = [this.eBodyContainer, this.eFloatingBottomContainer,
	                    this.eFloatingTopContainer];
	                this.eAllPinnedLeftContainers = [
	                    this.ePinnedLeftColsContainer,
	                    this.eFloatingBottomPinnedLeftContainer,
	                    this.eFloatingTopPinnedLeftContainer];
	                this.eAllPinnedRightContainers = [
	                    this.ePinnedRightColsContainer,
	                    this.eFloatingBottomPinnedRightContainer,
	                    this.eFloatingTopPinnedRightContainer];
	            };
	            RowRenderer.prototype.refreshAllFloatingRows = function () {
	                this.refreshFloatingRows(this.renderedTopFloatingRows, this.floatingRowModel.getFloatingTopRowData(), this.eFloatingTopPinnedLeftContainer, this.eFloatingTopPinnedRightContainer, this.eFloatingTopContainer);
	                this.refreshFloatingRows(this.renderedBottomFloatingRows, this.floatingRowModel.getFloatingBottomRowData(), this.eFloatingBottomPinnedLeftContainer, this.eFloatingBottomPinnedRightContainer, this.eFloatingBottomContainer);
	            };
	            RowRenderer.prototype.refreshFloatingRows = function (renderedRows, rowNodes, pinnedLeftContainer, pinnedRightContainer, bodyContainer) {
	                var _this = this;
	                renderedRows.forEach(function (row) {
	                    row.destroy();
	                });
	                renderedRows.length = 0;
	                // if no cols, don't draw row - can we get rid of this???
	                var columns = this.columnModel.getAllDisplayedColumns();
	                if (!columns || columns.length == 0) {
	                    return;
	                }
	                // should we be storing this somewhere???
	                var mainRowWidth = this.columnModel.getBodyContainerWidth();
	                if (rowNodes) {
	                    rowNodes.forEach(function (node, rowIndex) {
	                        var renderedRow = new grid.RenderedRow(_this.gridOptionsWrapper, _this.valueService, _this.$scope, _this.angularGrid, _this.columnModel, _this.expressionService, _this.cellRendererMap, _this.selectionRendererFactory, _this.$compile, _this.templateService, _this.selectionController, _this, bodyContainer, pinnedLeftContainer, pinnedRightContainer, node, rowIndex, _this.eventService);
	                        renderedRow.setMainRowWidth(mainRowWidth);
	                        renderedRows.push(renderedRow);
	                    });
	                }
	            };
	            RowRenderer.prototype.refreshView = function (refreshFromIndex) {
	                if (!this.gridOptionsWrapper.isForPrint()) {
	                    var containerHeight = this.rowModel.getVirtualRowCombinedHeight();
	                    this.eBodyContainer.style.height = containerHeight + "px";
	                    this.ePinnedLeftColsContainer.style.height = containerHeight + "px";
	                    this.ePinnedRightColsContainer.style.height = containerHeight + "px";
	                }
	                this.refreshAllVirtualRows(refreshFromIndex);
	                this.refreshAllFloatingRows();
	            };
	            RowRenderer.prototype.softRefreshView = function () {
	                _.iterateObject(this.renderedRows, function (key, renderedRow) {
	                    renderedRow.softRefresh();
	                });
	            };
	            RowRenderer.prototype.refreshRows = function (rowNodes) {
	                if (!rowNodes || rowNodes.length == 0) {
	                    return;
	                }
	                // we only need to be worried about rendered rows, as this method is
	                // called to whats rendered. if the row isn't rendered, we don't care
	                var indexesToRemove = [];
	                _.iterateObject(this.renderedRows, function (key, renderedRow) {
	                    var rowNode = renderedRow.getRowNode();
	                    if (rowNodes.indexOf(rowNode) >= 0) {
	                        indexesToRemove.push(key);
	                    }
	                });
	                // remove the rows
	                this.removeVirtualRow(indexesToRemove);
	                // add draw them again
	                this.drawVirtualRows();
	            };
	            RowRenderer.prototype.refreshCells = function (rowNodes, colIds) {
	                if (!rowNodes || rowNodes.length == 0) {
	                    return;
	                }
	                // we only need to be worried about rendered rows, as this method is
	                // called to whats rendered. if the row isn't rendered, we don't care
	                _.iterateObject(this.renderedRows, function (key, renderedRow) {
	                    var rowNode = renderedRow.getRowNode();
	                    if (rowNodes.indexOf(rowNode) >= 0) {
	                        renderedRow.refreshCells(colIds);
	                    }
	                });
	            };
	            RowRenderer.prototype.rowDataChanged = function (rows) {
	                // we only need to be worried about rendered rows, as this method is
	                // called to whats rendered. if the row isn't rendered, we don't care
	                var indexesToRemove = [];
	                var renderedRows = this.renderedRows;
	                Object.keys(renderedRows).forEach(function (key) {
	                    var renderedRow = renderedRows[key];
	                    // see if the rendered row is in the list of rows we have to update
	                    if (renderedRow.isDataInList(rows)) {
	                        indexesToRemove.push(key);
	                    }
	                });
	                // remove the rows
	                this.removeVirtualRow(indexesToRemove);
	                // add draw them again
	                this.drawVirtualRows();
	            };
	            RowRenderer.prototype.refreshAllVirtualRows = function (fromIndex) {
	                // remove all current virtual rows, as they have old data
	                var rowsToRemove = Object.keys(this.renderedRows);
	                this.removeVirtualRow(rowsToRemove, fromIndex);
	                // add in new rows
	                this.drawVirtualRows();
	            };
	            // public - removes the group rows and then redraws them again
	            RowRenderer.prototype.refreshGroupRows = function () {
	                // find all the group rows
	                var rowsToRemove = [];
	                var that = this;
	                Object.keys(this.renderedRows).forEach(function (key) {
	                    var renderedRow = that.renderedRows[key];
	                    if (renderedRow.isGroup()) {
	                        rowsToRemove.push(key);
	                    }
	                });
	                // remove the rows
	                this.removeVirtualRow(rowsToRemove);
	                // and draw them back again
	                this.ensureRowsRendered();
	            };
	            // takes array of row indexes
	            RowRenderer.prototype.removeVirtualRow = function (rowsToRemove, fromIndex) {
	                var that = this;
	                // if no fromIndex then set to -1, which will refresh everything
	                var realFromIndex = (typeof fromIndex === 'number') ? fromIndex : -1;
	                rowsToRemove.forEach(function (indexToRemove) {
	                    if (indexToRemove >= realFromIndex) {
	                        that.unbindVirtualRow(indexToRemove);
	                        // if the row was last to have focus, we remove the fact that it has focus
	                        if (that.focusedCell && that.focusedCell.rowIndex == indexToRemove) {
	                            that.focusedCell = null;
	                        }
	                    }
	                });
	            };
	            RowRenderer.prototype.unbindVirtualRow = function (indexToRemove) {
	                var renderedRow = this.renderedRows[indexToRemove];
	                renderedRow.destroy();
	                var event = { node: renderedRow.getRowNode(), rowIndex: indexToRemove };
	                this.eventService.dispatchEvent(grid.Events.EVENT_VIRTUAL_ROW_REMOVED, event);
	                this.angularGrid.onVirtualRowRemoved(indexToRemove);
	                delete this.renderedRows[indexToRemove];
	            };
	            RowRenderer.prototype.drawVirtualRows = function () {
	                this.workOutFirstAndLastRowsToRender();
	                this.ensureRowsRendered();
	            };
	            RowRenderer.prototype.workOutFirstAndLastRowsToRender = function () {
	                var rowCount = this.rowModel.getVirtualRowCount();
	                if (rowCount === 0) {
	                    this.firstVirtualRenderedRow = 0;
	                    this.lastVirtualRenderedRow = -1; // setting to -1 means nothing in range
	                    return;
	                }
	                if (this.gridOptionsWrapper.isForPrint()) {
	                    this.firstVirtualRenderedRow = 0;
	                    this.lastVirtualRenderedRow = rowCount;
	                }
	                else {
	                    var topPixel = this.eBodyViewport.scrollTop;
	                    var bottomPixel = topPixel + this.eBodyViewport.offsetHeight;
	                    var first = this.rowModel.getRowAtPixel(topPixel);
	                    var last = this.rowModel.getRowAtPixel(bottomPixel);
	                    //add in buffer
	                    var buffer = this.gridOptionsWrapper.getRowBuffer();
	                    first = first - buffer;
	                    last = last + buffer;
	                    // adjust, in case buffer extended actual size
	                    if (first < 0) {
	                        first = 0;
	                    }
	                    if (last > rowCount - 1) {
	                        last = rowCount - 1;
	                    }
	                    this.firstVirtualRenderedRow = first;
	                    this.lastVirtualRenderedRow = last;
	                }
	            };
	            RowRenderer.prototype.getFirstVirtualRenderedRow = function () {
	                return this.firstVirtualRenderedRow;
	            };
	            RowRenderer.prototype.getLastVirtualRenderedRow = function () {
	                return this.lastVirtualRenderedRow;
	            };
	            RowRenderer.prototype.ensureRowsRendered = function () {
	                //var start = new Date().getTime();
	                var mainRowWidth = this.columnModel.getBodyContainerWidth();
	                var that = this;
	                // at the end, this array will contain the items we need to remove
	                var rowsToRemove = Object.keys(this.renderedRows);
	                // add in new rows
	                for (var rowIndex = this.firstVirtualRenderedRow; rowIndex <= this.lastVirtualRenderedRow; rowIndex++) {
	                    // see if item already there, and if yes, take it out of the 'to remove' array
	                    if (rowsToRemove.indexOf(rowIndex.toString()) >= 0) {
	                        rowsToRemove.splice(rowsToRemove.indexOf(rowIndex.toString()), 1);
	                        continue;
	                    }
	                    // check this row actually exists (in case overflow buffer window exceeds real data)
	                    var node = this.rowModel.getVirtualRow(rowIndex);
	                    if (node) {
	                        that.insertRow(node, rowIndex, mainRowWidth);
	                    }
	                }
	                // at this point, everything in our 'rowsToRemove' . . .
	                this.removeVirtualRow(rowsToRemove);
	                // if we are doing angular compiling, then do digest the scope here
	                if (this.gridOptionsWrapper.isAngularCompileRows()) {
	                    // we do it in a timeout, in case we are already in an apply
	                    setTimeout(function () {
	                        that.$scope.$apply();
	                    }, 0);
	                }
	                //var end = new Date().getTime();
	                //console.log(end-start);
	            };
	            RowRenderer.prototype.insertRow = function (node, rowIndex, mainRowWidth) {
	                var columns = this.columnModel.getAllDisplayedColumns();
	                // if no cols, don't draw row
	                if (!columns || columns.length == 0) {
	                    return;
	                }
	                var renderedRow = new grid.RenderedRow(this.gridOptionsWrapper, this.valueService, this.$scope, this.angularGrid, this.columnModel, this.expressionService, this.cellRendererMap, this.selectionRendererFactory, this.$compile, this.templateService, this.selectionController, this, this.eBodyContainer, this.ePinnedLeftColsContainer, this.ePinnedRightColsContainer, node, rowIndex, this.eventService);
	                renderedRow.setMainRowWidth(mainRowWidth);
	                this.renderedRows[rowIndex] = renderedRow;
	            };
	            RowRenderer.prototype.getRenderedNodes = function () {
	                var renderedRows = this.renderedRows;
	                return Object.keys(renderedRows).map(function (key) {
	                    return renderedRows[key].getRowNode();
	                });
	            };
	            RowRenderer.prototype.getIndexOfRenderedNode = function (node) {
	                var renderedRows = this.renderedRows;
	                var keys = Object.keys(renderedRows);
	                for (var i = 0; i < keys.length; i++) {
	                    var key = keys[i];
	                    if (renderedRows[key].getRowNode() === node) {
	                        return renderedRows[key].getRowIndex();
	                    }
	                }
	                return -1;
	            };
	            // we use index for rows, but column object for columns, as the next column (by index) might not
	            // be visible (header grouping) so it's not reliable, so using the column object instead.
	            RowRenderer.prototype.navigateToNextCell = function (key, rowIndex, column) {
	                var cellToFocus = { rowIndex: rowIndex, column: column };
	                var renderedRow;
	                var eCell;
	                // we keep searching for a next cell until we find one. this is how the group rows get skipped
	                while (!eCell) {
	                    cellToFocus = this.getNextCellToFocus(key, cellToFocus);
	                    // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid
	                    if (!cellToFocus) {
	                        return;
	                    }
	                    // see if the next cell is selectable, if yes, use it, if not, skip it
	                    renderedRow = this.renderedRows[cellToFocus.rowIndex];
	                    eCell = renderedRow.getCellForCol(cellToFocus.column);
	                }
	                // this scrolls the row into view
	                this.gridPanel.ensureIndexVisible(renderedRow.getRowIndex());
	                // this changes the css on the cell
	                this.focusCell(eCell, cellToFocus.rowIndex, cellToFocus.column.getIndex(), cellToFocus.column.getColDef(), true);
	            };
	            RowRenderer.prototype.getNextCellToFocus = function (key, lastCellToFocus) {
	                var lastRowIndex = lastCellToFocus.rowIndex;
	                var lastColumn = lastCellToFocus.column;
	                var nextRowToFocus;
	                var nextColumnToFocus;
	                switch (key) {
	                    case grid.Constants.KEY_UP:
	                        // if already on top row, do nothing
	                        if (lastRowIndex === this.firstVirtualRenderedRow) {
	                            return null;
	                        }
	                        nextRowToFocus = lastRowIndex - 1;
	                        nextColumnToFocus = lastColumn;
	                        break;
	                    case grid.Constants.KEY_DOWN:
	                        // if already on bottom, do nothing
	                        if (lastRowIndex === this.lastVirtualRenderedRow) {
	                            return null;
	                        }
	                        nextRowToFocus = lastRowIndex + 1;
	                        nextColumnToFocus = lastColumn;
	                        break;
	                    case grid.Constants.KEY_RIGHT:
	                        var colToRight = this.columnModel.getDisplayedColAfter(lastColumn);
	                        // if already on right, do nothing
	                        if (!colToRight) {
	                            return null;
	                        }
	                        nextRowToFocus = lastRowIndex;
	                        nextColumnToFocus = colToRight;
	                        break;
	                    case grid.Constants.KEY_LEFT:
	                        var colToLeft = this.columnModel.getDisplayedColBefore(lastColumn);
	                        // if already on left, do nothing
	                        if (!colToLeft) {
	                            return null;
	                        }
	                        nextRowToFocus = lastRowIndex;
	                        nextColumnToFocus = colToLeft;
	                        break;
	                }
	                return {
	                    rowIndex: nextRowToFocus,
	                    column: nextColumnToFocus
	                };
	            };
	            RowRenderer.prototype.onRowSelected = function (rowIndex, selected) {
	                if (this.renderedRows[rowIndex]) {
	                    this.renderedRows[rowIndex].onRowSelected(selected);
	                }
	            };
	            // called by the renderedRow
	            RowRenderer.prototype.focusCell = function (eCell, rowIndex, colIndex, colDef, forceBrowserFocus) {
	                // do nothing if cell selection is off
	                if (this.gridOptionsWrapper.isSuppressCellSelection()) {
	                    return;
	                }
	                this.eParentsOfRows.forEach(function (rowContainer) {
	                    // remove any previous focus
	                    _.querySelectorAll_replaceCssClass(rowContainer, '.ag-cell-focus', 'ag-cell-focus', 'ag-cell-no-focus');
	                    _.querySelectorAll_replaceCssClass(rowContainer, '.ag-row-focus', 'ag-row-focus', 'ag-row-no-focus');
	                    var selectorForCell = '[row="' + rowIndex + '"] [col="' + colIndex + '"]';
	                    _.querySelectorAll_replaceCssClass(rowContainer, selectorForCell, 'ag-cell-no-focus', 'ag-cell-focus');
	                    var selectorForRow = '[row="' + rowIndex + '"]';
	                    _.querySelectorAll_replaceCssClass(rowContainer, selectorForRow, 'ag-row-no-focus', 'ag-row-focus');
	                });
	                this.focusedCell = { rowIndex: rowIndex, colIndex: colIndex, node: this.rowModel.getVirtualRow(rowIndex), colDef: colDef };
	                // this puts the browser focus on the cell (so it gets key presses)
	                if (forceBrowserFocus) {
	                    eCell.focus();
	                }
	                this.eventService.dispatchEvent(grid.Events.EVENT_CELL_FOCUSED, this.focusedCell);
	            };
	            // for API
	            RowRenderer.prototype.getFocusedCell = function () {
	                return this.focusedCell;
	            };
	            // called via API
	            RowRenderer.prototype.setFocusedCell = function (rowIndex, colIndex) {
	                var renderedRow = this.renderedRows[rowIndex];
	                var column = this.columnModel.getAllDisplayedColumns()[colIndex];
	                if (renderedRow && column) {
	                    var eCell = renderedRow.getCellForCol(column);
	                    this.focusCell(eCell, rowIndex, colIndex, column.getColDef(), true);
	                }
	            };
	            // called by the cell, when tab is pressed while editing
	            RowRenderer.prototype.startEditingNextCell = function (rowIndex, column, shiftKey) {
	                var firstRowToCheck = this.firstVirtualRenderedRow;
	                var lastRowToCheck = this.lastVirtualRenderedRow;
	                var currentRowIndex = rowIndex;
	                var visibleColumns = this.columnModel.getAllDisplayedColumns();
	                var currentCol = column;
	                while (true) {
	                    var indexOfCurrentCol = visibleColumns.indexOf(currentCol);
	                    // move backward
	                    if (shiftKey) {
	                        // move along to the previous cell
	                        currentCol = visibleColumns[indexOfCurrentCol - 1];
	                        // check if end of the row, and if so, go back a row
	                        if (!currentCol) {
	                            currentCol = visibleColumns[visibleColumns.length - 1];
	                            currentRowIndex--;
	                        }
	                        // if got to end of rendered rows, then quit looking
	                        if (currentRowIndex < firstRowToCheck) {
	                            return;
	                        }
	                    }
	                    else {
	                        // move along to the next cell
	                        currentCol = visibleColumns[indexOfCurrentCol + 1];
	                        // check if end of the row, and if so, go forward a row
	                        if (!currentCol) {
	                            currentCol = visibleColumns[0];
	                            currentRowIndex++;
	                        }
	                        // if got to end of rendered rows, then quit looking
	                        if (currentRowIndex > lastRowToCheck) {
	                            return;
	                        }
	                    }
	                    var nextRenderedRow = this.renderedRows[currentRowIndex];
	                    var nextRenderedCell = nextRenderedRow.getRenderedCellForColumn(currentCol);
	                    if (nextRenderedCell.isCellEditable()) {
	                        nextRenderedCell.startEditing();
	                        nextRenderedCell.focusCell(false);
	                        return;
	                    }
	                }
	            };
	            return RowRenderer;
	        })();
	        grid.RowRenderer = RowRenderer;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="utils.ts" />
	/// <reference path="rendering/rowRenderer.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var utils = grid.Utils;
	        // these constants are used for determining if groups should
	        // be selected or deselected when selecting groups, and the group
	        // then selects the children.
	        var SELECTED = 0;
	        var UNSELECTED = 1;
	        var MIXED = 2;
	        var DO_NOT_CARE = 3;
	        var SelectionController = (function () {
	            function SelectionController() {
	            }
	            SelectionController.prototype.init = function (angularGrid, gridPanel, gridOptionsWrapper, $scope, rowRenderer, eventService) {
	                this.eParentsOfRows = gridPanel.getRowsParent();
	                this.angularGrid = angularGrid;
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.$scope = $scope;
	                this.rowRenderer = rowRenderer;
	                this.eventService = eventService;
	                this.initSelectedNodesById();
	                this.selectedRows = [];
	            };
	            SelectionController.prototype.initSelectedNodesById = function () {
	                this.selectedNodesById = {};
	            };
	            SelectionController.prototype.getSelectedNodesById = function () {
	                return this.selectedNodesById;
	            };
	            SelectionController.prototype.getSelectedRows = function () {
	                return this.selectedRows;
	            };
	            SelectionController.prototype.getSelectedNodes = function () {
	                var selectedNodes = [];
	                var keys = Object.keys(this.selectedNodesById);
	                for (var i = 0; i < keys.length; i++) {
	                    var id = keys[i];
	                    var selectedNode = this.selectedNodesById[id];
	                    selectedNodes.push(selectedNode);
	                }
	                return selectedNodes;
	            };
	            // returns a list of all nodes at 'best cost' - a feature to be used
	            // with groups / trees. if a group has all it's children selected,
	            // then the group appears in the result, but not the children.
	            // Designed for use with 'children' as the group selection type,
	            // where groups don't actually appear in the selection normally.
	            SelectionController.prototype.getBestCostNodeSelection = function () {
	                if (typeof this.rowModel.getTopLevelNodes !== 'function') {
	                    throw 'selectAll not available when rows are on the server';
	                }
	                var topLevelNodes = this.rowModel.getTopLevelNodes();
	                var result = [];
	                var that = this;
	                // recursive function, to find the selected nodes
	                function traverse(nodes) {
	                    for (var i = 0, l = nodes.length; i < l; i++) {
	                        var node = nodes[i];
	                        if (that.isNodeSelected(node)) {
	                            result.push(node);
	                        }
	                        else {
	                            // if not selected, then if it's a group, and the group
	                            // has children, continue to search for selections
	                            if (node.group && node.children) {
	                                traverse(node.children);
	                            }
	                        }
	                    }
	                }
	                traverse(topLevelNodes);
	                return result;
	            };
	            SelectionController.prototype.setRowModel = function (rowModel) {
	                this.rowModel = rowModel;
	            };
	            // this clears the selection, but doesn't clear down the css - when it is called, the
	            // caller then gets the grid to refresh.
	            SelectionController.prototype.deselectAll = function () {
	                this.initSelectedNodesById();
	                //var keys = Object.keys(this.selectedNodesById);
	                //for (var i = 0; i < keys.length; i++) {
	                //    delete this.selectedNodesById[keys[i]];
	                //}
	                this.syncSelectedRowsAndCallListener();
	            };
	            // this selects everything, but doesn't clear down the css - when it is called, the
	            // caller then gets the grid to refresh.
	            SelectionController.prototype.selectAll = function () {
	                if (typeof this.rowModel.getTopLevelNodes !== 'function') {
	                    throw 'selectAll not available when rows are on the server';
	                }
	                var selectedNodesById = this.selectedNodesById;
	                // if the selection is "don't include groups", then we don't include them!
	                var includeGroups = !this.gridOptionsWrapper.isGroupSelectsChildren();
	                function recursivelySelect(nodes) {
	                    if (nodes) {
	                        for (var i = 0; i < nodes.length; i++) {
	                            var node = nodes[i];
	                            if (node.group) {
	                                recursivelySelect(node.children);
	                                if (includeGroups) {
	                                    selectedNodesById[node.id] = node;
	                                }
	                            }
	                            else {
	                                selectedNodesById[node.id] = node;
	                            }
	                        }
	                    }
	                }
	                var topLevelNodes = this.rowModel.getTopLevelNodes();
	                recursivelySelect(topLevelNodes);
	                this.syncSelectedRowsAndCallListener();
	            };
	            SelectionController.prototype.selectNode = function (node, tryMulti, suppressEvents) {
	                var multiSelect = this.gridOptionsWrapper.isRowSelectionMulti() && tryMulti;
	                // if the node is a group, then selecting this is the same as selecting the parent,
	                // so to have only one flow through the below, we always select the header parent
	                // (which then has the side effect of selecting the child).
	                var nodeToSelect;
	                if (node.footer) {
	                    nodeToSelect = node.sibling;
	                }
	                else {
	                    nodeToSelect = node;
	                }
	                // at the end, if this is true, we inform the callback
	                var atLeastOneItemUnselected = false;
	                var atLeastOneItemSelected = false;
	                // see if rows to be deselected
	                if (!multiSelect) {
	                    atLeastOneItemUnselected = this.doWorkOfDeselectAllNodes(null, suppressEvents);
	                }
	                if (this.gridOptionsWrapper.isGroupSelectsChildren() && nodeToSelect.group) {
	                    // don't select the group, select the children instead
	                    atLeastOneItemSelected = this.recursivelySelectAllChildren(nodeToSelect);
	                }
	                else {
	                    // see if row needs to be selected
	                    atLeastOneItemSelected = this.doWorkOfSelectNode(nodeToSelect, suppressEvents);
	                }
	                if (atLeastOneItemUnselected || atLeastOneItemSelected) {
	                    this.syncSelectedRowsAndCallListener(suppressEvents);
	                }
	                this.updateGroupParentsIfNeeded();
	            };
	            SelectionController.prototype.recursivelySelectAllChildren = function (node, suppressEvents) {
	                var atLeastOne = false;
	                if (node.children) {
	                    for (var i = 0; i < node.children.length; i++) {
	                        var child = node.children[i];
	                        if (child.group) {
	                            if (this.recursivelySelectAllChildren(child)) {
	                                atLeastOne = true;
	                            }
	                        }
	                        else {
	                            if (this.doWorkOfSelectNode(child, suppressEvents)) {
	                                atLeastOne = true;
	                            }
	                        }
	                    }
	                }
	                return atLeastOne;
	            };
	            SelectionController.prototype.recursivelyDeselectAllChildren = function (node, suppressEvents) {
	                if (node.children) {
	                    for (var i = 0; i < node.children.length; i++) {
	                        var child = node.children[i];
	                        if (child.group) {
	                            this.recursivelyDeselectAllChildren(child, suppressEvents);
	                        }
	                        else {
	                            this.deselectRealNode(child, suppressEvents);
	                        }
	                    }
	                }
	            };
	            // 1 - selects a node
	            // 2 - updates the UI
	            // 3 - calls callbacks
	            SelectionController.prototype.doWorkOfSelectNode = function (node, suppressEvents) {
	                if (this.selectedNodesById[node.id]) {
	                    return false;
	                }
	                this.selectedNodesById[node.id] = node;
	                this.addCssClassForNode_andInformVirtualRowListener(node);
	                // also color in the footer if there is one
	                if (node.group && node.expanded && node.sibling) {
	                    this.addCssClassForNode_andInformVirtualRowListener(node.sibling);
	                }
	                // inform the rowSelected listener, if any
	                if (!suppressEvents) {
	                    var event = { node: node };
	                    this.eventService.dispatchEvent(grid.Events.EVENT_ROW_SELECTED, event);
	                }
	                return true;
	            };
	            // 1 - selects a node
	            // 2 - updates the UI
	            // 3 - calls callbacks
	            // wow - what a big name for a method, exception case, it's saying what the method does
	            SelectionController.prototype.addCssClassForNode_andInformVirtualRowListener = function (node) {
	                var virtualRenderedRowIndex = this.rowRenderer.getIndexOfRenderedNode(node);
	                if (virtualRenderedRowIndex >= 0) {
	                    this.eParentsOfRows.forEach(function (rowContainer) {
	                        utils.querySelectorAll_addCssClass(rowContainer, '[row="' + virtualRenderedRowIndex + '"]', 'ag-row-selected');
	                    });
	                    // inform virtual row listener
	                    this.angularGrid.onVirtualRowSelected(virtualRenderedRowIndex, true);
	                }
	            };
	            // 1 - un-selects a node
	            // 2 - updates the UI
	            // 3 - calls callbacks
	            SelectionController.prototype.doWorkOfDeselectAllNodes = function (nodeToKeepSelected, suppressEvents) {
	                // not doing multi-select, so deselect everything other than the 'just selected' row
	                var atLeastOneSelectionChange;
	                var selectedNodeKeys = Object.keys(this.selectedNodesById);
	                for (var i = 0; i < selectedNodeKeys.length; i++) {
	                    // skip the 'just selected' row
	                    var key = selectedNodeKeys[i];
	                    var nodeToDeselect = this.selectedNodesById[key];
	                    if (nodeToDeselect === nodeToKeepSelected) {
	                        continue;
	                    }
	                    else {
	                        this.deselectRealNode(nodeToDeselect, suppressEvents);
	                        atLeastOneSelectionChange = true;
	                    }
	                }
	                return atLeastOneSelectionChange;
	            };
	            SelectionController.prototype.deselectRealNode = function (node, suppressEvents) {
	                // deselect the css
	                this.removeCssClassForNode(node);
	                // if node is a header, and if it has a sibling footer, deselect the footer also
	                if (node.group && node.expanded && node.sibling) {
	                    this.removeCssClassForNode(node.sibling);
	                }
	                // remove the row
	                delete this.selectedNodesById[node.id];
	                if (!suppressEvents) {
	                    var event = { node: node };
	                    this.eventService.dispatchEvent(grid.Events.EVENT_ROW_DESELECTED, event);
	                }
	            };
	            SelectionController.prototype.removeCssClassForNode = function (node) {
	                var virtualRenderedRowIndex = this.rowRenderer.getIndexOfRenderedNode(node);
	                if (virtualRenderedRowIndex >= 0) {
	                    this.eParentsOfRows.forEach(function (rowContainer) {
	                        utils.querySelectorAll_removeCssClass(rowContainer, '[row="' + virtualRenderedRowIndex + '"]', 'ag-row-selected');
	                    });
	                    // inform virtual row listener
	                    this.angularGrid.onVirtualRowSelected(virtualRenderedRowIndex, false);
	                }
	            };
	            // used by selectionRendererFactory
	            SelectionController.prototype.deselectIndex = function (rowIndex, suppressEvents) {
	                if (suppressEvents === void 0) { suppressEvents = false; }
	                var node = this.rowModel.getVirtualRow(rowIndex);
	                this.deselectNode(node, suppressEvents);
	            };
	            // used by api
	            SelectionController.prototype.deselectNode = function (node, suppressEvents) {
	                if (suppressEvents === void 0) { suppressEvents = false; }
	                if (node) {
	                    if (this.gridOptionsWrapper.isGroupSelectsChildren() && node.group) {
	                        // want to deselect children, not this node, so recursively deselect
	                        this.recursivelyDeselectAllChildren(node, suppressEvents);
	                    }
	                    else {
	                        this.deselectRealNode(node, suppressEvents);
	                    }
	                }
	                this.syncSelectedRowsAndCallListener();
	                this.updateGroupParentsIfNeeded();
	            };
	            // used by selectionRendererFactory & api
	            SelectionController.prototype.selectIndex = function (index, tryMulti, suppressEvents) {
	                if (suppressEvents === void 0) { suppressEvents = false; }
	                var node = this.rowModel.getVirtualRow(index);
	                this.selectNode(node, tryMulti, suppressEvents);
	            };
	            // updates the selectedRows with the selectedNodes and calls selectionChanged listener
	            SelectionController.prototype.syncSelectedRowsAndCallListener = function (suppressEvents) {
	                // update selected rows
	                var selectedRows = this.selectedRows;
	                var oldCount = selectedRows.length;
	                // clear selected rows
	                selectedRows.length = 0;
	                var keys = Object.keys(this.selectedNodesById);
	                for (var i = 0; i < keys.length; i++) {
	                    if (this.selectedNodesById[keys[i]] !== undefined) {
	                        var selectedNode = this.selectedNodesById[keys[i]];
	                        selectedRows.push(selectedNode.data);
	                    }
	                }
	                // this stop the event firing the very first the time grid is initialised. without this, the documentation
	                // page had a popup in the 'selection' page as soon as the page was loaded!!
	                var nothingChangedMustBeInitialising = oldCount === 0 && selectedRows.length === 0;
	                if (!nothingChangedMustBeInitialising && !suppressEvents) {
	                    var event = {
	                        selectedNodesById: this.selectedNodesById,
	                        selectedRows: this.selectedRows
	                    };
	                    this.eventService.dispatchEvent(grid.Events.EVENT_SELECTION_CHANGED, event);
	                }
	                var that = this;
	                if (this.$scope) {
	                    setTimeout(function () {
	                        that.$scope.$apply();
	                    }, 0);
	                }
	            };
	            SelectionController.prototype.recursivelyCheckIfSelected = function (node) {
	                var foundSelected = false;
	                var foundUnselected = false;
	                if (node.children) {
	                    for (var i = 0; i < node.children.length; i++) {
	                        var child = node.children[i];
	                        var result;
	                        if (child.group) {
	                            result = this.recursivelyCheckIfSelected(child);
	                            switch (result) {
	                                case SELECTED:
	                                    foundSelected = true;
	                                    break;
	                                case UNSELECTED:
	                                    foundUnselected = true;
	                                    break;
	                                case MIXED:
	                                    foundSelected = true;
	                                    foundUnselected = true;
	                                    break;
	                            }
	                        }
	                        else {
	                            if (this.isNodeSelected(child)) {
	                                foundSelected = true;
	                            }
	                            else {
	                                foundUnselected = true;
	                            }
	                        }
	                        if (foundSelected && foundUnselected) {
	                            // if mixed, then no need to go further, just return up the chain
	                            return MIXED;
	                        }
	                    }
	                }
	                // got this far, so no conflicts, either all children selected, unselected, or neither
	                if (foundSelected) {
	                    return SELECTED;
	                }
	                else if (foundUnselected) {
	                    return UNSELECTED;
	                }
	                else {
	                    return DO_NOT_CARE;
	                }
	            };
	            // used by selectionRendererFactory
	            // returns:
	            // true: if selected
	            // false: if unselected
	            // undefined: if it's a group and 'children selection' is used and 'children' are a mix of selected and unselected
	            SelectionController.prototype.isNodeSelected = function (node) {
	                if (this.gridOptionsWrapper.isGroupSelectsChildren() && node.group) {
	                    // doing child selection, we need to traverse the children
	                    var resultOfChildren = this.recursivelyCheckIfSelected(node);
	                    switch (resultOfChildren) {
	                        case SELECTED:
	                            return true;
	                        case UNSELECTED:
	                            return false;
	                        default:
	                            return undefined;
	                    }
	                }
	                else {
	                    return this.selectedNodesById[node.id] !== undefined;
	                }
	            };
	            SelectionController.prototype.updateGroupParentsIfNeeded = function () {
	                // we only do this if parent nodes are responsible
	                // for selecting their children.
	                if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {
	                    return;
	                }
	                var firstRow = this.rowRenderer.getFirstVirtualRenderedRow();
	                var lastRow = this.rowRenderer.getLastVirtualRenderedRow();
	                for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {
	                    // see if node is a group
	                    var node = this.rowModel.getVirtualRow(rowIndex);
	                    if (node.group) {
	                        var selected = this.isNodeSelected(node);
	                        this.angularGrid.onVirtualRowSelected(rowIndex, selected);
	                        this.eParentsOfRows.forEach(function (rowContainer) {
	                            if (selected) {
	                                utils.querySelectorAll_addCssClass(rowContainer, '[row="' + rowIndex + '"]', 'ag-row-selected');
	                            }
	                            else {
	                                utils.querySelectorAll_removeCssClass(rowContainer, '[row="' + rowIndex + '"]', 'ag-row-selected');
	                            }
	                        });
	                    }
	                }
	            };
	            return SelectionController;
	        })();
	        grid.SelectionController = SelectionController;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var RenderedHeaderElement = (function () {
	            function RenderedHeaderElement(eRoot) {
	                this.eRoot = eRoot;
	            }
	            // methods implemented by the base classes
	            RenderedHeaderElement.prototype.destroy = function () { };
	            RenderedHeaderElement.prototype.refreshFilterIcon = function () { };
	            RenderedHeaderElement.prototype.refreshSortIcon = function () { };
	            RenderedHeaderElement.prototype.onDragStart = function () { };
	            RenderedHeaderElement.prototype.onDragging = function (dragChange, finished) { };
	            RenderedHeaderElement.prototype.onIndividualColumnResized = function (column) { };
	            RenderedHeaderElement.prototype.getGui = function () { return null; };
	            RenderedHeaderElement.prototype.addDragHandler = function (eDraggableElement) {
	                var that = this;
	                eDraggableElement.addEventListener('mousedown', function (downEvent) {
	                    that.onDragStart();
	                    that.eRoot.style.cursor = "col-resize";
	                    that.dragStartX = downEvent.clientX;
	                    var listenersToRemove = {};
	                    var lastDelta = 0;
	                    listenersToRemove.mousemove = function (moveEvent) {
	                        var newX = moveEvent.clientX;
	                        lastDelta = newX - that.dragStartX;
	                        that.onDragging(lastDelta, false);
	                    };
	                    listenersToRemove.mouseup = function () {
	                        that.stopDragging(listenersToRemove, lastDelta);
	                    };
	                    listenersToRemove.mouseleave = function () {
	                        that.stopDragging(listenersToRemove, lastDelta);
	                    };
	                    that.eRoot.addEventListener('mousemove', listenersToRemove.mousemove);
	                    that.eRoot.addEventListener('mouseup', listenersToRemove.mouseup);
	                    that.eRoot.addEventListener('mouseleave', listenersToRemove.mouseleave);
	                });
	            };
	            RenderedHeaderElement.prototype.stopDragging = function (listenersToRemove, dragChange) {
	                this.eRoot.style.cursor = "";
	                var that = this;
	                _.iterateObject(listenersToRemove, function (key, listener) {
	                    that.eRoot.removeEventListener(key, listener);
	                });
	                that.onDragging(dragChange, true);
	            };
	            return RenderedHeaderElement;
	        })();
	        grid.RenderedHeaderElement = RenderedHeaderElement;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path='../utils.ts' />
	/// <reference path='../filter/filterManager.ts' />
	/// <reference path='../gridOptionsWrapper.ts' />
	/// <reference path='../columnController/columnController.ts' />
	/// <reference path='renderedHeaderElement.ts' />
	/// <reference path='headerTemplateLoader.ts' />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var RenderedHeaderCell = (function (_super) {
	            __extends(RenderedHeaderCell, _super);
	            function RenderedHeaderCell(column, parentGroup, gridOptionsWrapper, parentScope, filterManager, columnController, $compile, angularGrid, eRoot, headerTemplateLoader) {
	                _super.call(this, eRoot);
	                this.column = column;
	                this.parentGroup = parentGroup;
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.parentScope = parentScope;
	                this.filterManager = filterManager;
	                this.columnController = columnController;
	                this.$compile = $compile;
	                this.grid = angularGrid;
	                this.headerTemplateLoader = headerTemplateLoader;
	                this.setupComponents();
	            }
	            RenderedHeaderCell.prototype.getGui = function () {
	                return this.eHeaderCell;
	            };
	            RenderedHeaderCell.prototype.destroy = function () {
	                if (this.childScope) {
	                    this.childScope.$destroy();
	                }
	            };
	            RenderedHeaderCell.prototype.createScope = function () {
	                if (this.gridOptionsWrapper.isAngularCompileHeaders()) {
	                    this.childScope = this.parentScope.$new();
	                    this.childScope.colDef = this.column.getColDef();
	                    this.childScope.colIndex = this.column.getIndex();
	                    this.childScope.colDefWrapper = this.column;
	                }
	            };
	            RenderedHeaderCell.prototype.addAttributes = function () {
	                this.eHeaderCell.setAttribute("col", (this.column.getIndex() !== undefined
	                    && this.column.getIndex() !== null)
	                    ? this.column.getIndex().toString() : '');
	                this.eHeaderCell.setAttribute("colId", this.column.getColId());
	            };
	            RenderedHeaderCell.prototype.addMenu = function () {
	                var eMenu = this.eHeaderCell.querySelector('#agMenu');
	                // if no menu provided in template, do nothing
	                if (!eMenu) {
	                    return;
	                }
	                var weWantMenu = this.gridOptionsWrapper.isEnableFilter() && !this.column.getColDef().suppressMenu;
	                if (!weWantMenu) {
	                    _.removeFromParent(eMenu);
	                    return;
	                }
	                var that = this;
	                eMenu.addEventListener('click', function () {
	                    that.filterManager.showFilter(that.column, this);
	                });
	                if (!this.gridOptionsWrapper.isSuppressMenuHide()) {
	                    eMenu.style.opacity = '0';
	                    this.eHeaderCell.addEventListener('mouseenter', function () {
	                        eMenu.style.opacity = '1';
	                    });
	                    this.eHeaderCell.addEventListener('mouseleave', function () {
	                        eMenu.style.opacity = '0';
	                    });
	                }
	                var style = eMenu.style;
	                style['transition'] = 'opacity 0.5s, border 0.2s';
	                style['-webkit-transition'] = 'opacity 0.5s, border 0.2s';
	            };
	            RenderedHeaderCell.prototype.removeSortIcons = function () {
	                _.removeFromParent(this.eHeaderCell.querySelector('#agSortAsc'));
	                _.removeFromParent(this.eHeaderCell.querySelector('#agSortDesc'));
	                _.removeFromParent(this.eHeaderCell.querySelector('#agNoSort'));
	            };
	            RenderedHeaderCell.prototype.addSortIcons = function () {
	                this.eSortAsc = this.eHeaderCell.querySelector('#agSortAsc');
	                this.eSortDesc = this.eHeaderCell.querySelector('#agSortDesc');
	                this.eSortNone = this.eHeaderCell.querySelector('#agNoSort');
	                if (this.eSortAsc) {
	                    this.eSortAsc.style.display = 'none';
	                }
	                if (this.eSortDesc) {
	                    this.eSortDesc.style.display = 'none';
	                }
	                var showingNoSortIcon = this.column.getColDef().unSortIcon || this.gridOptionsWrapper.isUnSortIcon();
	                // 'no sort' icon
	                if (!showingNoSortIcon) {
	                    _.removeFromParent(this.eSortNone);
	                }
	            };
	            RenderedHeaderCell.prototype.setupComponents = function () {
	                this.eHeaderCell = this.headerTemplateLoader.createHeaderElement(this.column);
	                _.addCssClass(this.eHeaderCell, 'ag-header-cell');
	                this.createScope();
	                this.addAttributes();
	                this.addHeaderClassesFromCollDef();
	                var colDef = this.column.getColDef();
	                // add tooltip if exists
	                if (colDef.headerTooltip) {
	                    this.eHeaderCell.title = colDef.headerTooltip;
	                }
	                this.addResize();
	                this.addMenu();
	                // label div
	                this.eText = this.eHeaderCell.querySelector('#agText');
	                // add in sort icons
	                this.addSort();
	                // add in filter icon
	                this.eFilterIcon = this.eHeaderCell.querySelector('#agFilter');
	                // render the cell, use a renderer if one is provided
	                var headerCellRenderer;
	                if (colDef.headerCellRenderer) {
	                    headerCellRenderer = colDef.headerCellRenderer;
	                }
	                else if (this.gridOptionsWrapper.getHeaderCellRenderer()) {
	                    headerCellRenderer = this.gridOptionsWrapper.getHeaderCellRenderer();
	                }
	                var headerNameValue = this.columnController.getDisplayNameForCol(this.column);
	                if (this.eText) {
	                    if (headerCellRenderer) {
	                        this.useRenderer(headerNameValue, headerCellRenderer);
	                    }
	                    else {
	                        // no renderer, default text render
	                        this.eText.className = 'ag-header-cell-text';
	                        this.eText.innerHTML = headerNameValue;
	                    }
	                }
	                this.eHeaderCell.style.width = _.formatWidth(this.column.getActualWidth());
	                this.refreshFilterIcon();
	                this.refreshSortIcon();
	            };
	            RenderedHeaderCell.prototype.addSort = function () {
	                var enableSorting = this.gridOptionsWrapper.isEnableSorting() && !this.column.getColDef().suppressSorting;
	                if (enableSorting) {
	                    this.addSortIcons();
	                    this.addSortHandling();
	                }
	                else {
	                    this.removeSortIcons();
	                }
	            };
	            RenderedHeaderCell.prototype.addResize = function () {
	                var _this = this;
	                var colDef = this.column.getColDef();
	                var eResize = this.eHeaderCell.querySelector('#agResizeBar');
	                // if no eResize in template, do nothing
	                if (!eResize) {
	                    return;
	                }
	                var weWantResize = this.gridOptionsWrapper.isEnableColResize() && !colDef.suppressResize;
	                if (!weWantResize) {
	                    _.removeFromParent(eResize);
	                    return;
	                }
	                this.addDragHandler(eResize);
	                var weWantAutoSize = !this.gridOptionsWrapper.isSuppressAutoSize() && !colDef.suppressAutoSize;
	                if (weWantAutoSize) {
	                    eResize.addEventListener('dblclick', function (event) {
	                        _this.columnController.autoSizeColumn(_this.column);
	                    });
	                }
	            };
	            RenderedHeaderCell.prototype.useRenderer = function (headerNameValue, headerCellRenderer) {
	                // renderer provided, use it
	                var cellRendererParams = {
	                    colDef: this.column.getColDef(),
	                    $scope: this.childScope,
	                    context: this.gridOptionsWrapper.getContext(),
	                    value: headerNameValue,
	                    api: this.gridOptionsWrapper.getApi(),
	                    eHeaderCell: this.eHeaderCell
	                };
	                var cellRendererResult = headerCellRenderer(cellRendererParams);
	                var childToAppend;
	                if (_.isNodeOrElement(cellRendererResult)) {
	                    // a dom node or element was returned, so add child
	                    childToAppend = cellRendererResult;
	                }
	                else {
	                    // otherwise assume it was html, so just insert
	                    var eTextSpan = document.createElement("span");
	                    eTextSpan.innerHTML = cellRendererResult;
	                    childToAppend = eTextSpan;
	                }
	                // angular compile header if option is turned on
	                if (this.gridOptionsWrapper.isAngularCompileHeaders()) {
	                    var childToAppendCompiled = this.$compile(childToAppend)(this.childScope)[0];
	                    this.eText.appendChild(childToAppendCompiled);
	                }
	                else {
	                    this.eText.appendChild(childToAppend);
	                }
	            };
	            RenderedHeaderCell.prototype.refreshFilterIcon = function () {
	                var filterPresent = this.filterManager.isFilterPresentForCol(this.column.getColId());
	                if (this.eFilterIcon) {
	                    _.addOrRemoveCssClass(this.eHeaderCell, 'ag-header-cell-filtered', filterPresent);
	                    this.eFilterIcon.style.display = filterPresent ? 'inline' : 'none';
	                }
	            };
	            RenderedHeaderCell.prototype.refreshSortIcon = function () {
	                // update visibility of icons
	                var sortAscending = this.column.getSort() === grid.Column.SORT_ASC;
	                var sortDescending = this.column.getSort() === grid.Column.SORT_DESC;
	                var sortNone = this.column.getSort() !== grid.Column.SORT_DESC && this.column.getSort() !== grid.Column.SORT_ASC;
	                if (this.eSortAsc) {
	                    _.setVisible(this.eSortAsc, sortAscending);
	                }
	                if (this.eSortDesc) {
	                    _.setVisible(this.eSortDesc, sortDescending);
	                }
	                if (this.eSortNone) {
	                    _.setVisible(this.eSortNone, sortNone);
	                }
	                _.addOrRemoveCssClass(this.eHeaderCell, 'ag-header-cell-sorted-asc', sortAscending);
	                _.addOrRemoveCssClass(this.eHeaderCell, 'ag-header-cell-sorted-desc', sortDescending);
	                _.addOrRemoveCssClass(this.eHeaderCell, 'ag-header-cell-sorted-none', sortNone);
	            };
	            RenderedHeaderCell.prototype.getNextSortDirection = function () {
	                var sortingOrder;
	                if (this.column.getColDef().sortingOrder) {
	                    sortingOrder = this.column.getColDef().sortingOrder;
	                }
	                else if (this.gridOptionsWrapper.getSortingOrder()) {
	                    sortingOrder = this.gridOptionsWrapper.getSortingOrder();
	                }
	                else {
	                    sortingOrder = RenderedHeaderCell.DEFAULT_SORTING_ORDER;
	                }
	                if (!Array.isArray(sortingOrder) || sortingOrder.length <= 0) {
	                    console.warn('ag-grid: sortingOrder must be an array with at least one element, currently it\'s ' + sortingOrder);
	                    return;
	                }
	                var currentIndex = sortingOrder.indexOf(this.column.getSort());
	                var notInArray = currentIndex < 0;
	                var lastItemInArray = currentIndex == sortingOrder.length - 1;
	                var result;
	                if (notInArray || lastItemInArray) {
	                    result = sortingOrder[0];
	                }
	                else {
	                    result = sortingOrder[currentIndex + 1];
	                }
	                // verify the sort type exists, as the user could provide the sortOrder, need to make sure it's valid
	                if (RenderedHeaderCell.DEFAULT_SORTING_ORDER.indexOf(result) < 0) {
	                    console.warn('ag-grid: invalid sort type ' + result);
	                    return null;
	                }
	                return result;
	            };
	            RenderedHeaderCell.prototype.addSortHandling = function () {
	                var _this = this;
	                this.eText.addEventListener("click", function (event) {
	                    // update sort on current col
	                    _this.column.setSort(_this.getNextSortDirection());
	                    // sortedAt used for knowing order of cols when multi-col sort
	                    if (_this.column.getSort()) {
	                        _this.column.setSortedAt(new Date().valueOf());
	                    }
	                    else {
	                        _this.column.setSortedAt(null);
	                    }
	                    var doingMultiSort = !_this.gridOptionsWrapper.isSuppressMultiSort() && event.shiftKey;
	                    // clear sort on all columns except this one, and update the icons
	                    if (!doingMultiSort) {
	                        _this.columnController.getAllColumns().forEach(function (columnToClear) {
	                            // Do not clear if either holding shift, or if column in question was clicked
	                            if (!(columnToClear === _this.column)) {
	                                columnToClear.sort = null;
	                            }
	                        });
	                    }
	                    _this.grid.onSortingChanged();
	                });
	            };
	            RenderedHeaderCell.prototype.onDragStart = function () {
	                this.startWidth = this.column.getActualWidth();
	            };
	            RenderedHeaderCell.prototype.onDragging = function (dragChange, finished) {
	                var newWidth = this.startWidth + dragChange;
	                this.columnController.setColumnWidth(this.column, newWidth, finished);
	            };
	            RenderedHeaderCell.prototype.onIndividualColumnResized = function (column) {
	                if (this.column !== column) {
	                    return;
	                }
	                var newWidthPx = column.getActualWidth() + "px";
	                this.eHeaderCell.style.width = newWidthPx;
	            };
	            RenderedHeaderCell.prototype.addHeaderClassesFromCollDef = function () {
	                var _this = this;
	                if (this.column.getColDef().headerClass) {
	                    var classToUse;
	                    if (typeof this.column.getColDef().headerClass === 'function') {
	                        var params = {
	                            colDef: this.column.getColDef(),
	                            $scope: this.childScope,
	                            context: this.gridOptionsWrapper.getContext(),
	                            api: this.gridOptionsWrapper.getApi()
	                        };
	                        var headerClassFunc = this.column.getColDef().headerClass;
	                        classToUse = headerClassFunc(params);
	                    }
	                    else {
	                        classToUse = this.column.getColDef().headerClass;
	                    }
	                    if (typeof classToUse === 'string') {
	                        _.addCssClass(this.eHeaderCell, classToUse);
	                    }
	                    else if (Array.isArray(classToUse)) {
	                        classToUse.forEach(function (cssClassItem) {
	                            _.addCssClass(_this.eHeaderCell, cssClassItem);
	                        });
	                    }
	                }
	            };
	            RenderedHeaderCell.DEFAULT_SORTING_ORDER = [grid.Column.SORT_ASC, grid.Column.SORT_DESC, null];
	            return RenderedHeaderCell;
	        })(grid.RenderedHeaderElement);
	        grid.RenderedHeaderCell = RenderedHeaderCell;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path='../utils.ts' />
	/// <reference path='renderedHeaderCell.ts' />
	/// <reference path='renderedHeaderElement.ts' />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var constants = grid.Constants;
	        var svgFactory = grid.SvgFactory.getInstance();
	        var RenderedHeaderGroupCell = (function (_super) {
	            __extends(RenderedHeaderGroupCell, _super);
	            function RenderedHeaderGroupCell(columnGroup, gridOptionsWrapper, columnController, eRoot, angularGrid, parentScope, filterManager, $compile) {
	                _super.call(this, eRoot);
	                this.columnController = columnController;
	                this.columnGroup = columnGroup;
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.parentScope = parentScope;
	                this.filterManager = filterManager;
	                this.$compile = $compile;
	                this.angularGrid = angularGrid;
	                this.setupComponents();
	            }
	            RenderedHeaderGroupCell.prototype.getGui = function () {
	                return this.eHeaderGroupCell;
	            };
	            RenderedHeaderGroupCell.prototype.onIndividualColumnResized = function (column) {
	                if (this.columnGroup.isChildInThisGroupDeepSearch(column)) {
	                    this.setWidthOfGroupHeaderCell();
	                }
	            };
	            RenderedHeaderGroupCell.prototype.setupComponents = function () {
	                var _this = this;
	                this.eHeaderGroupCell = document.createElement('div');
	                var classNames = ['ag-header-group-cell'];
	                // having different classes below allows the style to not have a bottom border
	                // on the group header, if no group is specified
	                if (this.columnGroup.getColGroupDef()) {
	                    classNames.push('ag-header-group-cell-with-group');
	                }
	                else {
	                    classNames.push('ag-header-group-cell-no-group');
	                }
	                this.eHeaderGroupCell.className = classNames.join(' ');
	                this.eHeaderGroupCell.style.height = this.gridOptionsWrapper.getHeaderHeight() + 'px';
	                if (this.gridOptionsWrapper.isEnableColResize()) {
	                    this.eHeaderCellResize = document.createElement("div");
	                    this.eHeaderCellResize.className = "ag-header-cell-resize";
	                    this.eHeaderGroupCell.appendChild(this.eHeaderCellResize);
	                    this.addDragHandler(this.eHeaderCellResize);
	                    if (!this.gridOptionsWrapper.isSuppressAutoSize()) {
	                        this.eHeaderCellResize.addEventListener('dblclick', function (event) {
	                            // get list of all the column keys we are responsible for
	                            var keys = [];
	                            _this.columnGroup.getDisplayedLeafColumns().forEach(function (column) {
	                                // not all cols in the group may be participating with auto-resize
	                                if (!column.getColDef().suppressAutoSize) {
	                                    keys.push(column.getColId());
	                                }
	                            });
	                            if (keys.length > 0) {
	                                _this.columnController.autoSizeColumns(keys);
	                            }
	                        });
	                    }
	                }
	                // no renderer, default text render
	                var groupName = this.columnGroup.getHeaderName();
	                if (groupName && groupName !== '') {
	                    var eGroupCellLabel = document.createElement("div");
	                    eGroupCellLabel.className = 'ag-header-group-cell-label';
	                    this.eHeaderGroupCell.appendChild(eGroupCellLabel);
	                    var eInnerText = document.createElement("span");
	                    eInnerText.className = 'ag-header-group-text';
	                    eInnerText.innerHTML = groupName;
	                    eGroupCellLabel.appendChild(eInnerText);
	                    if (this.columnGroup.isExpandable()) {
	                        this.addGroupExpandIcon(eGroupCellLabel);
	                    }
	                }
	                this.setWidthOfGroupHeaderCell();
	            };
	            RenderedHeaderGroupCell.prototype.setWidthOfGroupHeaderCell = function () {
	                this.eHeaderGroupCell.style.width = _.formatWidth(this.columnGroup.getActualWidth());
	            };
	            RenderedHeaderGroupCell.prototype.addGroupExpandIcon = function (eGroupCellLabel) {
	                var eGroupIcon;
	                if (this.columnGroup.isExpanded()) {
	                    eGroupIcon = _.createIcon('columnGroupOpened', this.gridOptionsWrapper, null, svgFactory.createArrowLeftSvg);
	                }
	                else {
	                    eGroupIcon = _.createIcon('columnGroupClosed', this.gridOptionsWrapper, null, svgFactory.createArrowRightSvg);
	                }
	                eGroupIcon.className = 'ag-header-expand-icon';
	                eGroupCellLabel.appendChild(eGroupIcon);
	                var that = this;
	                eGroupIcon.onclick = function () {
	                    var newExpandedValue = !that.columnGroup.isExpanded();
	                    that.columnController.setColumnGroupOpened(that.columnGroup, newExpandedValue);
	                };
	            };
	            RenderedHeaderGroupCell.prototype.onDragStart = function () {
	                var _this = this;
	                this.groupWidthStart = this.columnGroup.getActualWidth();
	                this.childrenWidthStarts = [];
	                this.columnGroup.getDisplayedLeafColumns().forEach(function (column) {
	                    _this.childrenWidthStarts.push(column.getActualWidth());
	                });
	            };
	            RenderedHeaderGroupCell.prototype.onDragging = function (dragChange, finished) {
	                var _this = this;
	                var newWidth = this.groupWidthStart + dragChange;
	                var minWidth = this.columnGroup.getMinimumWidth();
	                if (newWidth < minWidth) {
	                    newWidth = minWidth;
	                }
	                // set the new width to the group header
	                //var newWidthPx = newWidth + "px";
	                //this.eHeaderGroupCell.style.width = newWidthPx;
	                //this.columnGroup.actualWidth = newWidth;
	                // distribute the new width to the child headers
	                var changeRatio = newWidth / this.groupWidthStart;
	                // keep track of pixels used, and last column gets the remaining,
	                // to cater for rounding errors, and min width adjustments
	                var pixelsToDistribute = newWidth;
	                var displayedColumns = this.columnGroup.getDisplayedLeafColumns();
	                displayedColumns.forEach(function (column, index) {
	                    var notLastCol = index !== (displayedColumns.length - 1);
	                    var newChildSize;
	                    if (notLastCol) {
	                        // if not the last col, calculate the column width as normal
	                        var startChildSize = _this.childrenWidthStarts[index];
	                        newChildSize = startChildSize * changeRatio;
	                        if (newChildSize < column.getMinimumWidth()) {
	                            newChildSize = column.getMinimumWidth();
	                        }
	                        pixelsToDistribute -= newChildSize;
	                    }
	                    else {
	                        // if last col, give it the remaining pixels
	                        newChildSize = pixelsToDistribute;
	                    }
	                    _this.columnController.setColumnWidth(column, newChildSize, finished);
	                });
	            };
	            return RenderedHeaderGroupCell;
	        })(grid.RenderedHeaderElement);
	        grid.RenderedHeaderGroupCell = RenderedHeaderGroupCell;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/// <reference path="../constants.ts" />
	/// <reference path="../svgFactory.ts" />
	/// <reference path="../headerRendering/renderedHeaderElement.ts" />
	/// <reference path="../headerRendering/renderedHeaderCell.ts" />
	/// <reference path="../headerRendering/renderedHeaderGroupCell.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var utils = grid.Utils;
	        var HeaderRenderer = (function () {
	            function HeaderRenderer() {
	                this.headerElements = [];
	            }
	            HeaderRenderer.prototype.init = function (gridOptionsWrapper, columnController, gridPanel, angularGrid, filterManager, $scope, $compile, headerTemplateLoader) {
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.columnController = columnController;
	                this.angularGrid = angularGrid;
	                this.filterManager = filterManager;
	                this.$scope = $scope;
	                this.$compile = $compile;
	                this.headerTemplateLoader = headerTemplateLoader;
	                this.findAllElements(gridPanel);
	            };
	            HeaderRenderer.prototype.findAllElements = function (gridPanel) {
	                this.ePinnedLeftHeader = gridPanel.getPinnedLeftHeader();
	                this.ePinnedRightHeader = gridPanel.getPinnedRightHeader();
	                this.eHeaderContainer = gridPanel.getHeaderContainer();
	                this.eHeaderViewport = gridPanel.getHeaderViewport();
	                this.eRoot = gridPanel.getRoot();
	            };
	            HeaderRenderer.prototype.refreshHeader = function () {
	                utils.removeAllChildren(this.ePinnedLeftHeader);
	                utils.removeAllChildren(this.ePinnedRightHeader);
	                utils.removeAllChildren(this.eHeaderContainer);
	                this.headerElements.forEach(function (headerElement) {
	                    headerElement.destroy();
	                });
	                this.headerElements = [];
	                this.insertHeaderRowsIntoContainer(this.columnController.getLeftDisplayedColumnGroups(), this.ePinnedLeftHeader);
	                this.insertHeaderRowsIntoContainer(this.columnController.getRightDisplayedColumnGroups(), this.ePinnedRightHeader);
	                this.insertHeaderRowsIntoContainer(this.columnController.getCenterDisplayedColumnGroups(), this.eHeaderContainer);
	            };
	            HeaderRenderer.prototype.addTreeNodesAtDept = function (cellTree, dept, result) {
	                var _this = this;
	                cellTree.forEach(function (abstractColumn) {
	                    if (dept === 0) {
	                        result.push(abstractColumn);
	                    }
	                    else if (abstractColumn instanceof grid.ColumnGroup) {
	                        var columnGroup = abstractColumn;
	                        _this.addTreeNodesAtDept(columnGroup.getDisplayedChildren(), dept - 1, result);
	                    }
	                    else {
	                    }
	                });
	            };
	            HeaderRenderer.prototype.setPinnedColContainerWidth = function () {
	                if (this.gridOptionsWrapper.isForPrint()) {
	                    // pinned col doesn't exist when doing forPrint
	                    return;
	                }
	                var pinnedLeftWidth = this.columnController.getPinnedLeftContainerWidth() + 'px';
	                this.eHeaderViewport.style.marginLeft = pinnedLeftWidth;
	                var pinnedRightWidth = this.columnController.getPinnedRightContainerWidth() + 'px';
	                this.eHeaderViewport.style.marginRight = pinnedRightWidth;
	            };
	            HeaderRenderer.prototype.insertHeaderRowsIntoContainer = function (cellTree, eContainerToAddTo) {
	                var _this = this;
	                // if we are displaying header groups, then we have many rows here.
	                // go through each row of the header, one by one.
	                for (var dept = 0;; dept++) {
	                    var nodesAtDept = [];
	                    this.addTreeNodesAtDept(cellTree, dept, nodesAtDept);
	                    // we want to break the for loop when we get to an empty set of cells,
	                    // that's how we know we have finished rendering the last row.
	                    if (nodesAtDept.length === 0) {
	                        break;
	                    }
	                    var eRow = document.createElement('div');
	                    eRow.className = 'ag-header-row';
	                    eRow.style.top = (dept * this.gridOptionsWrapper.getHeaderHeight()) + 'px';
	                    eRow.style.height = this.gridOptionsWrapper.getHeaderHeight() + 'px';
	                    nodesAtDept.forEach(function (child) {
	                        var renderedHeaderElement = _this.createHeaderElement(child);
	                        _this.headerElements.push(renderedHeaderElement);
	                        eRow.appendChild(renderedHeaderElement.getGui());
	                    });
	                    eContainerToAddTo.appendChild(eRow);
	                }
	            };
	            HeaderRenderer.prototype.createHeaderElement = function (columnGroupChild) {
	                if (columnGroupChild instanceof grid.ColumnGroup) {
	                    return new grid.RenderedHeaderGroupCell(columnGroupChild, this.gridOptionsWrapper, this.columnController, this.eRoot, this.angularGrid, this.$scope, this.filterManager, this.$compile);
	                }
	                else {
	                    return new grid.RenderedHeaderCell(columnGroupChild, null, this.gridOptionsWrapper, this.$scope, this.filterManager, this.columnController, this.$compile, this.angularGrid, this.eRoot, this.headerTemplateLoader);
	                }
	            };
	            HeaderRenderer.prototype.updateSortIcons = function () {
	                this.headerElements.forEach(function (headerElement) {
	                    headerElement.refreshSortIcon();
	                });
	            };
	            HeaderRenderer.prototype.updateFilterIcons = function () {
	                this.headerElements.forEach(function (headerElement) {
	                    headerElement.refreshFilterIcon();
	                });
	            };
	            HeaderRenderer.prototype.onIndividualColumnResized = function (column) {
	                this.headerElements.forEach(function (headerElement) {
	                    headerElement.onIndividualColumnResized(column);
	                });
	            };
	            return HeaderRenderer;
	        })();
	        grid.HeaderRenderer = HeaderRenderer;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var GroupCreator = (function () {
	            function GroupCreator() {
	            }
	            GroupCreator.prototype.init = function (valueService, gridOptionsWrapper) {
	                this.valueService = valueService;
	                this.gridOptionsWrapper = gridOptionsWrapper;
	            };
	            GroupCreator.prototype.group = function (rowNodes, groupedCols, expandByDefault) {
	                var topMostGroup = {
	                    level: -1,
	                    children: [],
	                    _childrenMap: {}
	                };
	                var allGroups = [];
	                allGroups.push(topMostGroup);
	                var levelToInsertChild = groupedCols.length - 1;
	                var i;
	                var currentLevel;
	                var node;
	                var data;
	                var currentGroup;
	                var groupKey;
	                var nextGroup;
	                var includeParents = !this.gridOptionsWrapper.isSuppressParentsInRowNodes();
	                // start at -1 and go backwards, as all the positive indexes
	                // are already used by the nodes.
	                var index = -1;
	                for (i = 0; i < rowNodes.length; i++) {
	                    node = rowNodes[i];
	                    data = node.data;
	                    // all leaf nodes have the same level in this grouping, which is one level after the last group
	                    node.level = levelToInsertChild + 1;
	                    for (currentLevel = 0; currentLevel < groupedCols.length; currentLevel++) {
	                        var groupColumn = groupedCols[currentLevel];
	                        groupKey = this.valueService.getValue(groupColumn.getColDef(), data, node);
	                        if (currentLevel === 0) {
	                            currentGroup = topMostGroup;
	                        }
	                        // if group doesn't exist yet, create it
	                        nextGroup = currentGroup._childrenMap[groupKey];
	                        if (!nextGroup) {
	                            nextGroup = {
	                                group: true,
	                                field: groupColumn.getColDef().field,
	                                id: index--,
	                                key: groupKey,
	                                expanded: this.isExpanded(expandByDefault, currentLevel),
	                                children: [],
	                                // for top most level, parent is null
	                                parent: null,
	                                allChildrenCount: 0,
	                                level: currentGroup.level + 1,
	                                _childrenMap: {} //this is a temporary map, we remove at the end of this method
	                            };
	                            if (includeParents) {
	                                nextGroup.parent = currentGroup === topMostGroup ? null : currentGroup;
	                            }
	                            currentGroup._childrenMap[groupKey] = nextGroup;
	                            currentGroup.children.push(nextGroup);
	                            allGroups.push(nextGroup);
	                        }
	                        nextGroup.allChildrenCount++;
	                        if (currentLevel == levelToInsertChild) {
	                            if (includeParents) {
	                                node.parent = nextGroup === topMostGroup ? null : nextGroup;
	                            }
	                            nextGroup.children.push(node);
	                        }
	                        else {
	                            currentGroup = nextGroup;
	                        }
	                    }
	                }
	                //remove the temporary map
	                for (i = 0; i < allGroups.length; i++) {
	                    delete allGroups[i]._childrenMap;
	                }
	                return topMostGroup.children;
	            };
	            GroupCreator.prototype.isExpanded = function (expandByDefault, level) {
	                if (typeof expandByDefault === 'number') {
	                    return level < expandByDefault;
	                }
	                else {
	                    return expandByDefault === true || expandByDefault === 'true';
	                }
	            };
	            return GroupCreator;
	        })();
	        grid.GroupCreator = GroupCreator;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/// <reference path="../constants.ts" />
	/// <reference path="../groupCreator.ts" />
	/// <reference path="../entities/rowNode.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var constants = grid.Constants;
	        var RecursionType;
	        (function (RecursionType) {
	            RecursionType[RecursionType["Normal"] = 0] = "Normal";
	            RecursionType[RecursionType["AfterFilter"] = 1] = "AfterFilter";
	            RecursionType[RecursionType["AfterFilterAndSort"] = 2] = "AfterFilterAndSort";
	        })(RecursionType || (RecursionType = {}));
	        ;
	        var InMemoryRowController = (function () {
	            function InMemoryRowController() {
	                this.createModel();
	            }
	            InMemoryRowController.prototype.init = function (gridOptionsWrapper, columnController, angularGrid, filterManager, $scope, groupCreator, valueService, eventService) {
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.columnController = columnController;
	                this.angularGrid = angularGrid;
	                this.filterManager = filterManager;
	                this.$scope = $scope;
	                this.groupCreator = groupCreator;
	                this.valueService = valueService;
	                this.eventService = eventService;
	                this.allRows = null;
	                this.rowsAfterGroup = null;
	                this.rowsAfterFilter = null;
	                this.rowsAfterSort = null;
	                this.rowsToDisplay = null;
	            };
	            InMemoryRowController.prototype.createModel = function () {
	                var that = this;
	                this.model = {
	                    // this method is implemented by the inMemory model only,
	                    // it gives the top level of the selection. used by the selection
	                    // controller, when it needs to do a full traversal
	                    getTopLevelNodes: function () {
	                        return that.rowsAfterGroup;
	                    },
	                    getVirtualRow: function (index) {
	                        return that.rowsToDisplay[index];
	                    },
	                    getVirtualRowCount: function () {
	                        if (that.rowsToDisplay) {
	                            return that.rowsToDisplay.length;
	                        }
	                        else {
	                            return 0;
	                        }
	                    },
	                    getRowAtPixel: function (pixel) {
	                        return that.getRowAtPixel(pixel);
	                    },
	                    getVirtualRowCombinedHeight: function () {
	                        return that.getVirtualRowCombinedHeight();
	                    },
	                    forEachInMemory: function (callback) {
	                        that.forEachInMemory(callback);
	                    },
	                    forEachNode: function (callback) {
	                        that.forEachNode(callback);
	                    },
	                    forEachNodeAfterFilter: function (callback) {
	                        that.forEachNodeAfterFilter(callback);
	                    },
	                    forEachNodeAfterFilterAndSort: function (callback) {
	                        that.forEachNodeAfterFilterAndSort(callback);
	                    }
	                };
	            };
	            InMemoryRowController.prototype.getRowAtPixel = function (pixelToMatch) {
	                // do binary search of tree
	                // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/
	                var bottomPointer = 0;
	                var topPointer = this.rowsToDisplay.length - 1;
	                // quick check, if the pixel is out of bounds, then return last row
	                var lastNode = this.rowsToDisplay[this.rowsToDisplay.length - 1];
	                if (lastNode.rowTop <= pixelToMatch) {
	                    return this.rowsToDisplay.length - 1;
	                }
	                while (true) {
	                    var midPointer = Math.floor((bottomPointer + topPointer) / 2);
	                    var currentRowNode = this.rowsToDisplay[midPointer];
	                    if (this.isRowInPixel(currentRowNode, pixelToMatch)) {
	                        return midPointer;
	                    }
	                    else if (currentRowNode.rowTop < pixelToMatch) {
	                        bottomPointer = midPointer + 1;
	                    }
	                    else if (currentRowNode.rowTop > pixelToMatch) {
	                        topPointer = midPointer - 1;
	                    }
	                }
	            };
	            InMemoryRowController.prototype.isRowInPixel = function (rowNode, pixelToMatch) {
	                var topPixel = rowNode.rowTop;
	                var bottomPixel = rowNode.rowTop + rowNode.rowHeight;
	                var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;
	                return pixelInRow;
	            };
	            InMemoryRowController.prototype.getVirtualRowCombinedHeight = function () {
	                if (this.rowsToDisplay && this.rowsToDisplay.length > 0) {
	                    var lastRow = this.rowsToDisplay[this.rowsToDisplay.length - 1];
	                    var lastPixel = lastRow.rowTop + lastRow.rowHeight;
	                    return lastPixel;
	                }
	                else {
	                    return 0;
	                }
	            };
	            InMemoryRowController.prototype.getModel = function () {
	                return this.model;
	            };
	            InMemoryRowController.prototype.forEachInMemory = function (callback) {
	                console.warn('ag-Grid: please use forEachNode instead of forEachInMemory, method is same, I just renamed it, forEachInMemory is deprecated');
	                this.forEachNode(callback);
	            };
	            InMemoryRowController.prototype.forEachNode = function (callback) {
	                this.recursivelyWalkNodesAndCallback(this.rowsAfterGroup, callback, RecursionType.Normal, 0);
	            };
	            InMemoryRowController.prototype.forEachNodeAfterFilter = function (callback) {
	                this.recursivelyWalkNodesAndCallback(this.rowsAfterFilter, callback, RecursionType.AfterFilter, 0);
	            };
	            InMemoryRowController.prototype.forEachNodeAfterFilterAndSort = function (callback) {
	                this.recursivelyWalkNodesAndCallback(this.rowsAfterSort, callback, RecursionType.AfterFilterAndSort, 0);
	            };
	            // iterates through each item in memory, and calls the callback function
	            // nodes - the rowNodes to traverse
	            // callback - the user provided callback
	            // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc
	            // index - works similar to the index in forEach in javascripts array function
	            InMemoryRowController.prototype.recursivelyWalkNodesAndCallback = function (nodes, callback, recursionType, index) {
	                if (nodes) {
	                    for (var i = 0; i < nodes.length; i++) {
	                        var node = nodes[i];
	                        callback(node, index++);
	                        // go to the next level if it is a group
	                        if (node.group) {
	                            // depending on the recursion type, we pick a difference set of children
	                            var nodeChildren;
	                            switch (recursionType) {
	                                case RecursionType.Normal:
	                                    nodeChildren = node.children;
	                                    break;
	                                case RecursionType.AfterFilter:
	                                    nodeChildren = node.childrenAfterFilter;
	                                    break;
	                                case RecursionType.AfterFilterAndSort:
	                                    nodeChildren = node.childrenAfterSort;
	                                    break;
	                            }
	                            if (nodeChildren) {
	                                index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);
	                            }
	                        }
	                    }
	                }
	                return index;
	            };
	            InMemoryRowController.prototype.updateModel = function (step) {
	                var _this = this;
	                // fallthrough in below switch is on purpose
	                switch (step) {
	                    case constants.STEP_EVERYTHING:
	                    case constants.STEP_FILTER:
	                        this.doFilter();
	                        this.doAggregate();
	                    case constants.STEP_SORT:
	                        this.doSort();
	                    case constants.STEP_MAP:
	                        this.doRowsToDisplay();
	                }
	                this.eventService.dispatchEvent(grid.Events.EVENT_MODEL_UPDATED);
	                if (this.$scope) {
	                    setTimeout(function () {
	                        _this.$scope.$apply();
	                    }, 0);
	                }
	            };
	            InMemoryRowController.prototype.ensureRowHasHeight = function (rowNode) {
	            };
	            InMemoryRowController.prototype.defaultGroupAggFunctionFactory = function (valueColumns) {
	                // make closure of variable, so is available for methods below
	                var _valueService = this.valueService;
	                return function groupAggFunction(rows) {
	                    var result = {};
	                    for (var j = 0; j < valueColumns.length; j++) {
	                        var valueColumn = valueColumns[j];
	                        var colKey = valueColumn.getColDef().field;
	                        if (!colKey) {
	                            console.log('ag-Grid: you need to provide a field for all value columns so that ' +
	                                'the grid knows what field to store the result in. so even if using a valueGetter, ' +
	                                'the result will not be stored in a value getter.');
	                        }
	                        // at this point, if no values were numbers, the result is null (not zero)
	                        result[colKey] = aggregateColumn(rows, valueColumn.getAggFunc(), colKey, valueColumn.getColDef());
	                    }
	                    return result;
	                };
	                // if colDef is passed in, we are working off a column value, if it is not passed in, we are
	                // working off colKeys passed in to the gridOptions
	                function aggregateColumn(rowNodes, aggFunc, colKey, colDef) {
	                    var resultForColumn = null;
	                    for (var i = 0; i < rowNodes.length; i++) {
	                        var rowNode = rowNodes[i];
	                        // if the row is a group, then it will only have an agg result value,
	                        // which means valueGetter is never used.
	                        var thisColumnValue;
	                        if (colDef && !rowNode.group) {
	                            thisColumnValue = _valueService.getValue(colDef, rowNode.data, rowNode);
	                        }
	                        else {
	                            thisColumnValue = rowNode.data[colKey];
	                        }
	                        // only include if the value is a number
	                        if (typeof thisColumnValue === 'number') {
	                            switch (aggFunc) {
	                                case grid.Column.AGG_SUM:
	                                    resultForColumn += thisColumnValue;
	                                    break;
	                                case grid.Column.AGG_MIN:
	                                    if (resultForColumn === null) {
	                                        resultForColumn = thisColumnValue;
	                                    }
	                                    else if (resultForColumn > thisColumnValue) {
	                                        resultForColumn = thisColumnValue;
	                                    }
	                                    break;
	                                case grid.Column.AGG_MAX:
	                                    if (resultForColumn === null) {
	                                        resultForColumn = thisColumnValue;
	                                    }
	                                    else if (resultForColumn < thisColumnValue) {
	                                        resultForColumn = thisColumnValue;
	                                    }
	                                    break;
	                            }
	                        }
	                    }
	                    return resultForColumn;
	                }
	            };
	            // it's possible to recompute the aggregate without doing the other parts
	            InMemoryRowController.prototype.doAggregate = function () {
	                var groupAggFunction = this.gridOptionsWrapper.getGroupAggFunction();
	                if (typeof groupAggFunction === 'function') {
	                    this.recursivelyCreateAggData(this.rowsAfterFilter, groupAggFunction, 0);
	                    return;
	                }
	                var valueColumns = this.columnController.getValueColumns();
	                if (valueColumns && valueColumns.length > 0) {
	                    var defaultAggFunction = this.defaultGroupAggFunctionFactory(valueColumns);
	                    this.recursivelyCreateAggData(this.rowsAfterFilter, defaultAggFunction, 0);
	                }
	                else {
	                    // if no agg data, need to clear out any previous items, when can be left behind
	                    // if use is creating / removing columns using the tool panel.
	                    // one exception - don't do this if already grouped, as this breaks the File Explorer example!!
	                    // to fix another day - how to we reset when the user provided the data??
	                    if (!this.gridOptionsWrapper.isRowsAlreadyGrouped()) {
	                        this.recursivelyClearAggData(this.rowsAfterFilter);
	                    }
	                }
	            };
	            InMemoryRowController.prototype.expandOrCollapseAll = function (expand, rowNodes) {
	                var _this = this;
	                // if first call in recursion, we set list to parent list
	                if (rowNodes === null) {
	                    rowNodes = this.rowsAfterGroup;
	                }
	                if (!rowNodes) {
	                    return;
	                }
	                rowNodes.forEach(function (node) {
	                    if (node.group) {
	                        node.expanded = expand;
	                        _this.expandOrCollapseAll(expand, node.children);
	                    }
	                });
	            };
	            InMemoryRowController.prototype.recursivelyClearAggData = function (nodes) {
	                for (var i = 0, l = nodes.length; i < l; i++) {
	                    var node = nodes[i];
	                    if (node.group) {
	                        // agg function needs to start at the bottom, so traverse first
	                        this.recursivelyClearAggData(node.childrenAfterFilter);
	                        node.data = null;
	                    }
	                }
	            };
	            InMemoryRowController.prototype.recursivelyCreateAggData = function (nodes, groupAggFunction, level) {
	                for (var i = 0, l = nodes.length; i < l; i++) {
	                    var node = nodes[i];
	                    if (node.group) {
	                        // agg function needs to start at the bottom, so traverse first
	                        this.recursivelyCreateAggData(node.childrenAfterFilter, groupAggFunction, level++);
	                        // after traversal, we can now do the agg at this level
	                        var data = groupAggFunction(node.childrenAfterFilter, level);
	                        node.data = data;
	                        // if we are grouping, then it's possible there is a sibling footer
	                        // to the group, so update the data here also if there is one
	                        if (node.sibling) {
	                            node.sibling.data = data;
	                        }
	                    }
	                }
	            };
	            InMemoryRowController.prototype.doSort = function () {
	                var sorting;
	                // if the sorting is already done by the server, then we should not do it here
	                if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	                    sorting = false;
	                }
	                else {
	                    //see if there is a col we are sorting by
	                    var sortingOptions = [];
	                    this.columnController.getAllColumns().forEach(function (column) {
	                        if (column.getSort()) {
	                            var ascending = column.getSort() === grid.Column.SORT_ASC;
	                            sortingOptions.push({
	                                inverter: ascending ? 1 : -1,
	                                sortedAt: column.getSortedAt(),
	                                column: column
	                            });
	                        }
	                    });
	                    if (sortingOptions.length > 0) {
	                        sorting = true;
	                    }
	                }
	                var rowNodesReadyForSorting = this.rowsAfterFilter ? this.rowsAfterFilter.slice(0) : null;
	                if (sorting) {
	                    // The columns are to be sorted in the order that the user selected them:
	                    sortingOptions.sort(function (optionA, optionB) {
	                        return optionA.sortedAt - optionB.sortedAt;
	                    });
	                    this.sortList(rowNodesReadyForSorting, sortingOptions);
	                }
	                else {
	                    // if no sorting, set all group children after sort to the original list.
	                    // note: it is important to do this, even if doing server side sorting,
	                    // to allow the rows to pass to the next stage (ie set the node value
	                    // childrenAfterSort)
	                    this.recursivelyResetSort(rowNodesReadyForSorting);
	                }
	                this.rowsAfterSort = rowNodesReadyForSorting;
	            };
	            InMemoryRowController.prototype.recursivelyResetSort = function (rowNodes) {
	                if (!rowNodes) {
	                    return;
	                }
	                for (var i = 0, l = rowNodes.length; i < l; i++) {
	                    var item = rowNodes[i];
	                    if (item.group && item.children) {
	                        item.childrenAfterSort = item.childrenAfterFilter;
	                        this.recursivelyResetSort(item.children);
	                    }
	                }
	                this.updateChildIndexes(rowNodes);
	            };
	            InMemoryRowController.prototype.sortList = function (nodes, sortOptions) {
	                // sort any groups recursively
	                for (var i = 0, l = nodes.length; i < l; i++) {
	                    var node = nodes[i];
	                    if (node.group && node.children) {
	                        node.childrenAfterSort = node.childrenAfterFilter.slice(0);
	                        this.sortList(node.childrenAfterSort, sortOptions);
	                    }
	                }
	                var that = this;
	                function compare(nodeA, nodeB, column, isInverted) {
	                    var valueA = that.valueService.getValue(column.getColDef(), nodeA.data, nodeA);
	                    var valueB = that.valueService.getValue(column.getColDef(), nodeB.data, nodeB);
	                    if (column.getColDef().comparator) {
	                        //if comparator provided, use it
	                        return column.getColDef().comparator(valueA, valueB, nodeA, nodeB, isInverted);
	                    }
	                    else {
	                        //otherwise do our own comparison
	                        return _.defaultComparator(valueA, valueB);
	                    }
	                }
	                nodes.sort(function (nodeA, nodeB) {
	                    // Iterate columns, return the first that doesn't match
	                    for (var i = 0, len = sortOptions.length; i < len; i++) {
	                        var sortOption = sortOptions[i];
	                        var compared = compare(nodeA, nodeB, sortOption.column, sortOption.inverter === -1);
	                        if (compared !== 0) {
	                            return compared * sortOption.inverter;
	                        }
	                    }
	                    // All matched, these are identical as far as the sort is concerned:
	                    return 0;
	                });
	                this.updateChildIndexes(nodes);
	            };
	            InMemoryRowController.prototype.updateChildIndexes = function (nodes) {
	                for (var j = 0; j < nodes.length; j++) {
	                    var node = nodes[j];
	                    node.firstChild = j === 0;
	                    node.lastChild = j === nodes.length - 1;
	                    node.childIndex = j;
	                }
	            };
	            // called by grid when row group cols change
	            InMemoryRowController.prototype.onRowGroupChanged = function () {
	                this.doRowGrouping();
	                this.updateModel(constants.STEP_EVERYTHING);
	            };
	            InMemoryRowController.prototype.doRowGrouping = function () {
	                var rowsAfterGroup;
	                var groupedCols = this.columnController.getRowGroupColumns();
	                var rowsAlreadyGrouped = this.gridOptionsWrapper.isRowsAlreadyGrouped();
	                var doingGrouping = !rowsAlreadyGrouped && groupedCols.length > 0;
	                if (doingGrouping) {
	                    var expandByDefault = this.gridOptionsWrapper.isGroupSuppressRow() || this.gridOptionsWrapper.getGroupDefaultExpanded();
	                    rowsAfterGroup = this.groupCreator.group(this.allRows, groupedCols, expandByDefault);
	                }
	                else {
	                    rowsAfterGroup = this.allRows;
	                }
	                this.rowsAfterGroup = rowsAfterGroup;
	            };
	            InMemoryRowController.prototype.doFilter = function () {
	                var doingFilter;
	                if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
	                    doingFilter = false;
	                }
	                else {
	                    doingFilter = this.filterManager.isAnyFilterPresent();
	                }
	                var rowsAfterFilter;
	                if (doingFilter) {
	                    rowsAfterFilter = this.filterItems(this.rowsAfterGroup);
	                }
	                else {
	                    // do it here
	                    rowsAfterFilter = this.rowsAfterGroup;
	                    this.recursivelyResetFilter(this.rowsAfterGroup);
	                }
	                this.rowsAfterFilter = rowsAfterFilter;
	            };
	            InMemoryRowController.prototype.filterItems = function (rowNodes) {
	                var result = [];
	                for (var i = 0, l = rowNodes.length; i < l; i++) {
	                    var node = rowNodes[i];
	                    if (node.group) {
	                        // deal with group
	                        node.childrenAfterFilter = this.filterItems(node.children);
	                        if (node.childrenAfterFilter.length > 0) {
	                            node.allChildrenCount = this.getTotalChildCount(node.childrenAfterFilter);
	                            result.push(node);
	                        }
	                    }
	                    else {
	                        if (this.filterManager.doesRowPassFilter(node)) {
	                            result.push(node);
	                        }
	                    }
	                }
	                return result;
	            };
	            InMemoryRowController.prototype.recursivelyResetFilter = function (nodes) {
	                if (!nodes) {
	                    return;
	                }
	                for (var i = 0, l = nodes.length; i < l; i++) {
	                    var node = nodes[i];
	                    if (node.group && node.children) {
	                        node.childrenAfterFilter = node.children;
	                        this.recursivelyResetFilter(node.children);
	                        node.allChildrenCount = this.getTotalChildCount(node.childrenAfterFilter);
	                    }
	                }
	            };
	            // rows: the rows to put into the model
	            // firstId: the first id to use, used for paging, where we are not on the first page
	            InMemoryRowController.prototype.setAllRows = function (rows, firstId) {
	                var nodes;
	                if (this.gridOptionsWrapper.isRowsAlreadyGrouped()) {
	                    nodes = rows;
	                    this.recursivelyCheckUserProvidedNodes(nodes, null, 0);
	                }
	                else {
	                    // place each row into a wrapper
	                    var nodes = [];
	                    if (rows) {
	                        for (var i = 0; i < rows.length; i++) {
	                            var node = {};
	                            node.data = rows[i];
	                            nodes.push(node);
	                        }
	                    }
	                }
	                // if firstId provided, use it, otherwise start at 0
	                var firstIdToUse = firstId ? firstId : 0;
	                this.recursivelyAddIdToNodes(nodes, firstIdToUse);
	                this.allRows = nodes;
	                // group here, so filters have the agg data ready
	                if (this.columnController.isSetupComplete()) {
	                    this.doRowGrouping();
	                }
	            };
	            // add in index - this is used by the selectionController - so quick
	            // to look up selected rows
	            InMemoryRowController.prototype.recursivelyAddIdToNodes = function (nodes, index) {
	                if (!nodes) {
	                    return;
	                }
	                for (var i = 0; i < nodes.length; i++) {
	                    var node = nodes[i];
	                    node.id = index++;
	                    if (node.group && node.children) {
	                        index = this.recursivelyAddIdToNodes(node.children, index);
	                    }
	                }
	                return index;
	            };
	            // add in index - this is used by the selectionController - so quick
	            // to look up selected rows
	            InMemoryRowController.prototype.recursivelyCheckUserProvidedNodes = function (nodes, parent, level) {
	                if (!nodes) {
	                    return;
	                }
	                for (var i = 0; i < nodes.length; i++) {
	                    var node = nodes[i];
	                    if (parent && !this.gridOptionsWrapper.isSuppressParentsInRowNodes()) {
	                        node.parent = parent;
	                    }
	                    node.level = level;
	                    if (node.group && node.children) {
	                        this.recursivelyCheckUserProvidedNodes(node.children, node, level + 1);
	                    }
	                }
	            };
	            InMemoryRowController.prototype.getTotalChildCount = function (rowNodes) {
	                var count = 0;
	                for (var i = 0, l = rowNodes.length; i < l; i++) {
	                    var item = rowNodes[i];
	                    if (item.group) {
	                        count += item.allChildrenCount;
	                    }
	                    else {
	                        count++;
	                    }
	                }
	                return count;
	            };
	            InMemoryRowController.prototype.doRowsToDisplay = function () {
	                // even if not doing grouping, we do the mapping, as the client might
	                // of passed in data that already has a grouping in it somewhere
	                this.rowsToDisplay = [];
	                this.nextRowTop = 0;
	                this.recursivelyAddToRowsToDisplay(this.rowsAfterSort);
	            };
	            InMemoryRowController.prototype.recursivelyAddToRowsToDisplay = function (rowNodes) {
	                if (!rowNodes) {
	                    return;
	                }
	                var groupSuppressRow = this.gridOptionsWrapper.isGroupSuppressRow();
	                for (var i = 0; i < rowNodes.length; i++) {
	                    var rowNode = rowNodes[i];
	                    var skipGroupNode = groupSuppressRow && rowNode.group;
	                    if (!skipGroupNode) {
	                        this.addRowNodeToRowsToDisplay(rowNode);
	                    }
	                    if (rowNode.group && rowNode.expanded) {
	                        this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort);
	                        // put a footer in if user is looking for it
	                        if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
	                            var footerNode = this.createFooterNode(rowNode);
	                            this.addRowNodeToRowsToDisplay(footerNode);
	                        }
	                    }
	                }
	            };
	            // duplicated method, it's also in floatingRowModel
	            InMemoryRowController.prototype.addRowNodeToRowsToDisplay = function (rowNode) {
	                this.rowsToDisplay.push(rowNode);
	                rowNode.rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);
	                rowNode.rowTop = this.nextRowTop;
	                this.nextRowTop += rowNode.rowHeight;
	            };
	            InMemoryRowController.prototype.createFooterNode = function (groupNode) {
	                var footerNode = {};
	                Object.keys(groupNode).forEach(function (key) {
	                    footerNode[key] = groupNode[key];
	                });
	                footerNode.footer = true;
	                // get both header and footer to reference each other as siblings. this is never undone,
	                // only overwritten. so if a group is expanded, then contracted, it will have a ghost
	                // sibling - but that's fine, as we can ignore this if the header is contracted.
	                footerNode.sibling = groupNode;
	                groupNode.sibling = footerNode;
	                return footerNode;
	            };
	            return InMemoryRowController;
	        })();
	        grid.InMemoryRowController = InMemoryRowController;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/*
	 * This row controller is used for infinite scrolling only. For normal 'in memory' table,
	 * or standard pagination, the inMemoryRowController is used.
	 */
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var utils = grid.Utils;
	        var logging = false;
	        var VirtualPageRowController = (function () {
	            function VirtualPageRowController() {
	            }
	            VirtualPageRowController.prototype.init = function (rowRenderer, gridOptionsWrapper, angularGrid) {
	                this.rowRenderer = rowRenderer;
	                this.datasourceVersion = 0;
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.angularGrid = angularGrid;
	            };
	            VirtualPageRowController.prototype.setDatasource = function (datasource) {
	                this.datasource = datasource;
	                if (!datasource) {
	                    // only continue if we have a valid datasource to working with
	                    return;
	                }
	                this.reset();
	            };
	            VirtualPageRowController.prototype.reset = function () {
	                // see if datasource knows how many rows there are
	                if (typeof this.datasource.rowCount === 'number' && this.datasource.rowCount >= 0) {
	                    this.virtualRowCount = this.datasource.rowCount;
	                    this.foundMaxRow = true;
	                }
	                else {
	                    this.virtualRowCount = 0;
	                    this.foundMaxRow = false;
	                }
	                // in case any daemon requests coming from datasource, we know it ignore them
	                this.datasourceVersion++;
	                // map of page numbers to rows in that page
	                this.pageCache = {};
	                this.pageCacheSize = 0;
	                // if a number is in this array, it means we are pending a load from it
	                this.pageLoadsInProgress = [];
	                this.pageLoadsQueued = [];
	                this.pageAccessTimes = {}; // keeps a record of when each page was last viewed, used for LRU cache
	                this.accessTime = 0; // rather than using the clock, we use this counter
	                // the number of concurrent loads we are allowed to the server
	                if (typeof this.datasource.maxConcurrentRequests === 'number' && this.datasource.maxConcurrentRequests > 0) {
	                    this.maxConcurrentDatasourceRequests = this.datasource.maxConcurrentRequests;
	                }
	                else {
	                    this.maxConcurrentDatasourceRequests = 2;
	                }
	                // the number of pages to keep in browser cache
	                if (typeof this.datasource.maxPagesInCache === 'number' && this.datasource.maxPagesInCache > 0) {
	                    this.maxPagesInCache = this.datasource.maxPagesInCache;
	                }
	                else {
	                    // null is default, means don't  have any max size on the cache
	                    this.maxPagesInCache = null;
	                }
	                this.pageSize = this.datasource.pageSize; // take a copy of page size, we don't want it changing
	                this.overflowSize = this.datasource.overflowSize; // take a copy of page size, we don't want it changing
	                this.doLoadOrQueue(0);
	            };
	            VirtualPageRowController.prototype.createNodesFromRows = function (pageNumber, rows) {
	                var nodes = [];
	                if (rows) {
	                    for (var i = 0, j = rows.length; i < j; i++) {
	                        var virtualRowIndex = (pageNumber * this.pageSize) + i;
	                        var node = this.createNode(rows[i], virtualRowIndex);
	                        nodes.push(node);
	                    }
	                }
	                return nodes;
	            };
	            VirtualPageRowController.prototype.createNode = function (data, virtualRowIndex) {
	                var rowHeight = this.getRowHeightAsNumber();
	                var top = rowHeight * virtualRowIndex;
	                console.log(virtualRowIndex + ' ' + rowHeight + ' - ' + top);
	                var rowNode = {
	                    data: data,
	                    id: virtualRowIndex,
	                    rowTop: top,
	                    rowHeight: rowHeight
	                };
	                return rowNode;
	            };
	            VirtualPageRowController.prototype.removeFromLoading = function (pageNumber) {
	                var index = this.pageLoadsInProgress.indexOf(pageNumber);
	                this.pageLoadsInProgress.splice(index, 1);
	            };
	            VirtualPageRowController.prototype.pageLoadFailed = function (pageNumber) {
	                this.removeFromLoading(pageNumber);
	                this.checkQueueForNextLoad();
	            };
	            VirtualPageRowController.prototype.pageLoaded = function (pageNumber, rows, lastRow) {
	                this.putPageIntoCacheAndPurge(pageNumber, rows);
	                this.checkMaxRowAndInformRowRenderer(pageNumber, lastRow);
	                this.removeFromLoading(pageNumber);
	                this.checkQueueForNextLoad();
	            };
	            VirtualPageRowController.prototype.putPageIntoCacheAndPurge = function (pageNumber, rows) {
	                this.pageCache[pageNumber] = this.createNodesFromRows(pageNumber, rows);
	                this.pageCacheSize++;
	                if (logging) {
	                    console.log('adding page ' + pageNumber);
	                }
	                var needToPurge = this.maxPagesInCache && this.maxPagesInCache < this.pageCacheSize;
	                if (needToPurge) {
	                    // find the LRU page
	                    var youngestPageIndex = this.findLeastRecentlyAccessedPage(Object.keys(this.pageCache));
	                    if (logging) {
	                        console.log('purging page ' + youngestPageIndex + ' from cache ' + Object.keys(this.pageCache));
	                    }
	                    delete this.pageCache[youngestPageIndex];
	                    this.pageCacheSize--;
	                }
	            };
	            VirtualPageRowController.prototype.checkMaxRowAndInformRowRenderer = function (pageNumber, lastRow) {
	                if (!this.foundMaxRow) {
	                    // if we know the last row, use if
	                    if (typeof lastRow === 'number' && lastRow >= 0) {
	                        this.virtualRowCount = lastRow;
	                        this.foundMaxRow = true;
	                    }
	                    else {
	                        // otherwise, see if we need to add some virtual rows
	                        var thisPagePlusBuffer = ((pageNumber + 1) * this.pageSize) + this.overflowSize;
	                        if (this.virtualRowCount < thisPagePlusBuffer) {
	                            this.virtualRowCount = thisPagePlusBuffer;
	                        }
	                    }
	                    // if rowCount changes, refreshView, otherwise just refreshAllVirtualRows
	                    this.rowRenderer.refreshView();
	                }
	                else {
	                    this.rowRenderer.refreshAllVirtualRows();
	                }
	            };
	            VirtualPageRowController.prototype.isPageAlreadyLoading = function (pageNumber) {
	                var result = this.pageLoadsInProgress.indexOf(pageNumber) >= 0 || this.pageLoadsQueued.indexOf(pageNumber) >= 0;
	                return result;
	            };
	            VirtualPageRowController.prototype.doLoadOrQueue = function (pageNumber) {
	                // if we already tried to load this page, then ignore the request,
	                // otherwise server would be hit 50 times just to display one page, the
	                // first row to find the page missing is enough.
	                if (this.isPageAlreadyLoading(pageNumber)) {
	                    return;
	                }
	                // try the page load - if not already doing a load, then we can go ahead
	                if (this.pageLoadsInProgress.length < this.maxConcurrentDatasourceRequests) {
	                    // go ahead, load the page
	                    this.loadPage(pageNumber);
	                }
	                else {
	                    // otherwise, queue the request
	                    this.addToQueueAndPurgeQueue(pageNumber);
	                }
	            };
	            VirtualPageRowController.prototype.addToQueueAndPurgeQueue = function (pageNumber) {
	                if (logging) {
	                    console.log('queueing ' + pageNumber + ' - ' + this.pageLoadsQueued);
	                }
	                this.pageLoadsQueued.push(pageNumber);
	                // see if there are more pages queued that are actually in our cache, if so there is
	                // no point in loading them all as some will be purged as soon as loaded
	                var needToPurge = this.maxPagesInCache && this.maxPagesInCache < this.pageLoadsQueued.length;
	                if (needToPurge) {
	                    // find the LRU page
	                    var youngestPageIndex = this.findLeastRecentlyAccessedPage(this.pageLoadsQueued);
	                    if (logging) {
	                        console.log('de-queueing ' + pageNumber + ' - ' + this.pageLoadsQueued);
	                    }
	                    var indexToRemove = this.pageLoadsQueued.indexOf(youngestPageIndex);
	                    this.pageLoadsQueued.splice(indexToRemove, 1);
	                }
	            };
	            VirtualPageRowController.prototype.findLeastRecentlyAccessedPage = function (pageIndexes) {
	                var youngestPageIndex = -1;
	                var youngestPageAccessTime = Number.MAX_VALUE;
	                var that = this;
	                pageIndexes.forEach(function (pageIndex) {
	                    var accessTimeThisPage = that.pageAccessTimes[pageIndex];
	                    if (accessTimeThisPage < youngestPageAccessTime) {
	                        youngestPageAccessTime = accessTimeThisPage;
	                        youngestPageIndex = pageIndex;
	                    }
	                });
	                return youngestPageIndex;
	            };
	            VirtualPageRowController.prototype.checkQueueForNextLoad = function () {
	                if (this.pageLoadsQueued.length > 0) {
	                    // take from the front of the queue
	                    var pageToLoad = this.pageLoadsQueued[0];
	                    this.pageLoadsQueued.splice(0, 1);
	                    if (logging) {
	                        console.log('dequeueing ' + pageToLoad + ' - ' + this.pageLoadsQueued);
	                    }
	                    this.loadPage(pageToLoad);
	                }
	            };
	            VirtualPageRowController.prototype.loadPage = function (pageNumber) {
	                this.pageLoadsInProgress.push(pageNumber);
	                var startRow = pageNumber * this.pageSize;
	                var endRow = (pageNumber + 1) * this.pageSize;
	                var that = this;
	                var datasourceVersionCopy = this.datasourceVersion;
	                var sortModel;
	                if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	                    sortModel = this.angularGrid.getSortModel();
	                }
	                var filterModel;
	                if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
	                    filterModel = this.angularGrid.getFilterModel();
	                }
	                var params = {
	                    startRow: startRow,
	                    endRow: endRow,
	                    successCallback: successCallback,
	                    failCallback: failCallback,
	                    sortModel: sortModel,
	                    filterModel: filterModel
	                };
	                // check if old version of datasource used
	                var getRowsParams = utils.getFunctionParameters(this.datasource.getRows);
	                if (getRowsParams.length > 1) {
	                    console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.');
	                    console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.');
	                }
	                this.datasource.getRows(params);
	                function successCallback(rows, lastRowIndex) {
	                    if (that.requestIsDaemon(datasourceVersionCopy)) {
	                        return;
	                    }
	                    that.pageLoaded(pageNumber, rows, lastRowIndex);
	                }
	                function failCallback() {
	                    if (that.requestIsDaemon(datasourceVersionCopy)) {
	                        return;
	                    }
	                    that.pageLoadFailed(pageNumber);
	                }
	            };
	            // check that the datasource has not changed since the lats time we did a request
	            VirtualPageRowController.prototype.requestIsDaemon = function (datasourceVersionCopy) {
	                return this.datasourceVersion !== datasourceVersionCopy;
	            };
	            VirtualPageRowController.prototype.getVirtualRow = function (rowIndex) {
	                if (rowIndex > this.virtualRowCount) {
	                    return null;
	                }
	                var pageNumber = Math.floor(rowIndex / this.pageSize);
	                var page = this.pageCache[pageNumber];
	                // for LRU cache, track when this page was last hit
	                this.pageAccessTimes[pageNumber] = this.accessTime++;
	                if (!page) {
	                    this.doLoadOrQueue(pageNumber);
	                    // return back an empty row, so table can at least render empty cells
	                    var dummyNode = this.createNode({}, rowIndex);
	                    return dummyNode;
	                }
	                else {
	                    var indexInThisPage = rowIndex % this.pageSize;
	                    return page[indexInThisPage];
	                }
	            };
	            VirtualPageRowController.prototype.forEachNode = function (callback) {
	                var pageKeys = Object.keys(this.pageCache);
	                for (var i = 0; i < pageKeys.length; i++) {
	                    var pageKey = pageKeys[i];
	                    var page = this.pageCache[pageKey];
	                    for (var j = 0; j < page.length; j++) {
	                        var node = page[j];
	                        callback(node);
	                    }
	                }
	            };
	            VirtualPageRowController.prototype.getRowHeightAsNumber = function () {
	                var rowHeight = this.gridOptionsWrapper.getRowHeightForVirtualPagiation();
	                if (typeof rowHeight === 'number') {
	                    return rowHeight;
	                }
	                else {
	                    console.warn('ag-Grid row height must be a number when doing virtual paging');
	                    return 25;
	                }
	            };
	            VirtualPageRowController.prototype.getVirtualRowCombinedHeight = function () {
	                return this.virtualRowCount * this.getRowHeightAsNumber();
	            };
	            VirtualPageRowController.prototype.getRowAtPixel = function (pixel) {
	                var rowHeight = this.getRowHeightAsNumber();
	                if (rowHeight !== 0) {
	                    return Math.floor(pixel / rowHeight);
	                }
	                else {
	                    return 0;
	                }
	            };
	            VirtualPageRowController.prototype.getModel = function () {
	                var that = this;
	                return {
	                    getRowAtPixel: function (pixel) {
	                        return that.getRowAtPixel(pixel);
	                    },
	                    getVirtualRowCombinedHeight: function () {
	                        return that.getVirtualRowCombinedHeight();
	                    },
	                    getVirtualRow: function (index) {
	                        return that.getVirtualRow(index);
	                    },
	                    getVirtualRowCount: function () {
	                        return that.virtualRowCount;
	                    },
	                    forEachInMemory: function (callback) {
	                        that.forEachNode(callback);
	                    },
	                    forEachNode: function (callback) {
	                        that.forEachNode(callback);
	                    },
	                    forEachNodeAfterFilter: function (callback) {
	                        console.warn('forEachNodeAfterFilter - does not work with virtual pagination');
	                    },
	                    forEachNodeAfterFilterAndSort: function (callback) {
	                        console.warn('forEachNodeAfterFilterAndSort - does not work with virtual pagination');
	                    }
	                };
	            };
	            return VirtualPageRowController;
	        })();
	        grid.VirtualPageRowController = VirtualPageRowController;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var utils = grid.Utils;
	        var template = '<div class="ag-paging-panel">' +
	            '<span id="pageRowSummaryPanel" class="ag-paging-row-summary-panel">' +
	            '<span id="firstRowOnPage"></span>' +
	            ' [TO] ' +
	            '<span id="lastRowOnPage"></span>' +
	            ' [OF] ' +
	            '<span id="recordCount"></span>' +
	            '</span>' +
	            '<span class="ag-paging-page-summary-panel">' +
	            '<button type="button" class="ag-paging-button" id="btFirst">[FIRST]</button>' +
	            '<button type="button" class="ag-paging-button" id="btPrevious">[PREVIOUS]</button>' +
	            '[PAGE] ' +
	            '<span id="current"></span>' +
	            ' [OF] ' +
	            '<span id="total"></span>' +
	            '<button type="button" class="ag-paging-button" id="btNext">[NEXT]</button>' +
	            '<button type="button" class="ag-paging-button" id="btLast">[LAST]</button>' +
	            '</span>' +
	            '</div>';
	        var PaginationController = (function () {
	            function PaginationController() {
	            }
	            PaginationController.prototype.init = function (angularGrid, gridOptionsWrapper) {
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.angularGrid = angularGrid;
	                this.setupComponents();
	                this.callVersion = 0;
	            };
	            PaginationController.prototype.setDatasource = function (datasource) {
	                this.datasource = datasource;
	                if (!datasource) {
	                    // only continue if we have a valid datasource to work with
	                    return;
	                }
	                this.reset();
	            };
	            PaginationController.prototype.reset = function () {
	                // copy pageSize, to guard against it changing the the datasource between calls
	                if (this.datasource.pageSize && typeof this.datasource.pageSize !== 'number') {
	                    console.warn('datasource.pageSize should be a number');
	                }
	                this.pageSize = this.datasource.pageSize;
	                // see if we know the total number of pages, or if it's 'to be decided'
	                if (typeof this.datasource.rowCount === 'number' && this.datasource.rowCount >= 0) {
	                    this.rowCount = this.datasource.rowCount;
	                    this.foundMaxRow = true;
	                    this.calculateTotalPages();
	                }
	                else {
	                    this.rowCount = 0;
	                    this.foundMaxRow = false;
	                    this.totalPages = null;
	                }
	                this.currentPage = 0;
	                // hide the summary panel until something is loaded
	                this.ePageRowSummaryPanel.style.visibility = 'hidden';
	                this.setTotalLabels();
	                this.loadPage();
	            };
	            // the native method number.toLocaleString(undefined, {minimumFractionDigits: 0}) puts in decimal places in IE
	            PaginationController.prototype.myToLocaleString = function (input) {
	                if (typeof input !== 'number') {
	                    return '';
	                }
	                else {
	                    // took this from: http://blog.tompawlak.org/number-currency-formatting-javascript
	                    return input.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1,");
	                }
	            };
	            PaginationController.prototype.setTotalLabels = function () {
	                if (this.foundMaxRow) {
	                    this.lbTotal.innerHTML = this.myToLocaleString(this.totalPages);
	                    this.lbRecordCount.innerHTML = this.myToLocaleString(this.rowCount);
	                }
	                else {
	                    var moreText = this.gridOptionsWrapper.getLocaleTextFunc()('more', 'more');
	                    this.lbTotal.innerHTML = moreText;
	                    this.lbRecordCount.innerHTML = moreText;
	                }
	            };
	            PaginationController.prototype.calculateTotalPages = function () {
	                this.totalPages = Math.floor((this.rowCount - 1) / this.pageSize) + 1;
	            };
	            PaginationController.prototype.pageLoaded = function (rows, lastRowIndex) {
	                var firstId = this.currentPage * this.pageSize;
	                this.angularGrid.setRowData(rows, firstId);
	                // see if we hit the last row
	                if (!this.foundMaxRow && typeof lastRowIndex === 'number' && lastRowIndex >= 0) {
	                    this.foundMaxRow = true;
	                    this.rowCount = lastRowIndex;
	                    this.calculateTotalPages();
	                    this.setTotalLabels();
	                    // if overshot pages, go back
	                    if (this.currentPage > this.totalPages) {
	                        this.currentPage = this.totalPages - 1;
	                        this.loadPage();
	                    }
	                }
	                this.enableOrDisableButtons();
	                this.updateRowLabels();
	            };
	            PaginationController.prototype.updateRowLabels = function () {
	                var startRow;
	                var endRow;
	                if (this.isZeroPagesToDisplay()) {
	                    startRow = 0;
	                    endRow = 0;
	                }
	                else {
	                    startRow = (this.pageSize * this.currentPage) + 1;
	                    endRow = startRow + this.pageSize - 1;
	                    if (this.foundMaxRow && endRow > this.rowCount) {
	                        endRow = this.rowCount;
	                    }
	                }
	                this.lbFirstRowOnPage.innerHTML = this.myToLocaleString(startRow);
	                this.lbLastRowOnPage.innerHTML = this.myToLocaleString(endRow);
	                // show the summary panel, when first shown, this is blank
	                this.ePageRowSummaryPanel.style.visibility = "";
	            };
	            PaginationController.prototype.loadPage = function () {
	                this.enableOrDisableButtons();
	                var startRow = this.currentPage * this.datasource.pageSize;
	                var endRow = (this.currentPage + 1) * this.datasource.pageSize;
	                this.lbCurrent.innerHTML = this.myToLocaleString(this.currentPage + 1);
	                this.callVersion++;
	                var callVersionCopy = this.callVersion;
	                var that = this;
	                this.angularGrid.showLoadingOverlay();
	                var sortModel;
	                if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	                    sortModel = this.angularGrid.getSortModel();
	                }
	                var filterModel;
	                if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
	                    filterModel = this.angularGrid.getFilterModel();
	                }
	                var params = {
	                    startRow: startRow,
	                    endRow: endRow,
	                    successCallback: successCallback,
	                    failCallback: failCallback,
	                    sortModel: sortModel,
	                    filterModel: filterModel
	                };
	                // check if old version of datasource used
	                var getRowsParams = utils.getFunctionParameters(this.datasource.getRows);
	                if (getRowsParams.length > 1) {
	                    console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.');
	                    console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.');
	                }
	                this.datasource.getRows(params);
	                function successCallback(rows, lastRowIndex) {
	                    if (that.isCallDaemon(callVersionCopy)) {
	                        return;
	                    }
	                    that.pageLoaded(rows, lastRowIndex);
	                }
	                function failCallback() {
	                    if (that.isCallDaemon(callVersionCopy)) {
	                        return;
	                    }
	                    // set in an empty set of rows, this will at
	                    // least get rid of the loading panel, and
	                    // stop blocking things
	                    that.angularGrid.setRowData([]);
	                }
	            };
	            PaginationController.prototype.isCallDaemon = function (versionCopy) {
	                return versionCopy !== this.callVersion;
	            };
	            PaginationController.prototype.onBtNext = function () {
	                this.currentPage++;
	                this.loadPage();
	            };
	            PaginationController.prototype.onBtPrevious = function () {
	                this.currentPage--;
	                this.loadPage();
	            };
	            PaginationController.prototype.onBtFirst = function () {
	                this.currentPage = 0;
	                this.loadPage();
	            };
	            PaginationController.prototype.onBtLast = function () {
	                this.currentPage = this.totalPages - 1;
	                this.loadPage();
	            };
	            PaginationController.prototype.isZeroPagesToDisplay = function () {
	                return this.foundMaxRow && this.totalPages === 0;
	            };
	            PaginationController.prototype.enableOrDisableButtons = function () {
	                var disablePreviousAndFirst = this.currentPage === 0;
	                this.btPrevious.disabled = disablePreviousAndFirst;
	                this.btFirst.disabled = disablePreviousAndFirst;
	                var zeroPagesToDisplay = this.isZeroPagesToDisplay();
	                var onLastPage = this.foundMaxRow && this.currentPage === (this.totalPages - 1);
	                var disableNext = onLastPage || zeroPagesToDisplay;
	                this.btNext.disabled = disableNext;
	                var disableLast = !this.foundMaxRow || zeroPagesToDisplay || this.currentPage === (this.totalPages - 1);
	                this.btLast.disabled = disableLast;
	            };
	            PaginationController.prototype.createTemplate = function () {
	                var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	                return template
	                    .replace('[PAGE]', localeTextFunc('page', 'Page'))
	                    .replace('[TO]', localeTextFunc('to', 'to'))
	                    .replace('[OF]', localeTextFunc('of', 'of'))
	                    .replace('[OF]', localeTextFunc('of', 'of'))
	                    .replace('[FIRST]', localeTextFunc('first', 'First'))
	                    .replace('[PREVIOUS]', localeTextFunc('previous', 'Previous'))
	                    .replace('[NEXT]', localeTextFunc('next', 'Next'))
	                    .replace('[LAST]', localeTextFunc('last', 'Last'));
	            };
	            PaginationController.prototype.getGui = function () {
	                return this.eGui;
	            };
	            PaginationController.prototype.setupComponents = function () {
	                this.eGui = utils.loadTemplate(this.createTemplate());
	                this.btNext = this.eGui.querySelector('#btNext');
	                this.btPrevious = this.eGui.querySelector('#btPrevious');
	                this.btFirst = this.eGui.querySelector('#btFirst');
	                this.btLast = this.eGui.querySelector('#btLast');
	                this.lbCurrent = this.eGui.querySelector('#current');
	                this.lbTotal = this.eGui.querySelector('#total');
	                this.lbRecordCount = this.eGui.querySelector('#recordCount');
	                this.lbFirstRowOnPage = this.eGui.querySelector('#firstRowOnPage');
	                this.lbLastRowOnPage = this.eGui.querySelector('#lastRowOnPage');
	                this.ePageRowSummaryPanel = this.eGui.querySelector('#pageRowSummaryPanel');
	                var that = this;
	                this.btNext.addEventListener('click', function () {
	                    that.onBtNext();
	                });
	                this.btPrevious.addEventListener('click', function () {
	                    that.onBtPrevious();
	                });
	                this.btFirst.addEventListener('click', function () {
	                    that.onBtFirst();
	                });
	                this.btLast.addEventListener('click', function () {
	                    that.onBtLast();
	                });
	            };
	            return PaginationController;
	        })();
	        grid.PaginationController = PaginationController;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var BorderLayout = (function () {
	            function BorderLayout(params) {
	                this.sizeChangeListeners = [];
	                this.isLayoutPanel = true;
	                this.fullHeight = !params.north && !params.south;
	                var template;
	                if (!params.dontFill) {
	                    if (this.fullHeight) {
	                        template =
	                            '<div style="height: 100%; overflow: auto; position: relative;">' +
	                                '<div id="west" style="height: 100%; float: left;"></div>' +
	                                '<div id="east" style="height: 100%; float: right;"></div>' +
	                                '<div id="center" style="height: 100%;"></div>' +
	                                '<div id="overlay" style="pointer-events: none; position: absolute; height: 100%; width: 100%; top: 0px; left: 0px;"></div>' +
	                                '</div>';
	                    }
	                    else {
	                        template =
	                            '<div style="height: 100%; position: relative;">' +
	                                '<div id="north"></div>' +
	                                '<div id="centerRow" style="height: 100%; overflow: hidden;">' +
	                                '<div id="west" style="height: 100%; float: left;"></div>' +
	                                '<div id="east" style="height: 100%; float: right;"></div>' +
	                                '<div id="center" style="height: 100%;"></div>' +
	                                '</div>' +
	                                '<div id="south"></div>' +
	                                '<div id="overlay" style="pointer-events: none; position: absolute; height: 100%; width: 100%; top: 0px; left: 0px;"></div>' +
	                                '</div>';
	                    }
	                    this.layoutActive = true;
	                }
	                else {
	                    template =
	                        '<div style="position: relative;">' +
	                            '<div id="north"></div>' +
	                            '<div id="centerRow">' +
	                            '<div id="west"></div>' +
	                            '<div id="east"></div>' +
	                            '<div id="center"></div>' +
	                            '</div>' +
	                            '<div id="south"></div>' +
	                            '<div id="overlay" style="pointer-events: none; position: absolute; height: 100%; width: 100%; top: 0px; left: 0px;"></div>' +
	                            '</div>';
	                    this.layoutActive = false;
	                }
	                this.eGui = _.loadTemplate(template);
	                this.id = 'borderLayout';
	                if (params.name) {
	                    this.id += '_' + params.name;
	                }
	                this.eGui.setAttribute('id', this.id);
	                this.childPanels = [];
	                if (params) {
	                    this.setupPanels(params);
	                }
	                this.overlays = params.overlays;
	                this.setupOverlays();
	            }
	            BorderLayout.prototype.addSizeChangeListener = function (listener) {
	                this.sizeChangeListeners.push(listener);
	            };
	            BorderLayout.prototype.fireSizeChanged = function () {
	                this.sizeChangeListeners.forEach(function (listener) {
	                    listener();
	                });
	            };
	            BorderLayout.prototype.setupPanels = function (params) {
	                this.eNorthWrapper = this.eGui.querySelector('#north');
	                this.eSouthWrapper = this.eGui.querySelector('#south');
	                this.eEastWrapper = this.eGui.querySelector('#east');
	                this.eWestWrapper = this.eGui.querySelector('#west');
	                this.eCenterWrapper = this.eGui.querySelector('#center');
	                this.eOverlayWrapper = this.eGui.querySelector('#overlay');
	                this.eCenterRow = this.eGui.querySelector('#centerRow');
	                this.eNorthChildLayout = this.setupPanel(params.north, this.eNorthWrapper);
	                this.eSouthChildLayout = this.setupPanel(params.south, this.eSouthWrapper);
	                this.eEastChildLayout = this.setupPanel(params.east, this.eEastWrapper);
	                this.eWestChildLayout = this.setupPanel(params.west, this.eWestWrapper);
	                this.eCenterChildLayout = this.setupPanel(params.center, this.eCenterWrapper);
	            };
	            BorderLayout.prototype.setupPanel = function (content, ePanel) {
	                if (!ePanel) {
	                    return;
	                }
	                if (content) {
	                    if (content.isLayoutPanel) {
	                        this.childPanels.push(content);
	                        ePanel.appendChild(content.getGui());
	                        return content;
	                    }
	                    else {
	                        ePanel.appendChild(content);
	                        return null;
	                    }
	                }
	                else {
	                    ePanel.parentNode.removeChild(ePanel);
	                    return null;
	                }
	            };
	            BorderLayout.prototype.getGui = function () {
	                return this.eGui;
	            };
	            // returns true if any item changed size, otherwise returns false
	            BorderLayout.prototype.doLayout = function () {
	                if (!_.isVisible(this.eGui)) {
	                    return false;
	                }
	                var atLeastOneChanged = false;
	                var childLayouts = [this.eNorthChildLayout, this.eSouthChildLayout, this.eEastChildLayout, this.eWestChildLayout];
	                var that = this;
	                _.forEach(childLayouts, function (childLayout) {
	                    var childChangedSize = that.layoutChild(childLayout);
	                    if (childChangedSize) {
	                        atLeastOneChanged = true;
	                    }
	                });
	                if (this.layoutActive) {
	                    var ourHeightChanged = this.layoutHeight();
	                    var ourWidthChanged = this.layoutWidth();
	                    if (ourHeightChanged || ourWidthChanged) {
	                        atLeastOneChanged = true;
	                    }
	                }
	                var centerChanged = this.layoutChild(this.eCenterChildLayout);
	                if (centerChanged) {
	                    atLeastOneChanged = true;
	                }
	                if (atLeastOneChanged) {
	                    this.fireSizeChanged();
	                }
	                return atLeastOneChanged;
	            };
	            BorderLayout.prototype.layoutChild = function (childPanel) {
	                if (childPanel) {
	                    return childPanel.doLayout();
	                }
	                else {
	                    return false;
	                }
	            };
	            BorderLayout.prototype.layoutHeight = function () {
	                if (this.fullHeight) {
	                    return this.layoutHeightFullHeight();
	                }
	                else {
	                    return this.layoutHeightNormal();
	                }
	            };
	            // full height never changes the height, because the center is always 100%,
	            // however we do check for change, to inform the listeners
	            BorderLayout.prototype.layoutHeightFullHeight = function () {
	                var centerHeight = _.offsetHeight(this.eGui);
	                if (centerHeight < 0) {
	                    centerHeight = 0;
	                }
	                if (this.centerHeightLastTime !== centerHeight) {
	                    this.centerHeightLastTime = centerHeight;
	                    return true;
	                }
	                else {
	                    return false;
	                }
	            };
	            BorderLayout.prototype.layoutHeightNormal = function () {
	                var totalHeight = _.offsetHeight(this.eGui);
	                var northHeight = _.offsetHeight(this.eNorthWrapper);
	                var southHeight = _.offsetHeight(this.eSouthWrapper);
	                var centerHeight = totalHeight - northHeight - southHeight;
	                if (centerHeight < 0) {
	                    centerHeight = 0;
	                }
	                if (this.centerHeightLastTime !== centerHeight) {
	                    this.eCenterRow.style.height = centerHeight + 'px';
	                    this.centerHeightLastTime = centerHeight;
	                    return true; // return true because there was a change
	                }
	                else {
	                    return false;
	                }
	            };
	            BorderLayout.prototype.getCentreHeight = function () {
	                return this.centerHeightLastTime;
	            };
	            BorderLayout.prototype.layoutWidth = function () {
	                var totalWidth = _.offsetWidth(this.eGui);
	                var eastWidth = _.offsetWidth(this.eEastWrapper);
	                var westWidth = _.offsetWidth(this.eWestWrapper);
	                var centerWidth = totalWidth - eastWidth - westWidth;
	                if (centerWidth < 0) {
	                    centerWidth = 0;
	                }
	                this.eCenterWrapper.style.width = centerWidth + 'px';
	            };
	            BorderLayout.prototype.setEastVisible = function (visible) {
	                if (this.eEastWrapper) {
	                    this.eEastWrapper.style.display = visible ? '' : 'none';
	                }
	                this.doLayout();
	            };
	            BorderLayout.prototype.setupOverlays = function () {
	                // if no overlays, just remove the panel
	                if (!this.overlays) {
	                    this.eOverlayWrapper.parentNode.removeChild(this.eOverlayWrapper);
	                    return;
	                }
	                this.hideOverlay();
	                //
	                //this.setOverlayVisible(false);
	            };
	            BorderLayout.prototype.hideOverlay = function () {
	                _.removeAllChildren(this.eOverlayWrapper);
	                this.eOverlayWrapper.style.display = 'none';
	            };
	            BorderLayout.prototype.showOverlay = function (key) {
	                var overlay = this.overlays ? this.overlays[key] : null;
	                if (overlay) {
	                    _.removeAllChildren(this.eOverlayWrapper);
	                    this.eOverlayWrapper.style.display = '';
	                    this.eOverlayWrapper.appendChild(overlay);
	                }
	                else {
	                    console.log('ag-Grid: unknown overlay');
	                    this.hideOverlay();
	                }
	            };
	            BorderLayout.prototype.setSouthVisible = function (visible) {
	                if (this.eSouthWrapper) {
	                    this.eSouthWrapper.style.display = visible ? '' : 'none';
	                }
	                this.doLayout();
	            };
	            return BorderLayout;
	        })();
	        grid.BorderLayout = BorderLayout;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/// <reference path="../layout/borderLayout.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        // the long lines below are on purpose, otherwise there is while space between some of the dives that
	        // we do not want to have, and this white space ends up as gaps in some of the browsers
	        var gridHtml = "<div>\n                <!-- header -->\n                <div class=\"ag-header\">\n                    <div class=\"ag-pinned-left-header\"></div><div class=\"ag-pinned-right-header\"></div><div class=\"ag-header-viewport\"><div class=\"ag-header-container\"></div></div>\n                </div>\n                <!-- floating top -->\n                <div class=\"ag-floating-top\">\n                    <div class=\"ag-pinned-left-floating-top\"></div><div class=\"ag-pinned-right-floating-top\"></div><div class=\"ag-floating-top-viewport\"><div class=\"ag-floating-top-container\"></div></div>\n                </div>\n                <!-- floating bottom -->\n                <div class=\"ag-floating-bottom\">\n                    <div class=\"ag-pinned-left-floating-bottom\"></div><div class=\"ag-pinned-right-floating-bottom\"></div><div class=\"ag-floating-bottom-viewport\"><div class=\"ag-floating-bottom-container\"></div></div>\n                </div>\n                <!-- body -->\n                <div class=\"ag-body\">\n                    <div class=\"ag-pinned-left-cols-viewport\">\n                        <div class=\"ag-pinned-left-cols-container\"></div>\n                    </div>\n                    <div class=\"ag-pinned-right-cols-viewport\">\n                        <div class=\"ag-pinned-right-cols-container\"></div>\n                    </div>\n                    <div class=\"ag-body-viewport-wrapper\">\n                        <div class=\"ag-body-viewport\">\n                            <div class=\"ag-body-container\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>";
	        var gridForPrintHtml = "<div>\n                <!-- header -->\n                <div class=\"ag-header-container\"></div>\n                <!-- floating top -->\n                <div class=\"ag-floating-top-container\"></div>\n                <!-- body -->\n                <div class=\"ag-body-container\"></div>\n                <!-- floating bottom -->\n                <div class=\"ag-floating-bottom-container\"></div>\n            </div>";
	        // wrapping in outer div, and wrapper, is needed to center the loading icon
	        // The idea for centering came from here: http://www.vanseodesign.com/css/vertical-centering/
	        var mainOverlayTemplate = '<div class="ag-overlay-panel">' +
	            '<div class="ag-overlay-wrapper ag-overlay-[OVERLAY_NAME]-wrapper">[OVERLAY_TEMPLATE]</div>' +
	            '</div>';
	        var defaultLoadingOverlayTemplate = '<span class="ag-overlay-loading-center">[LOADING...]</span>';
	        var defaultNoRowsOverlayTemplate = '<span class="ag-overlay-no-rows-center">[NO_ROWS_TO_SHOW]</span>';
	        var _ = grid.Utils;
	        var GridPanel = (function () {
	            function GridPanel() {
	                this.scrollLagCounter = 0;
	                this.lastLeftPosition = -1;
	                this.lastTopPosition = -1;
	            }
	            GridPanel.prototype.init = function (gridOptionsWrapper, columnModel, rowRenderer, masterSlaveService, loggerFactory, floatingRowModel) {
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                // makes code below more readable if we pull 'forPrint' out
	                this.forPrint = this.gridOptionsWrapper.isForPrint();
	                this.setupComponents();
	                this.scrollWidth = _.getScrollbarWidth();
	                this.columnModel = columnModel;
	                this.rowRenderer = rowRenderer;
	                this.masterSlaveService = masterSlaveService;
	                this.floatingRowModel = floatingRowModel;
	                this.logger = loggerFactory.create('GridPanel');
	            };
	            GridPanel.prototype.getLayout = function () {
	                return this.layout;
	            };
	            GridPanel.prototype.setupComponents = function () {
	                if (this.forPrint) {
	                    this.eRoot = _.loadTemplate(gridForPrintHtml);
	                    _.addCssClass(this.eRoot, 'ag-root ag-no-scrolls');
	                }
	                else {
	                    this.eRoot = _.loadTemplate(gridHtml);
	                    _.addCssClass(this.eRoot, 'ag-root ag-scrolls');
	                }
	                this.findElements();
	                this.layout = new grid.BorderLayout({
	                    overlays: {
	                        loading: _.loadTemplate(this.createLoadingOverlayTemplate()),
	                        noRows: _.loadTemplate(this.createNoRowsOverlayTemplate())
	                    },
	                    center: this.eRoot,
	                    dontFill: this.forPrint,
	                    name: 'eGridPanel'
	                });
	                this.layout.addSizeChangeListener(this.onBodyHeightChange.bind(this));
	                this.addScrollListener();
	                if (this.gridOptionsWrapper.isSuppressHorizontalScroll()) {
	                    this.eBodyViewport.style.overflowX = 'hidden';
	                }
	            };
	            GridPanel.prototype.getPinnedLeftFloatingTop = function () {
	                return this.ePinnedLeftFloatingTop;
	            };
	            GridPanel.prototype.getPinnedRightFloatingTop = function () {
	                return this.ePinnedRightFloatingTop;
	            };
	            GridPanel.prototype.getFloatingTopContainer = function () {
	                return this.eFloatingTopContainer;
	            };
	            GridPanel.prototype.getPinnedLeftFloatingBottom = function () {
	                return this.ePinnedLeftFloatingBottom;
	            };
	            GridPanel.prototype.getPinnedRightFloatingBottom = function () {
	                return this.ePinnedRightFloatingBottom;
	            };
	            GridPanel.prototype.getFloatingBottomContainer = function () {
	                return this.eFloatingBottomContainer;
	            };
	            GridPanel.prototype.createOverlayTemplate = function (name, defaultTemplate, userProvidedTemplate) {
	                var template = mainOverlayTemplate
	                    .replace('[OVERLAY_NAME]', name);
	                if (userProvidedTemplate) {
	                    template = template.replace('[OVERLAY_TEMPLATE]', userProvidedTemplate);
	                }
	                else {
	                    template = template.replace('[OVERLAY_TEMPLATE]', defaultTemplate);
	                }
	                return template;
	            };
	            GridPanel.prototype.createLoadingOverlayTemplate = function () {
	                var userProvidedTemplate = this.gridOptionsWrapper.getOverlayLoadingTemplate();
	                var templateNotLocalised = this.createOverlayTemplate('loading', defaultLoadingOverlayTemplate, userProvidedTemplate);
	                var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	                var templateLocalised = templateNotLocalised.replace('[LOADING...]', localeTextFunc('loadingOoo', 'Loading...'));
	                return templateLocalised;
	            };
	            GridPanel.prototype.createNoRowsOverlayTemplate = function () {
	                var userProvidedTemplate = this.gridOptionsWrapper.getOverlayNoRowsTemplate();
	                var templateNotLocalised = this.createOverlayTemplate('no-rows', defaultNoRowsOverlayTemplate, userProvidedTemplate);
	                var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	                var templateLocalised = templateNotLocalised.replace('[NO_ROWS_TO_SHOW]', localeTextFunc('noRowsToShow', 'No Rows To Show'));
	                return templateLocalised;
	            };
	            GridPanel.prototype.ensureIndexVisible = function (index) {
	                this.logger.log('ensureIndexVisible: ' + index);
	                var lastRow = this.rowModel.getVirtualRowCount();
	                if (typeof index !== 'number' || index < 0 || index >= lastRow) {
	                    console.warn('invalid row index for ensureIndexVisible: ' + index);
	                    return;
	                }
	                var nodeAtIndex = this.rowModel.getVirtualRow(index);
	                var rowTopPixel = nodeAtIndex.rowTop;
	                var rowBottomPixel = rowTopPixel + nodeAtIndex.rowHeight;
	                var viewportTopPixel = this.eBodyViewport.scrollTop;
	                var viewportHeight = this.eBodyViewport.offsetHeight;
	                var scrollShowing = this.isHorizontalScrollShowing();
	                if (scrollShowing) {
	                    viewportHeight -= this.scrollWidth;
	                }
	                var viewportBottomPixel = viewportTopPixel + viewportHeight;
	                var viewportScrolledPastRow = viewportTopPixel > rowTopPixel;
	                var viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel;
	                var eViewportToScroll = this.columnModel.isPinningRight() ? this.ePinnedRightColsViewport : this.eBodyViewport;
	                if (viewportScrolledPastRow) {
	                    // if row is before, scroll up with row at top
	                    eViewportToScroll.scrollTop = rowTopPixel;
	                }
	                else if (viewportScrolledBeforeRow) {
	                    // if row is below, scroll down with row at bottom
	                    var newScrollPosition = rowBottomPixel - viewportHeight;
	                    eViewportToScroll.scrollTop = newScrollPosition;
	                }
	                // otherwise, row is already in view, so do nothing
	            };
	            GridPanel.prototype.isHorizontalScrollShowing = function () {
	                var result = this.eBodyViewport.clientWidth < this.eBodyViewport.scrollWidth;
	                return result;
	            };
	            GridPanel.prototype.isVerticalScrollShowing = function () {
	                if (this.columnModel.isPinningRight()) {
	                    // if pinning right, then the scroll bar can show, however for some reason
	                    // it overlays the grid and doesn't take space.
	                    return false;
	                }
	                else {
	                    return this.eBodyViewport.clientHeight < this.eBodyViewport.scrollHeight;
	                }
	            };
	            // gets called every 500 ms. we use this to set padding on right pinned column
	            GridPanel.prototype.periodicallyCheck = function () {
	                if (this.columnModel.isPinningRight()) {
	                    var bodyHorizontalScrollShowing = this.eBodyViewport.clientWidth < this.eBodyViewport.scrollWidth;
	                    if (bodyHorizontalScrollShowing) {
	                        this.ePinnedRightColsContainer.style.marginBottom = this.scrollWidth + 'px';
	                    }
	                    else {
	                        this.ePinnedRightColsContainer.style.marginBottom = '';
	                    }
	                }
	            };
	            GridPanel.prototype.ensureColIndexVisible = function (index) {
	                var leftColumns = this.columnModel.getDisplayedLeftColumns();
	                var centerColumns = this.columnModel.getDisplayedCenterColumns();
	                var minAllowedIndex = leftColumns.length;
	                var maxAllowedIndex = minAllowedIndex + centerColumns.length - 1;
	                var indexIsInRange = index >= minAllowedIndex && index <= maxAllowedIndex;
	                if (!indexIsInRange) {
	                    console.warn('index is not in range, should be between '
	                        + minAllowedIndex + ' and ' + maxAllowedIndex);
	                    console.warn('Remember it makes no sense to scroll to a pinned column');
	                    return;
	                }
	                var centerIndex = index - leftColumns.length;
	                var column = centerColumns[centerIndex];
	                // sum up all col width to the let to get the start pixel
	                var colLeftPixel = 0;
	                for (var i = 0; i < centerIndex; i++) {
	                    colLeftPixel += centerColumns[i].getActualWidth();
	                }
	                var colRightPixel = colLeftPixel + column.getActualWidth();
	                var viewportLeftPixel = this.eBodyViewport.scrollLeft;
	                var viewportWidth = this.eBodyViewport.offsetWidth;
	                var scrollShowing = this.eBodyViewport.clientHeight < this.eBodyViewport.scrollHeight;
	                if (scrollShowing) {
	                    viewportWidth -= this.scrollWidth;
	                }
	                var viewportRightPixel = viewportLeftPixel + viewportWidth;
	                var viewportScrolledPastCol = viewportLeftPixel > colLeftPixel;
	                var viewportScrolledBeforeCol = viewportRightPixel < colRightPixel;
	                if (viewportScrolledPastCol) {
	                    // if viewport's left side is after col's left side, scroll right to pull col into viewport at left
	                    this.eBodyViewport.scrollLeft = colLeftPixel;
	                }
	                else if (viewportScrolledBeforeCol) {
	                    // if viewport's right side is before col's right side, scroll left to pull col into viewport at right
	                    var newScrollPosition = colRightPixel - viewportWidth;
	                    this.eBodyViewport.scrollLeft = newScrollPosition;
	                }
	                // otherwise, col is already in view, so do nothing
	            };
	            GridPanel.prototype.showLoadingOverlay = function () {
	                if (!this.gridOptionsWrapper.isSuppressLoadingOverlay()) {
	                    this.layout.showOverlay('loading');
	                }
	            };
	            GridPanel.prototype.showNoRowsOverlay = function () {
	                if (!this.gridOptionsWrapper.isSuppressNoRowsOverlay()) {
	                    this.layout.showOverlay('noRows');
	                }
	            };
	            GridPanel.prototype.hideOverlay = function () {
	                this.layout.hideOverlay();
	            };
	            GridPanel.prototype.getWidthForSizeColsToFit = function () {
	                var availableWidth = this.eBody.clientWidth;
	                var scrollShowing = this.isVerticalScrollShowing();
	                if (scrollShowing) {
	                    availableWidth -= this.scrollWidth;
	                }
	                return availableWidth;
	            };
	            // method will call itself if no available width. this covers if the grid
	            // isn't visible, but is just about to be visible.
	            GridPanel.prototype.sizeColumnsToFit = function (nextTimeout) {
	                var _this = this;
	                var availableWidth = this.getWidthForSizeColsToFit();
	                if (availableWidth > 0) {
	                    this.columnModel.sizeColumnsToFit(availableWidth);
	                }
	                else {
	                    if (nextTimeout === undefined) {
	                        setTimeout(function () {
	                            _this.sizeColumnsToFit(100);
	                        }, 0);
	                    }
	                    else if (nextTimeout === 100) {
	                        setTimeout(function () {
	                            _this.sizeColumnsToFit(-1);
	                        }, 100);
	                    }
	                    else {
	                        console.log('ag-Grid: tried to call sizeColumnsToFit() but the grid is coming back with zero width, mabye the grid is not visible yet on the screen?');
	                    }
	                }
	            };
	            GridPanel.prototype.setRowModel = function (rowModel) {
	                this.rowModel = rowModel;
	            };
	            GridPanel.prototype.getBodyContainer = function () {
	                return this.eBodyContainer;
	            };
	            GridPanel.prototype.getBodyViewport = function () {
	                return this.eBodyViewport;
	            };
	            GridPanel.prototype.getPinnedLeftColsContainer = function () {
	                return this.ePinnedLeftColsContainer;
	            };
	            GridPanel.prototype.getPinnedRightColsContainer = function () {
	                return this.ePinnedRightColsContainer;
	            };
	            GridPanel.prototype.getHeaderContainer = function () {
	                return this.eHeaderContainer;
	            };
	            GridPanel.prototype.getRoot = function () {
	                return this.eRoot;
	            };
	            GridPanel.prototype.getPinnedLeftHeader = function () {
	                return this.ePinnedLeftHeader;
	            };
	            GridPanel.prototype.getPinnedRightHeader = function () {
	                return this.ePinnedRightHeader;
	            };
	            GridPanel.prototype.getRowsParent = function () {
	                return this.eParentsOfRows;
	            };
	            GridPanel.prototype.queryHtmlElement = function (selector) {
	                return this.eRoot.querySelector(selector);
	            };
	            GridPanel.prototype.findElements = function () {
	                if (this.forPrint) {
	                    this.eHeaderContainer = this.queryHtmlElement('.ag-header-container');
	                    this.eBodyContainer = this.queryHtmlElement('.ag-body-container');
	                    this.eFloatingTopContainer = this.queryHtmlElement('.ag-floating-top-container');
	                    this.eFloatingBottomContainer = this.queryHtmlElement('.ag-floating-bottom-container');
	                    this.eParentsOfRows = [this.eBodyContainer, this.eFloatingTopContainer, this.eFloatingBottomContainer];
	                }
	                else {
	                    this.eBody = this.queryHtmlElement('.ag-body');
	                    this.eBodyContainer = this.queryHtmlElement('.ag-body-container');
	                    this.eBodyViewport = this.queryHtmlElement('.ag-body-viewport');
	                    this.eBodyViewportWrapper = this.queryHtmlElement('.ag-body-viewport-wrapper');
	                    this.ePinnedLeftColsContainer = this.queryHtmlElement('.ag-pinned-left-cols-container');
	                    this.ePinnedRightColsContainer = this.queryHtmlElement('.ag-pinned-right-cols-container');
	                    this.ePinnedLeftColsViewport = this.queryHtmlElement('.ag-pinned-left-cols-viewport');
	                    this.ePinnedRightColsViewport = this.queryHtmlElement('.ag-pinned-right-cols-viewport');
	                    this.ePinnedLeftHeader = this.queryHtmlElement('.ag-pinned-left-header');
	                    this.ePinnedRightHeader = this.queryHtmlElement('.ag-pinned-right-header');
	                    this.eHeader = this.queryHtmlElement('.ag-header');
	                    this.eHeaderContainer = this.queryHtmlElement('.ag-header-container');
	                    this.eHeaderViewport = this.queryHtmlElement('.ag-header-viewport');
	                    this.eFloatingTop = this.queryHtmlElement('.ag-floating-top');
	                    this.ePinnedLeftFloatingTop = this.queryHtmlElement('.ag-pinned-left-floating-top');
	                    this.ePinnedRightFloatingTop = this.queryHtmlElement('.ag-pinned-right-floating-top');
	                    this.eFloatingTopContainer = this.queryHtmlElement('.ag-floating-top-container');
	                    this.eFloatingBottom = this.queryHtmlElement('.ag-floating-bottom');
	                    this.ePinnedLeftFloatingBottom = this.queryHtmlElement('.ag-pinned-left-floating-bottom');
	                    this.ePinnedRightFloatingBottom = this.queryHtmlElement('.ag-pinned-right-floating-bottom');
	                    this.eFloatingBottomContainer = this.queryHtmlElement('.ag-floating-bottom-container');
	                    // for scrolls, all rows live in eBody (containing pinned and normal body)
	                    this.eParentsOfRows = [this.eBody, this.eFloatingTop, this.eFloatingBottom];
	                    // IE9, Chrome, Safari, Opera
	                    this.ePinnedLeftColsViewport.addEventListener('mousewheel', this.pinnedLeftMouseWheelListener.bind(this));
	                    this.eBodyViewport.addEventListener('mousewheel', this.centerMouseWheelListener.bind(this));
	                    // Firefox
	                    this.ePinnedLeftColsViewport.addEventListener('DOMMouseScroll', this.pinnedLeftMouseWheelListener.bind(this));
	                    this.eBodyViewport.addEventListener('DOMMouseScroll', this.centerMouseWheelListener.bind(this));
	                }
	            };
	            GridPanel.prototype.getHeaderViewport = function () {
	                return this.eHeaderViewport;
	            };
	            GridPanel.prototype.centerMouseWheelListener = function (event) {
	                // we are only interested in mimicking the mouse wheel if we are pinning on the right,
	                // as if we are not pinning on the right, then we have scrollbars in the center body, and
	                // as such we just use the default browser wheel behaviour.
	                if (this.columnModel.isPinningRight()) {
	                    return this.generalMouseWheelListener(event, this.ePinnedRightColsViewport);
	                }
	            };
	            GridPanel.prototype.pinnedLeftMouseWheelListener = function (event) {
	                var targetPanel;
	                if (this.columnModel.isPinningRight()) {
	                    targetPanel = this.ePinnedRightColsViewport;
	                }
	                else {
	                    targetPanel = this.eBodyViewport;
	                }
	                return this.generalMouseWheelListener(event, targetPanel);
	            };
	            GridPanel.prototype.generalMouseWheelListener = function (event, targetPanel) {
	                var delta;
	                if (event.deltaY && event.deltaX != 0) {
	                    // tested on chrome
	                    delta = event.deltaY;
	                }
	                else if (event.wheelDelta && event.wheelDelta != 0) {
	                    // tested on IE
	                    delta = -event.wheelDelta;
	                }
	                else if (event.detail && event.detail != 0) {
	                    // tested on Firefox. Firefox appears to be slower, 20px rather than the 100px in Chrome and IE
	                    delta = event.detail * 20;
	                }
	                else {
	                    // couldn't find delta
	                    return;
	                }
	                var newTopPosition = this.eBodyViewport.scrollTop + delta;
	                targetPanel.scrollTop = newTopPosition;
	                // if we don't prevent default, then the whole browser will scroll also as well as the grid
	                event.preventDefault();
	                return false;
	            };
	            GridPanel.prototype.setBodyContainerWidth = function () {
	                var mainRowWidth = this.columnModel.getBodyContainerWidth() + 'px';
	                this.eBodyContainer.style.width = mainRowWidth;
	                if (!this.forPrint) {
	                    this.eFloatingBottomContainer.style.width = mainRowWidth;
	                    this.eFloatingTopContainer.style.width = mainRowWidth;
	                }
	            };
	            GridPanel.prototype.setPinnedColContainerWidth = function () {
	                if (this.forPrint) {
	                    // pinned col doesn't exist when doing forPrint
	                    return;
	                }
	                var pinnedLeftWidth = this.columnModel.getPinnedLeftContainerWidth() + 'px';
	                this.ePinnedLeftColsContainer.style.width = pinnedLeftWidth;
	                this.ePinnedLeftFloatingBottom.style.width = pinnedLeftWidth;
	                this.ePinnedLeftFloatingTop.style.width = pinnedLeftWidth;
	                this.eBodyViewportWrapper.style.marginLeft = pinnedLeftWidth;
	                var pinnedRightWidth = this.columnModel.getPinnedRightContainerWidth() + 'px';
	                this.ePinnedRightColsContainer.style.width = pinnedRightWidth;
	                this.ePinnedRightFloatingBottom.style.width = pinnedRightWidth;
	                this.ePinnedRightFloatingTop.style.width = pinnedRightWidth;
	                this.eBodyViewportWrapper.style.marginRight = pinnedRightWidth;
	            };
	            GridPanel.prototype.showPinnedColContainersIfNeeded = function () {
	                // no need to do this if not using scrolls
	                if (this.forPrint) {
	                    return;
	                }
	                //some browsers had layout issues with the blank divs, so if blank,
	                //we don't display them
	                if (this.columnModel.isPinningLeft()) {
	                    this.ePinnedLeftHeader.style.display = 'inline-block';
	                    this.ePinnedLeftColsViewport.style.display = 'inline';
	                }
	                else {
	                    this.ePinnedLeftHeader.style.display = 'none';
	                    this.ePinnedLeftColsViewport.style.display = 'none';
	                }
	                if (this.columnModel.isPinningRight()) {
	                    this.ePinnedRightHeader.style.display = 'inline-block';
	                    this.ePinnedRightColsViewport.style.display = 'inline';
	                    this.eBodyViewport.style.overflowY = 'hidden';
	                }
	                else {
	                    this.ePinnedRightHeader.style.display = 'none';
	                    this.ePinnedRightColsViewport.style.display = 'none';
	                    this.eBodyViewport.style.overflowY = 'auto';
	                }
	            };
	            GridPanel.prototype.onBodyHeightChange = function () {
	                this.sizeHeaderAndBody();
	            };
	            GridPanel.prototype.sizeHeaderAndBody = function () {
	                if (this.forPrint) {
	                    this.sizeHeaderAndBodyForPrint();
	                }
	                else {
	                    this.sizeHeaderAndBodyNormal();
	                }
	            };
	            GridPanel.prototype.sizeHeaderAndBodyNormal = function () {
	                var heightOfContainer = this.layout.getCentreHeight();
	                if (!heightOfContainer) {
	                    return;
	                }
	                var headerHeight = this.gridOptionsWrapper.getHeaderHeight();
	                var numberOfRowsInHeader = this.columnModel.getHeaderRowCount();
	                var totalHeaderHeight = headerHeight * numberOfRowsInHeader;
	                this.eHeader.style['height'] = totalHeaderHeight + 'px';
	                // padding top covers the header and the floating rows on top
	                var floatingTopHeight = this.floatingRowModel.getFloatingTopTotalHeight();
	                var paddingTop = totalHeaderHeight + floatingTopHeight;
	                // bottom is just the bottom floating rows
	                var floatingBottomHeight = this.floatingRowModel.getFloatingBottomTotalHeight();
	                var floatingBottomTop = heightOfContainer - floatingBottomHeight;
	                var heightOfCentreRows = heightOfContainer - totalHeaderHeight - floatingBottomHeight - floatingTopHeight;
	                this.eBody.style.paddingTop = paddingTop + 'px';
	                this.eBody.style.paddingBottom = floatingBottomHeight + 'px';
	                this.eFloatingTop.style.top = totalHeaderHeight + 'px';
	                this.eFloatingTop.style.height = floatingTopHeight + 'px';
	                this.eFloatingBottom.style.height = floatingBottomHeight + 'px';
	                this.eFloatingBottom.style.top = floatingBottomTop + 'px';
	                this.ePinnedLeftColsViewport.style.height = heightOfCentreRows + 'px';
	                this.ePinnedRightColsViewport.style.height = heightOfCentreRows + 'px';
	            };
	            GridPanel.prototype.sizeHeaderAndBodyForPrint = function () {
	                var headerHeightPixels = this.gridOptionsWrapper.getHeaderHeight() + 'px';
	                this.eHeaderContainer.style['height'] = headerHeightPixels;
	            };
	            GridPanel.prototype.setHorizontalScrollPosition = function (hScrollPosition) {
	                this.eBodyViewport.scrollLeft = hScrollPosition;
	            };
	            GridPanel.prototype.addScrollListener = function () {
	                var _this = this;
	                // if printing, then no scrolling, so no point in listening for scroll events
	                if (this.forPrint) {
	                    return;
	                }
	                this.eBodyViewport.addEventListener('scroll', function () {
	                    // we are always interested in horizontal scrolls of the body
	                    var newLeftPosition = _this.eBodyViewport.scrollLeft;
	                    if (newLeftPosition !== _this.lastLeftPosition) {
	                        _this.lastLeftPosition = newLeftPosition;
	                        _this.horizontallyScrollHeaderCenterAndFloatingCenter(newLeftPosition);
	                        _this.masterSlaveService.fireHorizontalScrollEvent(newLeftPosition);
	                    }
	                    // if we are pinning to the right, then it's the right pinned container
	                    // that has the scroll.
	                    if (!_this.columnModel.isPinningRight()) {
	                        var newTopPosition = _this.eBodyViewport.scrollTop;
	                        if (newTopPosition !== _this.lastTopPosition) {
	                            _this.lastTopPosition = newTopPosition;
	                            _this.verticallyScrollLeftPinned(newTopPosition);
	                            _this.requestDrawVirtualRows();
	                        }
	                    }
	                });
	                this.ePinnedRightColsViewport.addEventListener('scroll', function () {
	                    var newTopPosition = _this.ePinnedRightColsViewport.scrollTop;
	                    if (newTopPosition !== _this.lastTopPosition) {
	                        _this.lastTopPosition = newTopPosition;
	                        _this.verticallyScrollLeftPinned(newTopPosition);
	                        _this.verticallyScrollBody(newTopPosition);
	                        _this.requestDrawVirtualRows();
	                    }
	                });
	                // this means the pinned panel was moved, which can only
	                // happen when the user is navigating in the pinned container
	                // as the pinned col should never scroll. so we rollback
	                // the scroll on the pinned.
	                this.ePinnedLeftColsViewport.addEventListener('scroll', function () {
	                    _this.ePinnedLeftColsViewport.scrollTop = 0;
	                });
	            };
	            GridPanel.prototype.requestDrawVirtualRows = function () {
	                var _this = this;
	                // if we are in IE or Safari, then we only redraw if there was no scroll event
	                // in the 50ms following this scroll event. without this, these browsers have
	                // a bad scrolling feel, where the redraws clog the scroll experience
	                // (makes the scroll clunky and sticky). this method is like throttling
	                // the scroll events.
	                var useScrollLag;
	                // let the user override scroll lag option
	                if (this.gridOptionsWrapper.isSuppressScrollLag()) {
	                    useScrollLag = false;
	                }
	                else if (this.gridOptionsWrapper.getIsScrollLag()) {
	                    useScrollLag = this.gridOptionsWrapper.getIsScrollLag()();
	                }
	                else {
	                    useScrollLag = _.isBrowserIE() || _.isBrowserSafari();
	                }
	                if (useScrollLag) {
	                    this.scrollLagCounter++;
	                    var scrollLagCounterCopy = this.scrollLagCounter;
	                    setTimeout(function () {
	                        if (_this.scrollLagCounter === scrollLagCounterCopy) {
	                            _this.rowRenderer.drawVirtualRows();
	                        }
	                    }, 50);
	                }
	                else {
	                    this.rowRenderer.drawVirtualRows();
	                }
	            };
	            GridPanel.prototype.horizontallyScrollHeaderCenterAndFloatingCenter = function (bodyLeftPosition) {
	                // this.eHeaderContainer.style.transform = 'translate3d(' + -bodyLeftPosition + 'px,0,0)';
	                this.eHeaderContainer.style.left = -bodyLeftPosition + 'px';
	                this.eFloatingBottomContainer.style.left = -bodyLeftPosition + 'px';
	                this.eFloatingTopContainer.style.left = -bodyLeftPosition + 'px';
	            };
	            GridPanel.prototype.verticallyScrollLeftPinned = function (bodyTopPosition) {
	                // this.ePinnedColsContainer.style.transform = 'translate3d(0,' + -bodyTopPosition + 'px,0)';
	                this.ePinnedLeftColsContainer.style.top = -bodyTopPosition + 'px';
	            };
	            GridPanel.prototype.verticallyScrollBody = function (position) {
	                this.eBodyViewport.scrollTop = position;
	            };
	            return GridPanel;
	        })();
	        grid.GridPanel = GridPanel;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var DragAndDropService = (function () {
	            function DragAndDropService() {
	            }
	            DragAndDropService.prototype.init = function (loggerFactory) {
	                this.logger = loggerFactory.create('DragAndDropService');
	                // need to clean this up, add to 'finished' logic in grid
	                var that = this;
	                this.mouseUpEventListener = function listener() {
	                    that.stopDragging();
	                };
	                document.addEventListener('mouseup', this.mouseUpEventListener);
	                this.logger.log('initialised');
	            };
	            DragAndDropService.prototype.destroy = function () {
	                document.removeEventListener('mouseup', this.mouseUpEventListener);
	                this.logger.log('destroyed');
	            };
	            DragAndDropService.prototype.stopDragging = function () {
	                if (this.dragItem) {
	                    this.setDragCssClasses(this.dragItem.eDragSource, false);
	                    this.dragItem = null;
	                }
	            };
	            DragAndDropService.prototype.setDragCssClasses = function (eListItem, dragging) {
	                _.addOrRemoveCssClass(eListItem, 'ag-dragging', dragging);
	                _.addOrRemoveCssClass(eListItem, 'ag-not-dragging', !dragging);
	            };
	            DragAndDropService.prototype.addDragSource = function (eDragSource, dragSourceCallback) {
	                this.setDragCssClasses(eDragSource, false);
	                eDragSource.addEventListener('mousedown', this.onMouseDownDragSource.bind(this, eDragSource, dragSourceCallback));
	            };
	            DragAndDropService.prototype.onMouseDownDragSource = function (eDragSource, dragSourceCallback) {
	                if (this.dragItem) {
	                    this.stopDragging();
	                }
	                var data;
	                if (dragSourceCallback.getData) {
	                    data = dragSourceCallback.getData();
	                }
	                var containerId;
	                if (dragSourceCallback.getContainerId) {
	                    containerId = dragSourceCallback.getContainerId();
	                }
	                this.dragItem = {
	                    eDragSource: eDragSource,
	                    data: data,
	                    containerId: containerId
	                };
	                this.setDragCssClasses(this.dragItem.eDragSource, true);
	            };
	            DragAndDropService.prototype.addDropTarget = function (eDropTarget, dropTargetCallback) {
	                var mouseIn = false;
	                var acceptDrag = false;
	                var that = this;
	                eDropTarget.addEventListener('mouseover', function () {
	                    if (!mouseIn) {
	                        mouseIn = true;
	                        if (that.dragItem) {
	                            acceptDrag = dropTargetCallback.acceptDrag(that.dragItem);
	                        }
	                        else {
	                            acceptDrag = false;
	                        }
	                    }
	                });
	                eDropTarget.addEventListener('mouseout', function () {
	                    if (acceptDrag) {
	                        dropTargetCallback.noDrop();
	                    }
	                    mouseIn = false;
	                    acceptDrag = false;
	                });
	                eDropTarget.addEventListener('mouseup', function () {
	                    // dragItem should never be null, checking just in case
	                    if (acceptDrag && that.dragItem) {
	                        dropTargetCallback.drop(that.dragItem);
	                    }
	                });
	            };
	            return DragAndDropService;
	        })();
	        grid.DragAndDropService = DragAndDropService;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/// <reference path="../dragAndDrop/dragAndDropService" />
	/// <amd-dependency path="text!agList.html"/>
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var utils = grid.Utils;
	        var template = '<div class="ag-list-selection">' +
	            '<div>' +
	            '<div ag-repeat class="ag-list-item">' +
	            '</div>' +
	            '</div>' +
	            '</div>';
	        var DropTargetLocation;
	        (function (DropTargetLocation) {
	            DropTargetLocation[DropTargetLocation["NOT_DROP_TARGET"] = 0] = "NOT_DROP_TARGET";
	            DropTargetLocation[DropTargetLocation["DROP_TARGET_ABOVE"] = 1] = "DROP_TARGET_ABOVE";
	            DropTargetLocation[DropTargetLocation["DROP_TARGET_BELOW"] = 2] = "DROP_TARGET_BELOW";
	        })(DropTargetLocation || (DropTargetLocation = {}));
	        ;
	        var AgList = (function () {
	            function AgList(dragAndDropService) {
	                this.readOnly = false;
	                this.dragAndDropService = dragAndDropService;
	                this.setupComponents();
	                this.uniqueId = 'CheckboxSelection-' + Math.random();
	                this.modelChangedListeners = [];
	                this.itemSelectedListeners = [];
	                this.itemMovedListeners = [];
	                this.beforeDropListeners = [];
	                this.dragSources = [];
	                this.setupAsDropTarget();
	            }
	            AgList.prototype.setReadOnly = function (readOnly) {
	                this.readOnly = readOnly;
	            };
	            AgList.prototype.setEmptyMessage = function (emptyMessage) {
	                this.emptyMessage = emptyMessage;
	                this.refreshView();
	            };
	            AgList.prototype.getUniqueId = function () {
	                return this.uniqueId;
	            };
	            AgList.prototype.addStyles = function (styles) {
	                utils.addStylesToElement(this.eGui, styles);
	            };
	            AgList.prototype.addCssClass = function (cssClass) {
	                utils.addCssClass(this.eGui, cssClass);
	            };
	            AgList.prototype.addDragSource = function (dragSource) {
	                this.dragSources.push(dragSource);
	            };
	            AgList.prototype.addModelChangedListener = function (listener) {
	                this.modelChangedListeners.push(listener);
	            };
	            AgList.prototype.addItemSelectedListener = function (listener) {
	                this.itemSelectedListeners.push(listener);
	            };
	            AgList.prototype.addItemMovedListener = function (listener) {
	                this.itemMovedListeners.push(listener);
	            };
	            AgList.prototype.addBeforeDropListener = function (listener) {
	                this.beforeDropListeners.push(listener);
	            };
	            AgList.prototype.fireItemMoved = function (fromIndex, toIndex) {
	                for (var i = 0; i < this.itemMovedListeners.length; i++) {
	                    this.itemMovedListeners[i](fromIndex, toIndex);
	                }
	            };
	            AgList.prototype.fireModelChanged = function () {
	                for (var i = 0; i < this.modelChangedListeners.length; i++) {
	                    this.modelChangedListeners[i](this.model);
	                }
	            };
	            AgList.prototype.fireItemSelected = function (item) {
	                for (var i = 0; i < this.itemSelectedListeners.length; i++) {
	                    this.itemSelectedListeners[i](item);
	                }
	            };
	            AgList.prototype.fireBeforeDrop = function (item) {
	                for (var i = 0; i < this.beforeDropListeners.length; i++) {
	                    this.beforeDropListeners[i](item);
	                }
	            };
	            AgList.prototype.setupComponents = function () {
	                this.eGui = utils.loadTemplate(template);
	                this.eFilterValueTemplate = this.eGui.querySelector("[ag-repeat]");
	                this.eListParent = this.eFilterValueTemplate.parentNode;
	                utils.removeAllChildren(this.eListParent);
	            };
	            AgList.prototype.setModel = function (model) {
	                this.model = model;
	                this.refreshView();
	            };
	            AgList.prototype.getModel = function () {
	                return this.model;
	            };
	            AgList.prototype.setCellRenderer = function (cellRenderer) {
	                this.cellRenderer = cellRenderer;
	            };
	            AgList.prototype.refreshView = function () {
	                utils.removeAllChildren(this.eListParent);
	                if (this.model && this.model.length > 0) {
	                    this.insertRows();
	                }
	                else {
	                    this.insertBlankMessage();
	                }
	            };
	            AgList.prototype.insertRows = function () {
	                for (var i = 0; i < this.model.length; i++) {
	                    var item = this.model[i];
	                    //var text = this.getText(item);
	                    //var selected = this.isSelected(item);
	                    var eListItem = this.eFilterValueTemplate.cloneNode(true);
	                    if (this.cellRenderer) {
	                        var params = { value: item };
	                        utils.useRenderer(eListItem, this.cellRenderer, params);
	                    }
	                    else {
	                        eListItem.innerHTML = item;
	                    }
	                    eListItem.addEventListener('click', this.fireItemSelected.bind(this, item));
	                    this.addDragAndDropToListItem(eListItem, item);
	                    this.eListParent.appendChild(eListItem);
	                }
	            };
	            AgList.prototype.insertBlankMessage = function () {
	                if (this.emptyMessage) {
	                    var eMessage = document.createElement('div');
	                    eMessage.style.color = 'grey';
	                    eMessage.style.padding = '4px';
	                    eMessage.style.textAlign = 'center';
	                    eMessage.innerHTML = this.emptyMessage;
	                    this.eListParent.appendChild(eMessage);
	                }
	            };
	            AgList.prototype.setupAsDropTarget = function () {
	                this.dragAndDropService.addDropTarget(this.eGui, {
	                    acceptDrag: this.externalAcceptDrag.bind(this),
	                    drop: this.externalDrop.bind(this),
	                    noDrop: this.externalNoDrop.bind(this)
	                });
	            };
	            AgList.prototype.externalAcceptDrag = function (dragEvent) {
	                var allowedSource = this.dragSources.indexOf(dragEvent.containerId) >= 0;
	                if (!allowedSource) {
	                    return false;
	                }
	                var alreadyHaveCol = this.model.indexOf(dragEvent.data) >= 0;
	                if (alreadyHaveCol) {
	                    return false;
	                }
	                this.eGui.style.backgroundColor = 'lightgreen';
	                return true;
	            };
	            AgList.prototype.externalDrop = function (dragEvent) {
	                var newListItem = dragEvent.data;
	                this.fireBeforeDrop(newListItem);
	                if (!this.readOnly) {
	                    this.addItemToList(newListItem);
	                }
	                this.eGui.style.backgroundColor = '';
	            };
	            AgList.prototype.externalNoDrop = function () {
	                this.eGui.style.backgroundColor = '';
	            };
	            AgList.prototype.addItemToList = function (newItem) {
	                this.model.push(newItem);
	                this.refreshView();
	                this.fireModelChanged();
	            };
	            AgList.prototype.addDragAndDropToListItem = function (eListItem, item) {
	                var that = this;
	                this.dragAndDropService.addDragSource(eListItem, {
	                    getData: function () {
	                        return item;
	                    },
	                    getContainerId: function () {
	                        return that.uniqueId;
	                    }
	                });
	                this.dragAndDropService.addDropTarget(eListItem, {
	                    acceptDrag: function (dragItem) {
	                        return that.internalAcceptDrag(item, dragItem, eListItem);
	                    },
	                    drop: function (dragItem) {
	                        that.internalDrop(item, dragItem.data);
	                    },
	                    noDrop: function () {
	                        that.internalNoDrop(eListItem);
	                    }
	                });
	            };
	            AgList.prototype.internalAcceptDrag = function (targetColumn, dragItem, eListItem) {
	                var result = dragItem.data !== targetColumn && dragItem.containerId === this.uniqueId;
	                if (result) {
	                    if (this.dragAfterThisItem(targetColumn, dragItem.data)) {
	                        this.setDropCssClasses(eListItem, DropTargetLocation.DROP_TARGET_ABOVE);
	                    }
	                    else {
	                        this.setDropCssClasses(eListItem, DropTargetLocation.DROP_TARGET_BELOW);
	                    }
	                }
	                return result;
	            };
	            AgList.prototype.internalDrop = function (targetColumn, draggedColumn) {
	                var oldIndex = this.model.indexOf(draggedColumn);
	                var newIndex = this.model.indexOf(targetColumn);
	                if (this.readOnly) {
	                    this.fireItemMoved(oldIndex, newIndex);
	                }
	                else {
	                    this.model.splice(oldIndex, 1);
	                    this.model.splice(newIndex, 0, draggedColumn);
	                    this.refreshView();
	                    this.fireModelChanged();
	                }
	            };
	            AgList.prototype.internalNoDrop = function (eListItem) {
	                this.setDropCssClasses(eListItem, DropTargetLocation.NOT_DROP_TARGET);
	            };
	            AgList.prototype.dragAfterThisItem = function (targetColumn, draggedColumn) {
	                return this.model.indexOf(targetColumn) < this.model.indexOf(draggedColumn);
	            };
	            AgList.prototype.setDropCssClasses = function (eListItem, state) {
	                utils.addOrRemoveCssClass(eListItem, 'ag-not-drop-target', state === DropTargetLocation.NOT_DROP_TARGET);
	                utils.addOrRemoveCssClass(eListItem, 'ag-drop-target-above', state === DropTargetLocation.DROP_TARGET_ABOVE);
	                utils.addOrRemoveCssClass(eListItem, 'ag-drop-target-below', state === DropTargetLocation.DROP_TARGET_BELOW);
	            };
	            AgList.prototype.getGui = function () {
	                return this.eGui;
	            };
	            return AgList;
	        })();
	        grid.AgList = AgList;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../widgets/agList.ts" />
	/// <reference path="../utils.ts" />
	/// <reference path="../svgFactory.ts" />
	/// <reference path="../constants.ts" />
	/// <reference path="../layout/BorderLayout.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var utils = grid.Utils;
	        var svgFactory = grid.SvgFactory.getInstance();
	        var ColumnSelectionPanel = (function () {
	            function ColumnSelectionPanel(columnController, gridOptionsWrapper, eventService, dragAndDropService) {
	                this.dragAndDropService = dragAndDropService;
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.columnController = columnController;
	                this.setupComponents();
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.columnsChanged.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_MOVED, this.columnsChanged.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_VISIBLE, this.columnsChanged.bind(this));
	            }
	            ColumnSelectionPanel.prototype.columnsChanged = function () {
	                this.cColumnList.setModel(this.columnController.getAllColumns());
	            };
	            ColumnSelectionPanel.prototype.getDragSource = function () {
	                return this.cColumnList.getUniqueId();
	            };
	            ColumnSelectionPanel.prototype.columnCellRenderer = function (params) {
	                var column = params.value;
	                var colDisplayName = this.columnController.getDisplayNameForCol(column);
	                var eResult = document.createElement('span');
	                var eVisibleIcons = document.createElement('span');
	                utils.addCssClass(eVisibleIcons, 'ag-visible-icons');
	                var eShowing = utils.createIcon('columnVisible', this.gridOptionsWrapper, column, svgFactory.createColumnShowingSvg);
	                var eHidden = utils.createIcon('columnHidden', this.gridOptionsWrapper, column, svgFactory.createColumnHiddenSvg);
	                eVisibleIcons.appendChild(eShowing);
	                eVisibleIcons.appendChild(eHidden);
	                eShowing.style.display = column.visible ? '' : 'none';
	                eHidden.style.display = column.visible ? 'none' : '';
	                eResult.appendChild(eVisibleIcons);
	                var eValue = document.createElement('span');
	                eValue.innerHTML = colDisplayName;
	                eResult.appendChild(eValue);
	                if (!column.visible) {
	                    utils.addCssClass(eResult, 'ag-column-not-visible');
	                }
	                // change visible if use clicks the visible icon, or if row is double clicked
	                eVisibleIcons.addEventListener('click', showEventListener);
	                var that = this;
	                function showEventListener() {
	                    that.columnController.setColumnVisible(column, !column.visible);
	                }
	                return eResult;
	            };
	            ColumnSelectionPanel.prototype.setupComponents = function () {
	                this.cColumnList = new grid.AgList(this.dragAndDropService);
	                this.cColumnList.setCellRenderer(this.columnCellRenderer.bind(this));
	                this.cColumnList.addStyles({ height: '100%', overflow: 'auto' });
	                this.cColumnList.addItemMovedListener(this.onItemMoved.bind(this));
	                this.cColumnList.setReadOnly(true);
	                var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	                var columnsLocalText = localeTextFunc('columns', 'Columns');
	                var eNorthPanel = document.createElement('div');
	                eNorthPanel.innerHTML = '<div style="text-align: center;">' + columnsLocalText + '</div>';
	                this.layout = new grid.BorderLayout({
	                    center: this.cColumnList.getGui(),
	                    north: eNorthPanel
	                });
	            };
	            ColumnSelectionPanel.prototype.onItemMoved = function (fromIndex, toIndex) {
	                this.columnController.moveColumn(fromIndex, toIndex);
	            };
	            ColumnSelectionPanel.prototype.getGui = function () {
	                return this.eRootPanel.getGui();
	            };
	            return ColumnSelectionPanel;
	        })();
	        grid.ColumnSelectionPanel = ColumnSelectionPanel;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../widgets/agList.ts" />
	/// <reference path="../utils.ts" />
	/// <reference path="../svgFactory.ts" />
	/// <reference path="../layout/BorderLayout.ts" />
	/// <reference path="../constants.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var _ = grid.Utils;
	        var svgFactory = grid.SvgFactory.getInstance();
	        var GroupSelectionPanel = (function () {
	            function GroupSelectionPanel(columnController, inMemoryRowController, gridOptionsWrapper, eventService, dragAndDropService) {
	                this.dragAndDropService = dragAndDropService;
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.setupComponents();
	                this.columnController = columnController;
	                this.inMemoryRowController = inMemoryRowController;
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.columnsChanged.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE, this.columnsChanged.bind(this));
	            }
	            GroupSelectionPanel.prototype.columnsChanged = function () {
	                this.cColumnList.setModel(this.columnController.getRowGroupColumns());
	            };
	            GroupSelectionPanel.prototype.addDragSource = function (dragSource) {
	                this.cColumnList.addDragSource(dragSource);
	            };
	            GroupSelectionPanel.prototype.columnCellRenderer = function (params) {
	                var column = params.value;
	                var colDisplayName = this.columnController.getDisplayNameForCol(column);
	                var eResult = document.createElement('span');
	                var eRemove = _.createIcon('columnRemoveFromGroup', this.gridOptionsWrapper, column, svgFactory.createArrowUpSvg);
	                _.addCssClass(eRemove, 'ag-visible-icons');
	                eResult.appendChild(eRemove);
	                var that = this;
	                eRemove.addEventListener('click', function () {
	                    that.columnController.removeRowGroupColumn(column);
	                });
	                var eValue = document.createElement('span');
	                eValue.innerHTML = colDisplayName;
	                eResult.appendChild(eValue);
	                return eResult;
	            };
	            GroupSelectionPanel.prototype.setupComponents = function () {
	                var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	                var columnsLocalText = localeTextFunc('rowGroupColumns', 'Row Groupings');
	                var rowGroupColumnsEmptyMessage = localeTextFunc('rowGroupColumnsEmptyMessage', 'Drag columns from above to group rows');
	                this.cColumnList = new grid.AgList(this.dragAndDropService);
	                this.cColumnList.setCellRenderer(this.columnCellRenderer.bind(this));
	                this.cColumnList.addBeforeDropListener(this.onBeforeDrop.bind(this));
	                this.cColumnList.addItemMovedListener(this.onItemMoved.bind(this));
	                this.cColumnList.setEmptyMessage(rowGroupColumnsEmptyMessage);
	                this.cColumnList.addStyles({ height: '100%', overflow: 'auto' });
	                this.cColumnList.setReadOnly(true);
	                var eNorthPanel = document.createElement('div');
	                eNorthPanel.style.paddingTop = '10px';
	                eNorthPanel.innerHTML = '<div style="text-align: center;">' + columnsLocalText + '</div>';
	                this.layout = new grid.BorderLayout({
	                    center: this.cColumnList.getGui(),
	                    north: eNorthPanel
	                });
	            };
	            GroupSelectionPanel.prototype.onBeforeDrop = function (newItem) {
	                this.columnController.addRowGroupColumn(newItem);
	            };
	            GroupSelectionPanel.prototype.onItemMoved = function (fromIndex, toIndex) {
	                this.columnController.moveRowGroupColumn(fromIndex, toIndex);
	            };
	            return GroupSelectionPanel;
	        })();
	        grid.GroupSelectionPanel = GroupSelectionPanel;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/// <reference path="./agList.ts" />
	/// <reference path="../svgFactory.ts" />
	/// <reference path="../widgets/agPopupService.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var utils = grid.Utils;
	        var svgFactory = grid.SvgFactory.getInstance();
	        var AgDropdownList = (function () {
	            function AgDropdownList(popupService, dragAndDropService) {
	                this.popupService = popupService;
	                this.setupComponents(dragAndDropService);
	                this.itemSelectedListeners = [];
	            }
	            AgDropdownList.prototype.setWidth = function (width) {
	                this.eValue.style.width = width + 'px';
	                this.agList.addStyles({ width: width + 'px' });
	            };
	            AgDropdownList.prototype.addItemSelectedListener = function (listener) {
	                this.itemSelectedListeners.push(listener);
	            };
	            AgDropdownList.prototype.fireItemSelected = function (item) {
	                for (var i = 0; i < this.itemSelectedListeners.length; i++) {
	                    this.itemSelectedListeners[i](item);
	                }
	            };
	            AgDropdownList.prototype.setupComponents = function (dragAndDropService) {
	                this.eGui = document.createElement('span');
	                this.eValue = document.createElement('span');
	                this.eGui.appendChild(this.eValue);
	                this.agList = new grid.AgList(dragAndDropService);
	                this.eValue.addEventListener('click', this.onClick.bind(this));
	                this.agList.addItemSelectedListener(this.itemSelected.bind(this));
	                this.agList.addCssClass('ag-popup-list');
	                utils.addStylesToElement(this.eValue, {
	                    border: '1px solid darkgrey',
	                    display: 'inline-block',
	                    paddingLeft: 2
	                });
	                utils.addStylesToElement(this.eGui, { position: 'relative' });
	                this.agList.addStyles({
	                    display: 'inline-block',
	                    position: 'absolute',
	                    top: 0,
	                    left: 0,
	                    backgroudColor: 'white'
	                });
	            };
	            AgDropdownList.prototype.itemSelected = function (item) {
	                this.setSelected(item);
	                if (this.hidePopupCallback) {
	                    this.hidePopupCallback();
	                }
	                this.fireItemSelected(item);
	            };
	            AgDropdownList.prototype.onClick = function () {
	                var agListGui = this.agList.getGui();
	                this.popupService.positionPopup(this.eGui, agListGui, false);
	                this.hidePopupCallback = this.popupService.addAsModalPopup(agListGui, true);
	            };
	            AgDropdownList.prototype.getGui = function () {
	                return this.eGui;
	            };
	            AgDropdownList.prototype.setSelected = function (item) {
	                this.selectedItem = item;
	                this.refreshView();
	            };
	            AgDropdownList.prototype.setCellRenderer = function (cellRenderer) {
	                this.agList.setCellRenderer(cellRenderer);
	                this.cellRenderer = cellRenderer;
	            };
	            AgDropdownList.prototype.refreshView = function () {
	                utils.removeAllChildren(this.eValue);
	                if (this.selectedItem) {
	                    if (this.cellRenderer) {
	                        var params = { value: this.selectedItem };
	                        utils.useRenderer(this.eValue, this.cellRenderer, params);
	                    }
	                    else {
	                        this.eValue.appendChild(document.createTextNode(this.selectedItem));
	                    }
	                }
	                var eDownIcon = svgFactory.createSmallArrowDownSvg();
	                eDownIcon.style.float = 'right';
	                eDownIcon.style.marginTop = '6';
	                eDownIcon.style.marginRight = '2';
	                this.eValue.appendChild(eDownIcon);
	            };
	            AgDropdownList.prototype.setModel = function (model) {
	                this.agList.setModel(model);
	            };
	            return AgDropdownList;
	        })();
	        grid.AgDropdownList = AgDropdownList;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../widgets/agList.ts" />
	/// <reference path="../constants.ts" />
	/// <reference path="../utils.ts" />
	/// <reference path="../layout/borderLayout.ts" />
	/// <reference path="../svgFactory.ts" />
	/// <reference path="../widgets/agDropdownList.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var svgFactory = grid.SvgFactory.getInstance();
	        var constants = grid.Constants;
	        var utils = grid.Utils;
	        var ValuesSelectionPanel = (function () {
	            function ValuesSelectionPanel(columnController, gridOptionsWrapper, popupService, eventService, dragAndDropService) {
	                this.dragAndDropService = dragAndDropService;
	                this.popupService = popupService;
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.setupComponents();
	                this.columnController = columnController;
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.columnsChanged.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_VALUE_CHANGE, this.columnsChanged.bind(this));
	            }
	            ValuesSelectionPanel.prototype.getLayout = function () {
	                return this.layout;
	            };
	            ValuesSelectionPanel.prototype.columnsChanged = function () {
	                this.cColumnList.setModel(this.columnController.getValueColumns());
	            };
	            ValuesSelectionPanel.prototype.addDragSource = function (dragSource) {
	                this.cColumnList.addDragSource(dragSource);
	            };
	            ValuesSelectionPanel.prototype.cellRenderer = function (params) {
	                var column = params.value;
	                var colDisplayName = this.columnController.getDisplayNameForCol(column);
	                var eResult = document.createElement('span');
	                var eRemove = utils.createIcon('columnRemoveFromGroup', this.gridOptionsWrapper, column, svgFactory.createArrowUpSvg);
	                utils.addCssClass(eRemove, 'ag-visible-icons');
	                eResult.appendChild(eRemove);
	                var that = this;
	                eRemove.addEventListener('click', function () {
	                    that.columnController.removeValueColumn(column);
	                });
	                var agValueType = new grid.AgDropdownList(this.popupService, this.dragAndDropService);
	                agValueType.setModel([grid.Column.AGG_SUM, grid.Column.AGG_MIN, grid.Column.AGG_MAX]);
	                agValueType.setSelected(column.aggFunc);
	                agValueType.setWidth(45);
	                agValueType.addItemSelectedListener(function (item) {
	                    that.columnController.setColumnAggFunction(column, item);
	                });
	                eResult.appendChild(agValueType.getGui());
	                var eValue = document.createElement('span');
	                eValue.innerHTML = colDisplayName;
	                eValue.style.paddingLeft = '2px';
	                eResult.appendChild(eValue);
	                return eResult;
	            };
	            ValuesSelectionPanel.prototype.setupComponents = function () {
	                var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
	                var columnsLocalText = localeTextFunc('valueColumns', 'Aggregations');
	                var emptyMessage = localeTextFunc('valueColumnsEmptyMessage', 'Drag columns from above to aggregate values');
	                this.cColumnList = new grid.AgList(this.dragAndDropService);
	                this.cColumnList.setCellRenderer(this.cellRenderer.bind(this));
	                this.cColumnList.setEmptyMessage(emptyMessage);
	                this.cColumnList.addStyles({ height: '100%', overflow: 'auto' });
	                this.cColumnList.addBeforeDropListener(this.beforeDropListener.bind(this));
	                this.cColumnList.setReadOnly(true);
	                var eNorthPanel = document.createElement('div');
	                eNorthPanel.style.paddingTop = '10px';
	                eNorthPanel.innerHTML = '<div style="text-align: center;">' + columnsLocalText + '</div>';
	                this.layout = new grid.BorderLayout({
	                    center: this.cColumnList.getGui(),
	                    north: eNorthPanel
	                });
	            };
	            ValuesSelectionPanel.prototype.beforeDropListener = function (newItem) {
	                this.columnController.addValueColumn(newItem);
	            };
	            return ValuesSelectionPanel;
	        })();
	        grid.ValuesSelectionPanel = ValuesSelectionPanel;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var VerticalStack = (function () {
	            function VerticalStack() {
	                this.isLayoutPanel = true;
	                this.childPanels = [];
	                this.eGui = document.createElement('div');
	                this.eGui.style.height = '100%';
	            }
	            VerticalStack.prototype.addPanel = function (panel, height) {
	                var component;
	                if (panel.isLayoutPanel) {
	                    this.childPanels.push(panel);
	                    component = panel.getGui();
	                }
	                else {
	                    component = panel;
	                }
	                if (height) {
	                    component.style.height = height;
	                }
	                this.eGui.appendChild(component);
	            };
	            VerticalStack.prototype.getGui = function () {
	                return this.eGui;
	            };
	            VerticalStack.prototype.doLayout = function () {
	                for (var i = 0; i < this.childPanels.length; i++) {
	                    this.childPanels[i].doLayout();
	                }
	            };
	            return VerticalStack;
	        })();
	        grid.VerticalStack = VerticalStack;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="../utils.ts" />
	/// <reference path="./columnSelectionPanel.ts" />
	/// <reference path="./groupSelectionPanel.ts" />
	/// <reference path="./valuesSelectionPanel.ts" />
	/// <reference path="../layout/verticalStack.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var utils = grid.Utils;
	        var ToolPanel = (function () {
	            function ToolPanel() {
	                this.layout = new grid.VerticalStack();
	            }
	            ToolPanel.prototype.init = function (columnController, inMemoryRowController, gridOptionsWrapper, popupService, eventService, dragAndDropService) {
	                var suppressGroupAndValues = gridOptionsWrapper.isToolPanelSuppressGroups();
	                var suppressValues = gridOptionsWrapper.isToolPanelSuppressValues();
	                var showGroups = !suppressGroupAndValues;
	                var showValues = !suppressGroupAndValues && !suppressValues;
	                // top list, column reorder and visibility
	                var columnSelectionPanel = new grid.ColumnSelectionPanel(columnController, gridOptionsWrapper, eventService, dragAndDropService);
	                var heightColumnSelection = suppressGroupAndValues ? '100%' : '50%';
	                this.layout.addPanel(columnSelectionPanel.layout, heightColumnSelection);
	                var dragSource = columnSelectionPanel.getDragSource();
	                if (showValues) {
	                    var valuesSelectionPanel = new grid.ValuesSelectionPanel(columnController, gridOptionsWrapper, popupService, eventService, dragAndDropService);
	                    this.layout.addPanel(valuesSelectionPanel.getLayout(), '25%');
	                    valuesSelectionPanel.addDragSource(dragSource);
	                }
	                if (showGroups) {
	                    var groupSelectionPanel = new grid.GroupSelectionPanel(columnController, inMemoryRowController, gridOptionsWrapper, eventService, dragAndDropService);
	                    var heightGroupSelection = showValues ? '25%' : '50%';
	                    this.layout.addPanel(groupSelectionPanel.layout, heightGroupSelection);
	                    groupSelectionPanel.addDragSource(dragSource);
	                }
	                var eGui = this.layout.getGui();
	                utils.addCssClass(eGui, 'ag-tool-panel-container');
	            };
	            return ToolPanel;
	        })();
	        grid.ToolPanel = ToolPanel;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="colDef.ts" />
	/// <reference path="grid.ts" />
	/// <reference path="rendering/rowRenderer.ts" />
	/// <reference path="headerRendering/headerRenderer.ts" />
	/// <reference path="csvCreator.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid_3) {
	        var GridApi = (function () {
	            function GridApi(grid, rowRenderer, headerRenderer, filterManager, columnController, inMemoryRowController, selectionController, gridOptionsWrapper, gridPanel, valueService, masterSlaveService, eventService, floatingRowModel) {
	                this.grid = grid;
	                this.rowRenderer = rowRenderer;
	                this.headerRenderer = headerRenderer;
	                this.filterManager = filterManager;
	                this.columnController = columnController;
	                this.inMemoryRowController = inMemoryRowController;
	                this.selectionController = selectionController;
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.gridPanel = gridPanel;
	                this.valueService = valueService;
	                this.masterSlaveService = masterSlaveService;
	                this.eventService = eventService;
	                this.floatingRowModel = floatingRowModel;
	                this.csvCreator = new grid_3.CsvCreator(this.inMemoryRowController, this.columnController, this.grid, this.valueService);
	            }
	            /** Used internally by grid. Not intended to be used by the client. Interface may change between releases. */
	            GridApi.prototype.__getMasterSlaveService = function () {
	                return this.masterSlaveService;
	            };
	            GridApi.prototype.getDataAsCsv = function (params) {
	                return this.csvCreator.getDataAsCsv(params);
	            };
	            GridApi.prototype.exportDataAsCsv = function (params) {
	                this.csvCreator.exportDataAsCsv(params);
	            };
	            GridApi.prototype.setDatasource = function (datasource) {
	                this.grid.setDatasource(datasource);
	            };
	            GridApi.prototype.onNewDatasource = function () {
	                console.log('ag-Grid: onNewDatasource deprecated, please use setDatasource()');
	                this.grid.setDatasource();
	            };
	            GridApi.prototype.setRowData = function (rowData) {
	                this.grid.setRowData(rowData);
	            };
	            GridApi.prototype.setRows = function (rows) {
	                console.log('ag-Grid: setRows deprecated, please use setRowData()');
	                this.grid.setRowData(rows);
	            };
	            GridApi.prototype.onNewRows = function () {
	                console.log('ag-Grid: onNewRows deprecated, please use setRowData()');
	                this.grid.setRowData();
	            };
	            GridApi.prototype.setFloatingTopRowData = function (rows) {
	                this.floatingRowModel.setFloatingTopRowData(rows);
	                this.gridPanel.onBodyHeightChange();
	                this.refreshView();
	            };
	            GridApi.prototype.setFloatingBottomRowData = function (rows) {
	                this.floatingRowModel.setFloatingBottomRowData(rows);
	                this.gridPanel.onBodyHeightChange();
	                this.refreshView();
	            };
	            GridApi.prototype.onNewCols = function () {
	                console.error("ag-Grid: deprecated, please call setColumnDefs instead providing a list of the defs");
	                this.grid.setColumnDefs();
	            };
	            GridApi.prototype.setColumnDefs = function (colDefs) {
	                this.grid.setColumnDefs(colDefs);
	            };
	            GridApi.prototype.unselectAll = function () {
	                console.error("unselectAll deprecated, call deselectAll instead");
	                this.deselectAll();
	            };
	            GridApi.prototype.refreshRows = function (rowNodes) {
	                this.rowRenderer.refreshRows(rowNodes);
	            };
	            GridApi.prototype.refreshCells = function (rowNodes, colIds) {
	                this.rowRenderer.refreshCells(rowNodes, colIds);
	            };
	            GridApi.prototype.rowDataChanged = function (rows) {
	                this.rowRenderer.rowDataChanged(rows);
	            };
	            GridApi.prototype.refreshView = function () {
	                this.rowRenderer.refreshView();
	            };
	            GridApi.prototype.softRefreshView = function () {
	                this.rowRenderer.softRefreshView();
	            };
	            GridApi.prototype.refreshGroupRows = function () {
	                this.rowRenderer.refreshGroupRows();
	            };
	            GridApi.prototype.refreshHeader = function () {
	                // need to review this - the refreshHeader should also refresh all icons in the header
	                this.headerRenderer.refreshHeader();
	                this.headerRenderer.updateFilterIcons();
	            };
	            GridApi.prototype.isAnyFilterPresent = function () {
	                return this.filterManager.isAnyFilterPresent();
	            };
	            GridApi.prototype.isAdvancedFilterPresent = function () {
	                return this.filterManager.isAdvancedFilterPresent();
	            };
	            GridApi.prototype.isQuickFilterPresent = function () {
	                return this.filterManager.isQuickFilterPresent();
	            };
	            GridApi.prototype.getModel = function () {
	                return this.grid.getRowModel();
	            };
	            GridApi.prototype.onGroupExpandedOrCollapsed = function (refreshFromIndex) {
	                this.grid.updateModelAndRefresh(grid_3.Constants.STEP_MAP, refreshFromIndex);
	            };
	            GridApi.prototype.expandAll = function () {
	                this.inMemoryRowController.expandOrCollapseAll(true, null);
	                this.grid.updateModelAndRefresh(grid_3.Constants.STEP_MAP);
	            };
	            GridApi.prototype.collapseAll = function () {
	                this.inMemoryRowController.expandOrCollapseAll(false, null);
	                this.grid.updateModelAndRefresh(grid_3.Constants.STEP_MAP);
	            };
	            GridApi.prototype.addVirtualRowListener = function (rowIndex, callback) {
	                this.grid.addVirtualRowListener(rowIndex, callback);
	            };
	            GridApi.prototype.setQuickFilter = function (newFilter) {
	                this.grid.onQuickFilterChanged(newFilter);
	            };
	            GridApi.prototype.selectIndex = function (index, tryMulti, suppressEvents) {
	                this.selectionController.selectIndex(index, tryMulti, suppressEvents);
	            };
	            GridApi.prototype.deselectIndex = function (index, suppressEvents) {
	                if (suppressEvents === void 0) { suppressEvents = false; }
	                this.selectionController.deselectIndex(index, suppressEvents);
	            };
	            GridApi.prototype.selectNode = function (node, tryMulti, suppressEvents) {
	                if (tryMulti === void 0) { tryMulti = false; }
	                if (suppressEvents === void 0) { suppressEvents = false; }
	                this.selectionController.selectNode(node, tryMulti, suppressEvents);
	            };
	            GridApi.prototype.deselectNode = function (node, suppressEvents) {
	                if (suppressEvents === void 0) { suppressEvents = false; }
	                this.selectionController.deselectNode(node, suppressEvents);
	            };
	            GridApi.prototype.selectAll = function () {
	                this.selectionController.selectAll();
	                this.rowRenderer.refreshView();
	            };
	            GridApi.prototype.deselectAll = function () {
	                this.selectionController.deselectAll();
	                this.rowRenderer.refreshView();
	            };
	            GridApi.prototype.recomputeAggregates = function () {
	                this.inMemoryRowController.doAggregate();
	                this.rowRenderer.refreshGroupRows();
	            };
	            GridApi.prototype.sizeColumnsToFit = function () {
	                if (this.gridOptionsWrapper.isForPrint()) {
	                    console.warn('ag-grid: sizeColumnsToFit does not work when forPrint=true');
	                    return;
	                }
	                var availableWidth = this.gridPanel.sizeColumnsToFit();
	            };
	            GridApi.prototype.showLoadingOverlay = function () {
	                this.grid.showLoadingOverlay();
	            };
	            GridApi.prototype.showNoRowsOverlay = function () {
	                this.grid.showNoRowsOverlay();
	            };
	            GridApi.prototype.hideOverlay = function () {
	                this.grid.hideOverlay();
	            };
	            GridApi.prototype.showLoading = function (show) {
	                console.warn('ag-Grid: showLoading is deprecated, please use api.showLoadingOverlay() and api.hideOverlay() instead');
	                if (show) {
	                    this.grid.showLoadingOverlay();
	                }
	                else {
	                    this.grid.hideOverlay();
	                }
	            };
	            GridApi.prototype.isNodeSelected = function (node) {
	                return this.selectionController.isNodeSelected(node);
	            };
	            GridApi.prototype.getSelectedNodesById = function () {
	                return this.selectionController.getSelectedNodesById();
	            };
	            GridApi.prototype.getSelectedNodes = function () {
	                return this.selectionController.getSelectedNodes();
	            };
	            GridApi.prototype.getSelectedRows = function () {
	                return this.selectionController.getSelectedRows();
	            };
	            GridApi.prototype.getBestCostNodeSelection = function () {
	                return this.selectionController.getBestCostNodeSelection();
	            };
	            GridApi.prototype.getRenderedNodes = function () {
	                return this.rowRenderer.getRenderedNodes();
	            };
	            GridApi.prototype.ensureColIndexVisible = function (index) {
	                this.gridPanel.ensureColIndexVisible(index);
	            };
	            GridApi.prototype.ensureIndexVisible = function (index) {
	                this.gridPanel.ensureIndexVisible(index);
	            };
	            GridApi.prototype.ensureNodeVisible = function (comparator) {
	                this.grid.ensureNodeVisible(comparator);
	            };
	            GridApi.prototype.forEachInMemory = function (callback) {
	                console.warn('ag-Grid: please use forEachNode instead of forEachInMemory, method is same, I just renamed it, forEachInMemory is deprecated');
	                this.forEachNode(callback);
	            };
	            GridApi.prototype.forEachNode = function (callback) {
	                this.grid.getRowModel().forEachNode(callback);
	            };
	            GridApi.prototype.forEachNodeAfterFilter = function (callback) {
	                this.grid.getRowModel().forEachNodeAfterFilter(callback);
	            };
	            GridApi.prototype.forEachNodeAfterFilterAndSort = function (callback) {
	                this.grid.getRowModel().forEachNodeAfterFilterAndSort(callback);
	            };
	            GridApi.prototype.getFilterApiForColDef = function (colDef) {
	                console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead');
	                return this.getFilterApi(colDef);
	            };
	            GridApi.prototype.getFilterApi = function (key) {
	                var column = this.columnController.getColumn(key);
	                return this.filterManager.getFilterApi(column);
	            };
	            GridApi.prototype.getColumnDef = function (key) {
	                var column = this.columnController.getColumn(key);
	                if (column) {
	                    return column.getColDef();
	                }
	                else {
	                    return null;
	                }
	            };
	            GridApi.prototype.onFilterChanged = function () {
	                this.grid.onFilterChanged();
	            };
	            GridApi.prototype.setSortModel = function (sortModel) {
	                this.grid.setSortModel(sortModel);
	            };
	            GridApi.prototype.getSortModel = function () {
	                return this.grid.getSortModel();
	            };
	            GridApi.prototype.setFilterModel = function (model) {
	                this.filterManager.setFilterModel(model);
	            };
	            GridApi.prototype.getFilterModel = function () {
	                return this.grid.getFilterModel();
	            };
	            GridApi.prototype.getFocusedCell = function () {
	                return this.rowRenderer.getFocusedCell();
	            };
	            GridApi.prototype.setFocusedCell = function (rowIndex, colIndex) {
	                this.grid.setFocusedCell(rowIndex, colIndex);
	            };
	            GridApi.prototype.setHeaderHeight = function (headerHeight) {
	                this.gridOptionsWrapper.setHeaderHeight(headerHeight);
	                this.gridPanel.onBodyHeightChange();
	            };
	            GridApi.prototype.showToolPanel = function (show) {
	                this.grid.showToolPanel(show);
	            };
	            GridApi.prototype.isToolPanelShowing = function () {
	                return this.grid.isToolPanelShowing();
	            };
	            GridApi.prototype.doLayout = function () {
	                this.grid.doLayout();
	            };
	            GridApi.prototype.getValue = function (colDef, data, node) {
	                return this.valueService.getValue(colDef, data, node);
	            };
	            GridApi.prototype.addEventListener = function (eventType, listener) {
	                this.eventService.addEventListener(eventType, listener);
	            };
	            GridApi.prototype.addGlobalListener = function (listener) {
	                this.eventService.addGlobalListener(listener);
	            };
	            GridApi.prototype.removeEventListener = function (eventType, listener) {
	                this.eventService.removeEventListener(eventType, listener);
	            };
	            GridApi.prototype.removeGlobalListener = function (listener) {
	                this.eventService.removeGlobalListener(listener);
	            };
	            GridApi.prototype.dispatchEvent = function (eventType, event) {
	                this.eventService.dispatchEvent(eventType, event);
	            };
	            GridApi.prototype.refreshRowGroup = function () {
	                this.grid.refreshRowGroup();
	            };
	            GridApi.prototype.destroy = function () {
	                this.grid.destroy();
	            };
	            return GridApi;
	        })();
	        grid_3.GridApi = GridApi;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="gridOptionsWrapper.ts" />
	/// <reference path="expressionService.ts" />
	/// <reference path="columnController/columnController.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var ValueService = (function () {
	            function ValueService() {
	            }
	            ValueService.prototype.init = function (gridOptionsWrapper, expressionService, columnController) {
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.expressionService = expressionService;
	                this.columnController = columnController;
	            };
	            ValueService.prototype.getValue = function (colDef, data, node) {
	                var cellExpressions = this.gridOptionsWrapper.isEnableCellExpressions();
	                var field = colDef.field;
	                var result;
	                // if there is a value getter, this gets precedence over a field
	                if (colDef.valueGetter) {
	                    result = this.executeValueGetter(colDef.valueGetter, data, colDef, node);
	                }
	                else if (field && data) {
	                    result = this.getValueUsingField(data, field);
	                }
	                else {
	                    result = undefined;
	                }
	                // the result could be an expression itself, if we are allowing cell values to be expressions
	                if (cellExpressions && (typeof result === 'string') && result.indexOf('=') === 0) {
	                    var cellValueGetter = result.substring(1);
	                    result = this.executeValueGetter(cellValueGetter, data, colDef, node);
	                }
	                return result;
	            };
	            ValueService.prototype.getValueUsingField = function (data, field) {
	                if (!field || !data) {
	                    return;
	                }
	                // if no '.', then it's not a deep value
	                if (field.indexOf('.') < 0) {
	                    return data[field];
	                }
	                else {
	                    // otherwise it is a deep value, so need to dig for it
	                    var fields = field.split('.');
	                    var currentObject = data;
	                    for (var i = 0; i < fields.length; i++) {
	                        currentObject = currentObject[fields[i]];
	                        if (!currentObject) {
	                            return null;
	                        }
	                    }
	                    return currentObject;
	                }
	            };
	            ValueService.prototype.executeValueGetter = function (valueGetter, data, colDef, node) {
	                var context = this.gridOptionsWrapper.getContext();
	                var api = this.gridOptionsWrapper.getApi();
	                var params = {
	                    data: data,
	                    node: node,
	                    colDef: colDef,
	                    api: api,
	                    context: context,
	                    getValue: this.getValueCallback.bind(this, data, node)
	                };
	                if (typeof valueGetter === 'function') {
	                    // valueGetter is a function, so just call it
	                    return valueGetter(params);
	                }
	                else if (typeof valueGetter === 'string') {
	                    // valueGetter is an expression, so execute the expression
	                    return this.expressionService.evaluate(valueGetter, params);
	                }
	            };
	            ValueService.prototype.getValueCallback = function (data, node, field) {
	                var otherColumn = this.columnController.getColumn(field);
	                if (otherColumn) {
	                    return this.getValue(otherColumn.getColDef(), data, node);
	                }
	                else {
	                    return null;
	                }
	            };
	            return ValueService;
	        })();
	        grid.ValueService = ValueService;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path='../entities/colDef.ts'/>
	/// <reference path='../entities/column.ts'/>
	/// <reference path='../entities/originalColumnGroup.ts'/>
	/// <reference path='../logger.ts'/>
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var constants = grid.Constants;
	        // takes in a list of columns, as specified by the column definitions, and returns column groups
	        var ColumnUtils = (function () {
	            function ColumnUtils() {
	            }
	            ColumnUtils.prototype.init = function (gridOptionsWrapper) {
	                this.gridOptionsWrapper = gridOptionsWrapper;
	            };
	            ColumnUtils.prototype.calculateColInitialWidth = function (colDef) {
	                if (!colDef.width) {
	                    // if no width defined in colDef, use default
	                    return this.gridOptionsWrapper.getColWidth();
	                }
	                else if (colDef.width < constants.MIN_COL_WIDTH) {
	                    // if width in col def to small, set to min width
	                    return constants.MIN_COL_WIDTH;
	                }
	                else {
	                    // otherwise use the provided width
	                    return colDef.width;
	                }
	            };
	            ColumnUtils.prototype.deptFirstAllColumnTreeSearch = function (tree, callback) {
	                var _this = this;
	                if (!tree) {
	                    return;
	                }
	                tree.forEach(function (child) {
	                    if (child instanceof grid.ColumnGroup) {
	                        _this.deptFirstAllColumnTreeSearch(child.getChildren(), callback);
	                    }
	                    callback(child);
	                });
	            };
	            ColumnUtils.prototype.deptFirstDisplayedColumnTreeSearch = function (tree, callback) {
	                var _this = this;
	                if (!tree) {
	                    return;
	                }
	                tree.forEach(function (child) {
	                    if (child instanceof grid.ColumnGroup) {
	                        _this.deptFirstDisplayedColumnTreeSearch(child.getDisplayedChildren(), callback);
	                    }
	                    callback(child);
	                });
	            };
	            return ColumnUtils;
	        })();
	        grid.ColumnUtils = ColumnUtils;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="constants.ts" />
	/// <reference path="rowControllers/floatingRowModel.ts" />
	/// <reference path="gridOptionsWrapper.ts" />
	/// <reference path="utils.ts" />
	/// <reference path="filter/filterManager.ts" />
	/// <reference path="columnController/columnController.ts" />
	/// <reference path="columnController/balancedColumnTreeBuilder.ts" />
	/// <reference path="headerRendering/headerTemplateLoader.ts" />
	/// <reference path="selectionController.ts" />
	/// <reference path="selectionRendererFactory.ts" />
	/// <reference path="rendering/rowRenderer.ts" />
	/// <reference path="headerRendering/headerRenderer.ts" />
	/// <reference path="rowControllers/inMemoryRowController.ts" />
	/// <reference path="rowControllers/virtualPageRowController.ts" />
	/// <reference path="rowControllers/paginationController.ts" />
	/// <reference path="expressionService.ts" />
	/// <reference path="templateService.ts" />
	/// <reference path="gridPanel/gridPanel.ts" />
	/// <reference path="toolPanel/toolPanel.ts" />
	/// <reference path="widgets/agPopupService.ts" />
	/// <reference path="entities/gridOptions.ts" />
	/// <reference path="gridApi.ts" />
	/// <reference path="valueService.ts" />
	/// <reference path="masterSlaveService.ts" />
	/// <reference path="logger.ts" />
	/// <reference path="eventService.ts" />
	/// <reference path="columnController/columnUtils.ts" />
	/// <reference path="dragAndDrop/dragAndDropService.ts" />
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var Grid = (function () {
	            function Grid(eGridDiv, gridOptions, globalEventListener, $scope, $compile, quickFilterOnScope) {
	                if (globalEventListener === void 0) { globalEventListener = null; }
	                if ($scope === void 0) { $scope = null; }
	                if ($compile === void 0) { $compile = null; }
	                if (quickFilterOnScope === void 0) { quickFilterOnScope = null; }
	                this.virtualRowCallbacks = {};
	                if (!eGridDiv) {
	                    console.warn('ag-Grid: no div element provided to the grid');
	                }
	                if (!gridOptions) {
	                    console.warn('ag-Grid: no gridOptions provided to the grid');
	                }
	                this.gridOptions = gridOptions;
	                this.setupComponents($scope, $compile, eGridDiv, globalEventListener);
	                this.gridOptions.api = new grid.GridApi(this, this.rowRenderer, this.headerRenderer, this.filterManager, this.columnController, this.inMemoryRowController, this.selectionController, this.gridOptionsWrapper, this.gridPanel, this.valueService, this.masterSlaveService, this.eventService, this.floatingRowModel);
	                this.gridOptions.columnApi = this.columnController.getColumnApi();
	                var that = this;
	                // if using angular, watch for quickFilter changes
	                if ($scope) {
	                    $scope.$watch(quickFilterOnScope, function (newFilter) {
	                        that.onQuickFilterChanged(newFilter);
	                    });
	                }
	                if (!this.gridOptionsWrapper.isForPrint()) {
	                    this.addWindowResizeListener();
	                }
	                this.inMemoryRowController.setAllRows(this.gridOptionsWrapper.getRowData());
	                this.setupColumns();
	                this.updateModelAndRefresh(grid.Constants.STEP_EVERYTHING);
	                this.decideStartingOverlay();
	                // if datasource provided, use it
	                if (this.gridOptionsWrapper.getDatasource()) {
	                    this.setDatasource();
	                }
	                this.doLayout();
	                this.finished = false;
	                this.periodicallyDoLayout();
	                // if ready function provided, use it
	                var readyParams = { api: gridOptions.api };
	                this.eventService.dispatchEvent(grid.Events.EVENT_READY, readyParams);
	                this.logger.log('initialised');
	            }
	            Grid.prototype.decideStartingOverlay = function () {
	                // if not virtual paging, then we might need to show an overlay if no data
	                var notDoingVirtualPaging = !this.gridOptionsWrapper.isVirtualPaging();
	                if (notDoingVirtualPaging) {
	                    var showLoading = !this.gridOptionsWrapper.getRowData();
	                    var showNoData = this.gridOptionsWrapper.getRowData() && this.gridOptionsWrapper.getRowData().length == 0;
	                    if (showLoading) {
	                        this.showLoadingOverlay();
	                    }
	                    if (showNoData) {
	                        this.showNoRowsOverlay();
	                    }
	                }
	            };
	            Grid.prototype.addWindowResizeListener = function () {
	                var that = this;
	                // putting this into a function, so when we remove the function,
	                // we are sure we are removing the exact same function (i'm not
	                // sure what 'bind' does to the function reference, if it's safe
	                // the result from 'bind').
	                this.windowResizeListener = function resizeListener() {
	                    that.doLayout();
	                };
	                window.addEventListener('resize', this.windowResizeListener);
	            };
	            Grid.prototype.getRowModel = function () {
	                return this.rowModel;
	            };
	            Grid.prototype.periodicallyDoLayout = function () {
	                if (!this.finished) {
	                    var that = this;
	                    setTimeout(function () {
	                        that.doLayout();
	                        that.gridPanel.periodicallyCheck();
	                        that.periodicallyDoLayout();
	                    }, 500);
	                }
	            };
	            Grid.prototype.setupComponents = function ($scope, $compile, eUserProvidedDiv, globalEventListener) {
	                this.eUserProvidedDiv = eUserProvidedDiv;
	                // create all the beans
	                var headerTemplateLoader = new grid.HeaderTemplateLoader();
	                var floatingRowModel = new grid.FloatingRowModel();
	                var balancedColumnTreeBuilder = new grid.BalancedColumnTreeBuilder();
	                var displayedGroupCreator = new grid.DisplayedGroupCreator();
	                var eventService = new grid.EventService();
	                var gridOptionsWrapper = new grid.GridOptionsWrapper();
	                var selectionController = new grid.SelectionController();
	                var filterManager = new grid.FilterManager();
	                var selectionRendererFactory = new grid.SelectionRendererFactory();
	                var columnController = new grid.ColumnController();
	                var rowRenderer = new grid.RowRenderer();
	                var headerRenderer = new grid.HeaderRenderer();
	                var inMemoryRowController = new grid.InMemoryRowController();
	                var virtualPageRowController = new grid.VirtualPageRowController();
	                var expressionService = new grid.ExpressionService();
	                var templateService = new grid.TemplateService();
	                var gridPanel = new grid.GridPanel();
	                var popupService = new grid.PopupService();
	                var valueService = new grid.ValueService();
	                var groupCreator = new grid.GroupCreator();
	                var masterSlaveService = new grid.MasterSlaveService();
	                var loggerFactory = new grid.LoggerFactory();
	                var dragAndDropService = new grid.DragAndDropService();
	                var columnUtils = new grid.ColumnUtils();
	                var autoWidthCalculator = new grid.AutoWidthCalculator();
	                // initialise all the beans
	                gridOptionsWrapper.init(this.gridOptions, eventService);
	                loggerFactory.init(gridOptionsWrapper);
	                this.logger = loggerFactory.create('Grid');
	                this.logger.log('initialising');
	                headerTemplateLoader.init(gridOptionsWrapper);
	                floatingRowModel.init(gridOptionsWrapper);
	                columnUtils.init(gridOptionsWrapper);
	                autoWidthCalculator.init(rowRenderer, gridPanel);
	                dragAndDropService.init(loggerFactory);
	                eventService.init(loggerFactory);
	                gridPanel.init(gridOptionsWrapper, columnController, rowRenderer, masterSlaveService, loggerFactory, floatingRowModel);
	                templateService.init($scope);
	                expressionService.init(loggerFactory);
	                selectionController.init(this, gridPanel, gridOptionsWrapper, $scope, rowRenderer, eventService);
	                filterManager.init(this, gridOptionsWrapper, $compile, $scope, columnController, popupService, valueService);
	                selectionRendererFactory.init(this, selectionController);
	                balancedColumnTreeBuilder.init(gridOptionsWrapper, loggerFactory, columnUtils);
	                displayedGroupCreator.init(columnUtils);
	                columnController.init(this, selectionRendererFactory, gridOptionsWrapper, expressionService, valueService, masterSlaveService, eventService, balancedColumnTreeBuilder, displayedGroupCreator, columnUtils, autoWidthCalculator, loggerFactory);
	                rowRenderer.init(columnController, gridOptionsWrapper, gridPanel, this, selectionRendererFactory, $compile, $scope, selectionController, expressionService, templateService, valueService, eventService, floatingRowModel);
	                headerRenderer.init(gridOptionsWrapper, columnController, gridPanel, this, filterManager, $scope, $compile, headerTemplateLoader);
	                inMemoryRowController.init(gridOptionsWrapper, columnController, this, filterManager, $scope, groupCreator, valueService, eventService);
	                virtualPageRowController.init(rowRenderer, gridOptionsWrapper, this);
	                valueService.init(gridOptionsWrapper, expressionService, columnController);
	                groupCreator.init(valueService, gridOptionsWrapper);
	                masterSlaveService.init(gridOptionsWrapper, columnController, gridPanel, loggerFactory, eventService);
	                if (globalEventListener) {
	                    eventService.addGlobalListener(globalEventListener);
	                }
	                var toolPanelLayout = null;
	                var toolPanel = null;
	                if (!gridOptionsWrapper.isForPrint()) {
	                    toolPanel = new grid.ToolPanel();
	                    toolPanelLayout = toolPanel.layout;
	                    toolPanel.init(columnController, inMemoryRowController, gridOptionsWrapper, popupService, eventService, dragAndDropService);
	                }
	                // this is a child bean, get a reference and pass it on
	                // CAN WE DELETE THIS? it's done in the setDatasource section
	                var rowModel = inMemoryRowController.getModel();
	                selectionController.setRowModel(rowModel);
	                filterManager.setRowModel(rowModel);
	                rowRenderer.setRowModel(rowModel);
	                gridPanel.setRowModel(rowModel);
	                // and the last bean, done in it's own section, as it's optional
	                var paginationController = null;
	                var paginationGui = null;
	                if (!gridOptionsWrapper.isForPrint()) {
	                    paginationController = new grid.PaginationController();
	                    paginationController.init(this, gridOptionsWrapper);
	                    paginationGui = paginationController.getGui();
	                }
	                this.rowModel = rowModel;
	                this.usingInMemoryModel = true;
	                this.selectionController = selectionController;
	                this.columnController = columnController;
	                this.inMemoryRowController = inMemoryRowController;
	                this.virtualPageRowController = virtualPageRowController;
	                this.rowRenderer = rowRenderer;
	                this.headerRenderer = headerRenderer;
	                this.paginationController = paginationController;
	                this.filterManager = filterManager;
	                this.toolPanel = toolPanel;
	                this.gridPanel = gridPanel;
	                this.valueService = valueService;
	                this.masterSlaveService = masterSlaveService;
	                this.eventService = eventService;
	                this.gridOptionsWrapper = gridOptionsWrapper;
	                this.dragAndDropService = dragAndDropService;
	                this.floatingRowModel = floatingRowModel;
	                this.eRootPanel = new grid.BorderLayout({
	                    center: gridPanel.getLayout(),
	                    east: toolPanelLayout,
	                    south: paginationGui,
	                    dontFill: gridOptionsWrapper.isForPrint(),
	                    name: 'eRootPanel'
	                });
	                popupService.init(this.eRootPanel.getGui());
	                // default is we don't show paging panel, this is set to true when datasource is set
	                this.eRootPanel.setSouthVisible(false);
	                // see what the grid options are for default of toolbar
	                this.showToolPanel(gridOptionsWrapper.isShowToolPanel());
	                eUserProvidedDiv.appendChild(this.eRootPanel.getGui());
	                this.logger.log('grid DOM added');
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnChanged.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_GROUP_OPENED, this.onColumnChanged.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_MOVED, this.onColumnChanged.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE, this.onColumnChanged.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_RESIZED, this.onColumnChanged.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_VALUE_CHANGE, this.onColumnChanged.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_VISIBLE, this.onColumnChanged.bind(this));
	                eventService.addEventListener(grid.Events.EVENT_COLUMN_PINNED, this.onColumnChanged.bind(this));
	            };
	            Grid.prototype.onColumnChanged = function (event) {
	                if (event.isRowGroupChanged()) {
	                    this.inMemoryRowController.onRowGroupChanged();
	                }
	                if (event.isValueChanged()) {
	                    this.inMemoryRowController.doAggregate();
	                }
	                if (event.isIndividualColumnResized()) {
	                    this.onIndividualColumnResized(event.getColumn());
	                }
	                else {
	                    this.refreshHeaderAndBody();
	                }
	                this.gridPanel.showPinnedColContainersIfNeeded();
	            };
	            Grid.prototype.refreshRowGroup = function () {
	                this.inMemoryRowController.onRowGroupChanged();
	                this.refreshHeaderAndBody();
	            };
	            Grid.prototype.onIndividualColumnResized = function (column) {
	                this.headerRenderer.onIndividualColumnResized(column);
	                this.rowRenderer.onIndividualColumnResized(column);
	                if (column.isPinned()) {
	                    this.updatePinnedColContainerWidthAfterColResize();
	                }
	                else {
	                    this.updateBodyContainerWidthAfterColResize();
	                }
	            };
	            Grid.prototype.showToolPanel = function (show) {
	                if (!this.toolPanel) {
	                    this.toolPanelShowing = false;
	                    return;
	                }
	                this.toolPanelShowing = show;
	                this.eRootPanel.setEastVisible(show);
	            };
	            Grid.prototype.isToolPanelShowing = function () {
	                return this.toolPanelShowing;
	            };
	            Grid.prototype.isUsingInMemoryModel = function () {
	                return this.usingInMemoryModel;
	            };
	            Grid.prototype.setDatasource = function (datasource) {
	                // if datasource provided, then set it
	                if (datasource) {
	                    this.gridOptions.datasource = datasource;
	                }
	                // get the set datasource (if null was passed to this method,
	                // then need to get the actual datasource from options
	                var datasourceToUse = this.gridOptionsWrapper.getDatasource();
	                this.doingVirtualPaging = this.gridOptionsWrapper.isVirtualPaging() && datasourceToUse;
	                this.doingPagination = datasourceToUse && !this.doingVirtualPaging;
	                var showPagingPanel;
	                if (this.doingVirtualPaging) {
	                    this.paginationController.setDatasource(null);
	                    this.virtualPageRowController.setDatasource(datasourceToUse);
	                    this.rowModel = this.virtualPageRowController.getModel();
	                    this.usingInMemoryModel = false;
	                    showPagingPanel = false;
	                }
	                else if (this.doingPagination) {
	                    this.paginationController.setDatasource(datasourceToUse);
	                    this.virtualPageRowController.setDatasource(null);
	                    this.rowModel = this.inMemoryRowController.getModel();
	                    this.usingInMemoryModel = true;
	                    showPagingPanel = true;
	                }
	                else {
	                    this.paginationController.setDatasource(null);
	                    this.virtualPageRowController.setDatasource(null);
	                    this.rowModel = this.inMemoryRowController.getModel();
	                    this.usingInMemoryModel = true;
	                    showPagingPanel = false;
	                }
	                this.selectionController.setRowModel(this.rowModel);
	                this.filterManager.setRowModel(this.rowModel);
	                this.rowRenderer.setRowModel(this.rowModel);
	                this.gridPanel.setRowModel(this.rowModel);
	                this.eRootPanel.setSouthVisible(showPagingPanel);
	                // because we just set the rowModel, need to update the gui
	                this.rowRenderer.refreshView();
	                this.doLayout();
	            };
	            // gets called after columns are shown / hidden from groups expanding
	            Grid.prototype.refreshHeaderAndBody = function () {
	                this.headerRenderer.refreshHeader();
	                this.headerRenderer.updateFilterIcons();
	                this.headerRenderer.updateSortIcons();
	                this.headerRenderer.setPinnedColContainerWidth();
	                this.gridPanel.setBodyContainerWidth();
	                this.gridPanel.setPinnedColContainerWidth();
	                this.rowRenderer.refreshView();
	            };
	            Grid.prototype.destroy = function () {
	                if (this.windowResizeListener) {
	                    window.removeEventListener('resize', this.windowResizeListener);
	                    this.logger.log('Removing windowResizeListener');
	                }
	                this.finished = true;
	                this.dragAndDropService.destroy();
	                this.eUserProvidedDiv.removeChild(this.eRootPanel.getGui());
	                this.logger.log('Grid DOM removed');
	            };
	            Grid.prototype.onQuickFilterChanged = function (newFilter) {
	                var actuallyChanged = this.filterManager.setQuickFilter(newFilter);
	                if (actuallyChanged) {
	                    this.onFilterChanged();
	                }
	            };
	            Grid.prototype.onFilterModified = function () {
	                this.eventService.dispatchEvent(grid.Events.EVENT_FILTER_MODIFIED);
	            };
	            Grid.prototype.onFilterChanged = function () {
	                this.eventService.dispatchEvent(grid.Events.EVENT_BEFORE_FILTER_CHANGED);
	                this.filterManager.onFilterChanged();
	                this.headerRenderer.updateFilterIcons();
	                if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
	                    // if doing server side filtering, changing the sort has the impact
	                    // of resetting the datasource
	                    this.setDatasource();
	                }
	                else {
	                    // if doing in memory filtering, we just update the in memory data
	                    this.updateModelAndRefresh(grid.Constants.STEP_FILTER);
	                }
	                this.eventService.dispatchEvent(grid.Events.EVENT_AFTER_FILTER_CHANGED);
	            };
	            Grid.prototype.onRowClicked = function (multiSelectKeyPressed, rowIndex, node) {
	                // we do not allow selecting groups by clicking (as the click here expands the group)
	                // so return if it's a group row
	                if (node.group) {
	                    return;
	                }
	                // we also don't allow selection of floating rows
	                if (node.floating) {
	                    return;
	                }
	                // making local variables to make the below more readable
	                var gridOptionsWrapper = this.gridOptionsWrapper;
	                var selectionController = this.selectionController;
	                // if no selection method enabled, do nothing
	                if (!gridOptionsWrapper.isRowSelection()) {
	                    return;
	                }
	                // if click selection suppressed, do nothing
	                if (gridOptionsWrapper.isSuppressRowClickSelection()) {
	                    return;
	                }
	                var doDeselect = multiSelectKeyPressed
	                    && selectionController.isNodeSelected(node)
	                    && gridOptionsWrapper.isRowDeselection();
	                if (doDeselect) {
	                    selectionController.deselectNode(node);
	                }
	                else {
	                    selectionController.selectNode(node, multiSelectKeyPressed);
	                }
	            };
	            Grid.prototype.showLoadingOverlay = function () {
	                this.gridPanel.showLoadingOverlay();
	            };
	            Grid.prototype.showNoRowsOverlay = function () {
	                this.gridPanel.showNoRowsOverlay();
	            };
	            Grid.prototype.hideOverlay = function () {
	                this.gridPanel.hideOverlay();
	            };
	            Grid.prototype.setupColumns = function () {
	                this.columnController.onColumnsChanged();
	                this.gridPanel.showPinnedColContainersIfNeeded();
	                this.gridPanel.onBodyHeightChange();
	            };
	            // rowsToRefresh is at what index to start refreshing the rows. the assumption is
	            // if we are expanding or collapsing a group, then only he rows below the group
	            // need to be refresh. this allows the context (eg focus) of the other cells to
	            // remain.
	            Grid.prototype.updateModelAndRefresh = function (step, refreshFromIndex) {
	                this.inMemoryRowController.updateModel(step);
	                this.rowRenderer.refreshView(refreshFromIndex);
	            };
	            Grid.prototype.setRowData = function (rows, firstId) {
	                if (rows) {
	                    this.gridOptions.rowData = rows;
	                }
	                var rowData = this.gridOptionsWrapper.getRowData();
	                this.inMemoryRowController.setAllRows(rowData, firstId);
	                this.selectionController.deselectAll();
	                this.filterManager.onNewRowsLoaded();
	                this.updateModelAndRefresh(grid.Constants.STEP_EVERYTHING);
	                this.headerRenderer.updateFilterIcons();
	                if (rowData && rowData.length > 0) {
	                    this.hideOverlay();
	                }
	                else {
	                    this.showNoRowsOverlay();
	                }
	            };
	            Grid.prototype.ensureNodeVisible = function (comparator) {
	                if (this.doingVirtualPaging) {
	                    throw 'Cannot use ensureNodeVisible when doing virtual paging, as we cannot check rows that are not in memory';
	                }
	                // look for the node index we want to display
	                var rowCount = this.rowModel.getVirtualRowCount();
	                var comparatorIsAFunction = typeof comparator === 'function';
	                var indexToSelect = -1;
	                // go through all the nodes, find the one we want to show
	                for (var i = 0; i < rowCount; i++) {
	                    var node = this.rowModel.getVirtualRow(i);
	                    if (comparatorIsAFunction) {
	                        if (comparator(node)) {
	                            indexToSelect = i;
	                            break;
	                        }
	                    }
	                    else {
	                        // check object equality against node and data
	                        if (comparator === node || comparator === node.data) {
	                            indexToSelect = i;
	                            break;
	                        }
	                    }
	                }
	                if (indexToSelect >= 0) {
	                    this.gridPanel.ensureIndexVisible(indexToSelect);
	                }
	            };
	            Grid.prototype.getFilterModel = function () {
	                return this.filterManager.getFilterModel();
	            };
	            Grid.prototype.setFocusedCell = function (rowIndex, colIndex) {
	                this.gridPanel.ensureIndexVisible(rowIndex);
	                this.gridPanel.ensureColIndexVisible(colIndex);
	                var that = this;
	                setTimeout(function () {
	                    that.rowRenderer.setFocusedCell(rowIndex, colIndex);
	                }, 10);
	            };
	            Grid.prototype.getSortModel = function () {
	                var allColumns = this.columnController.getAllColumns();
	                var columnsWithSorting = [];
	                var i;
	                for (i = 0; i < allColumns.length; i++) {
	                    if (allColumns[i].getSort()) {
	                        columnsWithSorting.push(allColumns[i]);
	                    }
	                }
	                columnsWithSorting.sort(function (a, b) {
	                    return a.sortedAt - b.sortedAt;
	                });
	                var result = [];
	                for (i = 0; i < columnsWithSorting.length; i++) {
	                    var resultEntry = {
	                        colId: columnsWithSorting[i].colId,
	                        sort: columnsWithSorting[i].sort
	                    };
	                    result.push(resultEntry);
	                }
	                return result;
	            };
	            Grid.prototype.setSortModel = function (sortModel) {
	                if (!this.gridOptionsWrapper.isEnableSorting()) {
	                    console.warn('ag-grid: You are setting the sort model on a grid that does not have sorting enabled');
	                    return;
	                }
	                // first up, clear any previous sort
	                var sortModelProvided = sortModel !== null && sortModel !== undefined && sortModel.length > 0;
	                var allColumns = this.columnController.getAllColumns();
	                for (var i = 0; i < allColumns.length; i++) {
	                    var column = allColumns[i];
	                    var sortForCol = null;
	                    var sortedAt = -1;
	                    if (sortModelProvided && !column.getColDef().suppressSorting) {
	                        for (var j = 0; j < sortModel.length; j++) {
	                            var sortModelEntry = sortModel[j];
	                            if (typeof sortModelEntry.colId === 'string'
	                                && typeof column.getColId() === 'string'
	                                && sortModelEntry.colId === column.getColId()) {
	                                sortForCol = sortModelEntry.sort;
	                                sortedAt = j;
	                            }
	                        }
	                    }
	                    if (sortForCol) {
	                        column.setSort(sortForCol);
	                        column.setSortedAt(sortedAt);
	                    }
	                    else {
	                        column.setSort(null);
	                        column.setSortedAt(null);
	                    }
	                }
	                this.onSortingChanged();
	            };
	            Grid.prototype.onSortingChanged = function () {
	                this.eventService.dispatchEvent(grid.Events.EVENT_BEFORE_SORT_CHANGED);
	                this.headerRenderer.updateSortIcons();
	                if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
	                    // if doing server side sorting, changing the sort has the impact
	                    // of resetting the datasource
	                    this.setDatasource();
	                }
	                else {
	                    // if doing in memory sorting, we just update the in memory data
	                    this.updateModelAndRefresh(grid.Constants.STEP_SORT);
	                }
	                this.eventService.dispatchEvent(grid.Events.EVENT_AFTER_SORT_CHANGED);
	            };
	            Grid.prototype.addVirtualRowListener = function (rowIndex, callback) {
	                if (!this.virtualRowCallbacks[rowIndex]) {
	                    this.virtualRowCallbacks[rowIndex] = [];
	                }
	                this.virtualRowCallbacks[rowIndex].push(callback);
	            };
	            Grid.prototype.onVirtualRowSelected = function (rowIndex, selected) {
	                // inform the callbacks of the event
	                if (this.virtualRowCallbacks[rowIndex]) {
	                    this.virtualRowCallbacks[rowIndex].forEach(function (callback) {
	                        if (typeof callback.rowSelected === 'function') {
	                            callback.rowSelected(selected);
	                        }
	                    });
	                }
	                this.rowRenderer.onRowSelected(rowIndex, selected);
	            };
	            Grid.prototype.onVirtualRowRemoved = function (rowIndex) {
	                // inform the callbacks of the event
	                if (this.virtualRowCallbacks[rowIndex]) {
	                    this.virtualRowCallbacks[rowIndex].forEach(function (callback) {
	                        if (typeof callback.rowRemoved === 'function') {
	                            callback.rowRemoved();
	                        }
	                    });
	                }
	                // remove the callbacks
	                delete this.virtualRowCallbacks[rowIndex];
	            };
	            Grid.prototype.setColumnDefs = function (colDefs) {
	                if (colDefs) {
	                    this.gridOptions.columnDefs = colDefs;
	                }
	                this.setupColumns();
	                this.updateModelAndRefresh(grid.Constants.STEP_EVERYTHING);
	                // found that adding pinned column can upset the layout
	                this.doLayout();
	            };
	            Grid.prototype.updateBodyContainerWidthAfterColResize = function () {
	                this.rowRenderer.setMainRowWidths();
	                this.gridPanel.setBodyContainerWidth();
	            };
	            Grid.prototype.updatePinnedColContainerWidthAfterColResize = function () {
	                this.gridPanel.setPinnedColContainerWidth();
	                this.headerRenderer.setPinnedColContainerWidth();
	            };
	            Grid.prototype.doLayout = function () {
	                // need to do layout first, as drawVirtualRows and setPinnedColHeight
	                // need to know the result of the resizing of the panels.
	                var sizeChanged = this.eRootPanel.doLayout();
	                // both of the two below should be done in gridPanel, the gridPanel should register 'resize' to the panel
	                if (sizeChanged) {
	                    this.rowRenderer.drawVirtualRows();
	                    var event = {
	                        clientWidth: this.eRootPanel.getGui().clientWidth,
	                        clientHeight: this.eRootPanel.getGui().clientHeight
	                    };
	                    this.eventService.dispatchEvent(grid.Events.EVENT_GRID_SIZE_CHANGED, event);
	                }
	            };
	            return Grid;
	        })();
	        grid.Grid = Grid;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        var ComponentUtil = (function () {
	            function ComponentUtil() {
	            }
	            ComponentUtil.copyAttributesToGridOptions = function (gridOptions, component) {
	                // create empty grid options if none were passed
	                if (typeof gridOptions !== 'object') {
	                    gridOptions = {};
	                }
	                // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
	                var pGridOptions = gridOptions;
	                // add in all the simple properties
	                ComponentUtil.SIMPLE_PROPERTIES.concat(ComponentUtil.WITH_IMPACT_OTHER_PROPERTIES).forEach(function (key) {
	                    if (typeof (component)[key] !== 'undefined') {
	                        pGridOptions[key] = component[key];
	                    }
	                });
	                ComponentUtil.SIMPLE_BOOLEAN_PROPERTIES.concat(ComponentUtil.WITH_IMPACT_BOOLEAN_PROPERTIES).forEach(function (key) {
	                    if (typeof (component)[key] !== 'undefined') {
	                        pGridOptions[key] = ComponentUtil.toBoolean(component[key]);
	                    }
	                });
	                ComponentUtil.SIMPLE_NUMBER_PROPERTIES.concat(ComponentUtil.WITH_IMPACT_NUMBER_PROPERTIES).forEach(function (key) {
	                    if (typeof (component)[key] !== 'undefined') {
	                        pGridOptions[key] = ComponentUtil.toNumber(component[key]);
	                    }
	                });
	                return gridOptions;
	            };
	            ComponentUtil.processOnChange = function (changes, gridOptions, component) {
	                if (!component._initialised || !changes) {
	                    return;
	                }
	                // to allow array style lookup in TypeScript, take type away from 'this' and 'gridOptions'
	                //var pThis = <any>this;
	                var pGridOptions = gridOptions;
	                // check if any change for the simple types, and if so, then just copy in the new value
	                ComponentUtil.SIMPLE_PROPERTIES.forEach(function (key) {
	                    if (changes[key]) {
	                        pGridOptions[key] = changes[key].currentValue;
	                    }
	                });
	                ComponentUtil.SIMPLE_BOOLEAN_PROPERTIES.forEach(function (key) {
	                    if (changes[key]) {
	                        pGridOptions[key] = ComponentUtil.toBoolean(changes[key].currentValue);
	                    }
	                });
	                ComponentUtil.SIMPLE_NUMBER_PROPERTIES.forEach(function (key) {
	                    if (changes[key]) {
	                        pGridOptions[key] = ComponentUtil.toNumber(changes[key].currentValue);
	                    }
	                });
	                if (changes.showToolPanel) {
	                    component.api.showToolPanel(component.showToolPanel);
	                }
	                if (changes.quickFilterText) {
	                    component.api.setQuickFilter(component.quickFilterText);
	                }
	                if (changes.rowData) {
	                    component.api.setRowData(component.rowData);
	                }
	                if (changes.floatingTopRowData) {
	                    component.api.setFloatingTopRowData(component.floatingTopRowData);
	                }
	                if (changes.floatingBottomRowData) {
	                    component.api.setFloatingBottomRowData(component.floatingBottomRowData);
	                }
	                if (changes.columnDefs) {
	                    component.api.setColumnDefs(component.columnDefs);
	                }
	                if (changes.datasource) {
	                    component.api.setDatasource(component.datasource);
	                }
	                if (changes.pinnedColumnCount) {
	                    component.columnApi.setPinnedColumnCount(component.pinnedColumnCount);
	                }
	                if (changes.pinnedColumnCount) {
	                    component.columnApi.setPinnedColumnCount(component.pinnedColumnCount);
	                }
	                if (changes.headerHeight) {
	                    component.api.setHeaderHeight(component.headerHeight);
	                }
	                // need to review this, it is not impacting anything, they should
	                // call something on the API to update the grid
	                if (changes.groupAggFunction) {
	                    component.gridOptions.groupAggFunction = component.groupAggFunction;
	                }
	            };
	            ComponentUtil.toBoolean = function (value) {
	                if (typeof value === 'boolean') {
	                    return value;
	                }
	                else if (typeof value === 'string') {
	                    // for boolean, compare to empty String to allow attributes appearing with
	                    // not value to be treated as 'true'
	                    return value.toUpperCase() === 'TRUE' || value == '';
	                }
	                else {
	                    return false;
	                }
	            };
	            ComponentUtil.toNumber = function (value) {
	                if (typeof value === 'number') {
	                    return value;
	                }
	                else if (typeof value === 'string') {
	                    return Number(value);
	                }
	                else {
	                    return undefined;
	                }
	            };
	            ComponentUtil.SIMPLE_PROPERTIES = [
	                'sortingOrder',
	                'icons', 'localeText', 'localeTextFunc',
	                'groupColumnDef', 'context', 'rowStyle', 'rowClass', 'headerCellRenderer',
	                'groupDefaultExpanded', 'slaveGrids', 'rowSelection',
	                'overlayLoadingTemplate', 'overlayNoRowsTemplate',
	                'headerCellTemplate'
	            ];
	            ComponentUtil.SIMPLE_NUMBER_PROPERTIES = [
	                'rowHeight', 'rowBuffer', 'colWidth'
	            ];
	            ComponentUtil.SIMPLE_BOOLEAN_PROPERTIES = [
	                'virtualPaging', 'toolPanelSuppressGroups', 'toolPanelSuppressValues', 'rowsAlreadyGrouped',
	                'suppressRowClickSelection', 'suppressCellSelection', 'suppressHorizontalScroll', 'debug',
	                'enableColResize', 'enableCellExpressions', 'enableSorting', 'enableServerSideSorting',
	                'enableFilter', 'enableServerSideFilter', 'angularCompileRows', 'angularCompileFilters',
	                'angularCompileHeaders', 'groupSuppressAutoColumn', 'groupSelectsChildren', 'groupHideGroupColumns',
	                'groupIncludeFooter', 'groupUseEntireRow', 'groupSuppressRow', 'groupSuppressBlankHeader', 'forPrint',
	                'suppressMenuHide', 'rowDeselection', 'unSortIcon', 'suppressMultiSort', 'suppressScrollLag',
	                'singleClickEdit', 'suppressLoadingOverlay', 'suppressNoRowsOverlay', 'suppressAutoSize',
	                'suppressParentsInRowNodes'
	            ];
	            ComponentUtil.WITH_IMPACT_NUMBER_PROPERTIES = ['pinnedColumnCount', 'headerHeight'];
	            ComponentUtil.WITH_IMPACT_BOOLEAN_PROPERTIES = ['showToolPanel'];
	            ComponentUtil.WITH_IMPACT_OTHER_PROPERTIES = [
	                'rowData', 'floatingTopRowData', 'floatingBottomRowData',
	                'columnDefs', 'datasource', 'quickFilterText'];
	            ComponentUtil.CALLBACKS = ['groupRowInnerRenderer', 'groupRowRenderer', 'groupAggFunction',
	                'isScrollLag', 'isExternalFilterPresent', 'doesExternalFilterPass', 'getRowClass', 'getRowStyle',
	                'headerCellRenderer', 'getHeaderCellTemplate'];
	            ComponentUtil.ALL_PROPERTIES = ComponentUtil.SIMPLE_PROPERTIES
	                .concat(ComponentUtil.SIMPLE_NUMBER_PROPERTIES)
	                .concat(ComponentUtil.SIMPLE_BOOLEAN_PROPERTIES)
	                .concat(ComponentUtil.WITH_IMPACT_NUMBER_PROPERTIES)
	                .concat(ComponentUtil.WITH_IMPACT_BOOLEAN_PROPERTIES)
	                .concat(ComponentUtil.WITH_IMPACT_OTHER_PROPERTIES);
	            return ComponentUtil;
	        })();
	        grid.ComponentUtil = ComponentUtil;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path='componentUtil.ts'/>
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        // lets load angular 2 if we can find it
	        var _ng;
	        // we are not using annotations on purpose, as if we do, then there is a runtime dependency
	        // on the annotation, which would break this code if angular 2 was not included, which is bad,
	        // as angular 2 is optional for ag-grid
	        var AgGridNg2 = (function () {
	            function AgGridNg2(elementDef) {
	                this.elementDef = elementDef;
	                this._initialised = false;
	                // core grid events
	                this.modelUpdated = new _ng.core.EventEmitter();
	                this.cellClicked = new _ng.core.EventEmitter();
	                this.cellDoubleClicked = new _ng.core.EventEmitter();
	                this.cellContextMenu = new _ng.core.EventEmitter();
	                this.cellValueChanged = new _ng.core.EventEmitter();
	                this.cellFocused = new _ng.core.EventEmitter();
	                this.rowSelected = new _ng.core.EventEmitter();
	                this.rowDeselected = new _ng.core.EventEmitter();
	                this.selectionChanged = new _ng.core.EventEmitter();
	                this.beforeFilterChanged = new _ng.core.EventEmitter();
	                this.afterFilterChanged = new _ng.core.EventEmitter();
	                this.filterModified = new _ng.core.EventEmitter();
	                this.beforeSortChanged = new _ng.core.EventEmitter();
	                this.afterSortChanged = new _ng.core.EventEmitter();
	                this.virtualRowRemoved = new _ng.core.EventEmitter();
	                this.rowClicked = new _ng.core.EventEmitter();
	                this.rowDoubleClicked = new _ng.core.EventEmitter();
	                this.ready = new _ng.core.EventEmitter();
	                this.gridSizeChanged = new _ng.core.EventEmitter();
	                // column grid events
	                this.columnEverythingChanged = new _ng.core.EventEmitter();
	                this.columnRowGroupChanged = new _ng.core.EventEmitter();
	                this.columnValueChanged = new _ng.core.EventEmitter();
	                this.columnMoved = new _ng.core.EventEmitter();
	                this.columnVisible = new _ng.core.EventEmitter();
	                this.columnGroupOpened = new _ng.core.EventEmitter();
	                this.columnResized = new _ng.core.EventEmitter();
	                this.columnPinnedCountChanged = new _ng.core.EventEmitter();
	            }
	            // this gets called after the directive is initialised
	            AgGridNg2.prototype.ngOnInit = function () {
	                this.gridOptions = grid.ComponentUtil.copyAttributesToGridOptions(this.gridOptions, this);
	                var nativeElement = this.elementDef.nativeElement;
	                var globalEventLister = this.globalEventListener.bind(this);
	                this._agGrid = new ag.grid.Grid(nativeElement, this.gridOptions, globalEventLister);
	                this.api = this.gridOptions.api;
	                this.columnApi = this.gridOptions.columnApi;
	                this._initialised = true;
	            };
	            AgGridNg2.prototype.ngOnChanges = function (changes) {
	                grid.ComponentUtil.processOnChange(changes, this.gridOptions, this);
	            };
	            AgGridNg2.prototype.ngOnDestroy = function () {
	                this.api.destroy();
	            };
	            AgGridNg2.prototype.globalEventListener = function (eventType, event) {
	                var emitter;
	                switch (eventType) {
	                    case grid.Events.EVENT_COLUMN_GROUP_OPENED:
	                        emitter = this.columnGroupOpened;
	                        break;
	                    case grid.Events.EVENT_COLUMN_EVERYTHING_CHANGED:
	                        emitter = this.columnEverythingChanged;
	                        break;
	                    case grid.Events.EVENT_COLUMN_MOVED:
	                        emitter = this.columnMoved;
	                        break;
	                    case grid.Events.EVENT_COLUMN_ROW_GROUP_CHANGE:
	                        emitter = this.columnRowGroupChanged;
	                        break;
	                    case grid.Events.EVENT_COLUMN_RESIZED:
	                        emitter = this.columnResized;
	                        break;
	                    case grid.Events.EVENT_COLUMN_VALUE_CHANGE:
	                        emitter = this.columnValueChanged;
	                        break;
	                    case grid.Events.EVENT_COLUMN_VISIBLE:
	                        emitter = this.columnVisible;
	                        break;
	                    case grid.Events.EVENT_MODEL_UPDATED:
	                        emitter = this.modelUpdated;
	                        break;
	                    case grid.Events.EVENT_CELL_CLICKED:
	                        emitter = this.cellClicked;
	                        break;
	                    case grid.Events.EVENT_CELL_DOUBLE_CLICKED:
	                        emitter = this.cellDoubleClicked;
	                        break;
	                    case grid.Events.EVENT_CELL_CONTEXT_MENU:
	                        emitter = this.cellContextMenu;
	                        break;
	                    case grid.Events.EVENT_CELL_VALUE_CHANGED:
	                        emitter = this.cellValueChanged;
	                        break;
	                    case grid.Events.EVENT_CELL_FOCUSED:
	                        emitter = this.cellFocused;
	                        break;
	                    case grid.Events.EVENT_ROW_SELECTED:
	                        emitter = this.rowSelected;
	                        break;
	                    case grid.Events.EVENT_ROW_DESELECTED:
	                        emitter = this.rowDeselected;
	                        break;
	                    case grid.Events.EVENT_SELECTION_CHANGED:
	                        emitter = this.selectionChanged;
	                        break;
	                    case grid.Events.EVENT_BEFORE_FILTER_CHANGED:
	                        emitter = this.beforeFilterChanged;
	                        break;
	                    case grid.Events.EVENT_AFTER_FILTER_CHANGED:
	                        emitter = this.afterFilterChanged;
	                        break;
	                    case grid.Events.EVENT_AFTER_SORT_CHANGED:
	                        emitter = this.afterSortChanged;
	                        break;
	                    case grid.Events.EVENT_BEFORE_SORT_CHANGED:
	                        emitter = this.beforeSortChanged;
	                        break;
	                    case grid.Events.EVENT_FILTER_MODIFIED:
	                        emitter = this.filterModified;
	                        break;
	                    case grid.Events.EVENT_VIRTUAL_ROW_REMOVED:
	                        emitter = this.virtualRowRemoved;
	                        break;
	                    case grid.Events.EVENT_ROW_CLICKED:
	                        emitter = this.rowClicked;
	                        break;
	                    case grid.Events.EVENT_ROW_DOUBLE_CLICKED:
	                        emitter = this.rowDoubleClicked;
	                        break;
	                    case grid.Events.EVENT_READY:
	                        emitter = this.ready;
	                        break;
	                    case grid.Events.EVENT_GRID_SIZE_CHANGED:
	                        emitter = this.ready;
	                        break;
	                    default:
	                        console.log('ag-Grid: AgGridNg2 - unknown event type: ' + eventType);
	                        return;
	                }
	                emitter.next(event);
	            };
	            return AgGridNg2;
	        })();
	        grid.AgGridNg2 = AgGridNg2;
	        // check for angular and component, as if angular 1, we will find angular but the wrong version
	        if (typeof (window) !== 'undefined') {
	            if (window && window.ng && window.ng.core && window.ng.core.Component) {
	                var ng = window.ng;
	                initialiseAgGridWithAngular2(ng);
	            }
	        }
	        function initialiseAgGridWithAngular2(ng) {
	            _ng = ng;
	            AgGridNg2.annotations = [
	                new _ng.core.Component({
	                    selector: 'ag-grid-ng2',
	                    outputs: [
	                        // core grid events
	                        'modelUpdated', 'cellClicked', 'cellDoubleClicked', 'cellContextMenu', 'cellValueChanged', 'cellFocused',
	                        'rowSelected', 'rowDeselected', 'selectionChanged', 'beforeFilterChanged', 'afterFilterChanged',
	                        'filterModified', 'beforeSortChanged', 'afterSortChanged', 'virtualRowRemoved',
	                        'rowClicked', 'rowDoubleClicked', 'ready', 'gridSizeChanged',
	                        // column events
	                        'columnEverythingChanged', 'columnRowGroupChanged', 'columnValueChanged', 'columnMoved',
	                        'columnVisible', 'columnGroupOpened', 'columnResized', 'columnPinnedCountChanged'],
	                    inputs: ['gridOptions']
	                        .concat(grid.ComponentUtil.SIMPLE_PROPERTIES)
	                        .concat(grid.ComponentUtil.SIMPLE_BOOLEAN_PROPERTIES)
	                        .concat(grid.ComponentUtil.SIMPLE_NUMBER_PROPERTIES)
	                        .concat(grid.ComponentUtil.WITH_IMPACT_OTHER_PROPERTIES)
	                        .concat(grid.ComponentUtil.WITH_IMPACT_BOOLEAN_PROPERTIES)
	                        .concat(grid.ComponentUtil.WITH_IMPACT_NUMBER_PROPERTIES)
	                        .concat(grid.ComponentUtil.CALLBACKS),
	                    compileChildren: false // no angular on the inside thanks
	                }),
	                new _ng.core.View({
	                    template: '',
	                    // tell angular we don't want view encapsulation, we don't want a shadow root
	                    encapsulation: _ng.core.ViewEncapsulation.None
	                })
	            ];
	            AgGridNg2.parameters = [[_ng.core.ElementRef]];
	        }
	        grid.initialiseAgGridWithAngular2 = initialiseAgGridWithAngular2;
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid_4) {
	        // provide a reference to angular
	        var angular;
	        if (typeof window !== 'undefined') {
	            angular = window.angular;
	        }
	        // if angular is present, register the directive - checking for 'module' and 'directive' also to make
	        // sure it's Angular 1 and not Angular 2
	        if (typeof angular !== 'undefined' && typeof angular.module !== 'undefined' && angular.directive !== 'undefined') {
	            initialiseAgGridWithAngular1(angular);
	        }
	        function initialiseAgGridWithAngular1(angular) {
	            var angularModule = angular.module("agGrid", []);
	            angularModule.directive("agGrid", function () {
	                return {
	                    restrict: "A",
	                    controller: ['$element', '$scope', '$compile', '$attrs', AngularDirectiveController],
	                    scope: true
	                };
	            });
	        }
	        grid_4.initialiseAgGridWithAngular1 = initialiseAgGridWithAngular1;
	        function AngularDirectiveController($element, $scope, $compile, $attrs) {
	            var gridOptions;
	            var quickFilterOnScope;
	            var keyOfGridInScope = $attrs.agGrid;
	            quickFilterOnScope = keyOfGridInScope + '.quickFilterText';
	            gridOptions = $scope.$eval(keyOfGridInScope);
	            if (!gridOptions) {
	                console.warn("WARNING - grid options for ag-Grid not found. Please ensure the attribute ag-grid points to a valid object on the scope");
	                return;
	            }
	            var eGridDiv = $element[0];
	            var grid = new ag.grid.Grid(eGridDiv, gridOptions, null, $scope, $compile, quickFilterOnScope);
	            $scope.$on("$destroy", function () {
	                grid.destroy();
	            });
	        }
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path='componentUtil.ts'/>
	var ag;
	(function (ag) {
	    var grid;
	    (function (grid) {
	        if (typeof document !== 'undefined' && document.registerElement) {
	            // i don't think this type of extension is possible in TypeScript, so back to
	            // plain Javascript to create this object
	            var AgileGridProto = Object.create(HTMLElement.prototype);
	            // wrap each property with a get and set method, so we can track when changes are done
	            grid.ComponentUtil.ALL_PROPERTIES.forEach(function (key) {
	                Object.defineProperty(AgileGridProto, key, {
	                    set: function (v) {
	                        this.__agGridSetProperty(key, v);
	                    },
	                    get: function () {
	                        return this.__agGridGetProperty(key);
	                    }
	                });
	            });
	            AgileGridProto.__agGridSetProperty = function (key, value) {
	                if (!this.__attributes) {
	                    this.__attributes = {};
	                }
	                this.__attributes[key] = value;
	                // keeping this consistent with the ng2 onChange, so I can reuse the handling code
	                var changeObject = {};
	                changeObject[key] = { currentValue: value };
	                this.onChange(changeObject);
	            };
	            AgileGridProto.onChange = function (changes) {
	                grid.ComponentUtil.processOnChange(changes, this.gridOptions, this);
	            };
	            AgileGridProto.__agGridGetProperty = function (key) {
	                if (!this.__attributes) {
	                    this.__attributes = {};
	                }
	                return this.__attributes[key];
	            };
	            AgileGridProto.setGridOptions = function (options) {
	                var globalEventListener = this.globalEventListener.bind(this);
	                this._gridOptions = grid.ComponentUtil.copyAttributesToGridOptions(options, this);
	                this._agGrid = new ag.grid.Grid(this, this._gridOptions, globalEventListener);
	                this.api = options.api;
	                this.columnApi = options.columnApi;
	                this._initialised = true;
	            };
	            // copies all the attributes into this object
	            AgileGridProto.createdCallback = function () {
	                for (var i = 0; i < this.attributes.length; i++) {
	                    var attribute = this.attributes[i];
	                    this.setPropertyFromAttribute(attribute);
	                }
	            };
	            AgileGridProto.setPropertyFromAttribute = function (attribute) {
	                var name = toCamelCase(attribute.nodeName);
	                var value = attribute.nodeValue;
	                if (grid.ComponentUtil.ALL_PROPERTIES.indexOf(name) >= 0) {
	                    this[name] = value;
	                }
	            };
	            AgileGridProto.attachedCallback = function (params) { };
	            AgileGridProto.detachedCallback = function (params) { };
	            AgileGridProto.attributeChangedCallback = function (attributeName) {
	                var attribute = this.attributes[attributeName];
	                this.setPropertyFromAttribute(attribute);
	            };
	            AgileGridProto.globalEventListener = function (eventType, event) {
	                var eventLowerCase = eventType.toLowerCase();
	                var browserEvent = new Event(eventLowerCase);
	                var browserEventNoType = browserEvent;
	                browserEventNoType.agGridDetails = event;
	                this.dispatchEvent(browserEvent);
	                var callbackMethod = 'on' + eventLowerCase;
	                if (typeof this[callbackMethod] === 'function') {
	                    this[callbackMethod](browserEvent);
	                }
	            };
	            // finally, register
	            document.registerElement('ag-grid', { prototype: AgileGridProto });
	        }
	        function toCamelCase(myString) {
	            if (typeof myString === 'string') {
	                var result = myString.replace(/-([a-z])/g, function (g) {
	                    return g[1].toUpperCase();
	                });
	                return result;
	            }
	            else {
	                return myString;
	            }
	        }
	    })(grid = ag.grid || (ag.grid = {}));
	})(ag || (ag = {}));
	/// <reference path="components/agGridNg2.ts" />
	/// <reference path="components/agGridNg1.ts" />
	/// <reference path="components/agGridWebComponent.ts" />
	/// <reference path="../../typings/tsd" />
	// creating the random local variable was needed to get the unit tests working.
	// if not, the tests would not load as we were referencing an undefined window object
	var __RANDOM_GLOBAL_VARIABLE_FSKJFHSKJFHKSDAJF;
	if (typeof window !== 'undefined') {
	    __RANDOM_GLOBAL_VARIABLE_FSKJFHSKJFHKSDAJF = window;
	}
	(function () {
	    // Establish the root object, `window` or `exports`
	    var root = this;
	    if (true) {
	        if (typeof module !== 'undefined' && module.exports) {
	            exports = module.exports = ag;//angularGridGlobalFunction;
	        }
	        exports.angularGrid = angularGridGlobalFunction;
	    }
	    root.agGridGlobalFunc = angularGridGlobalFunction;
	    // Global Function - this function is used for creating a grid, outside of any AngularJS
	    function angularGridGlobalFunction(element, gridOptions) {
	        // see if element is a query selector, or a real element
	        var eGridDiv;
	        if (typeof element === 'string') {
	            eGridDiv = document.querySelector(element);
	            if (!eGridDiv) {
	                console.warn('WARNING - was not able to find element ' + element + ' in the DOM, ag-Grid initialisation aborted.');
	                return;
	            }
	        }
	        else {
	            eGridDiv = element;
	        }
	        new ag.grid.Grid(eGridDiv, gridOptions);
	    }
	}).call(__RANDOM_GLOBAL_VARIABLE_FSKJFHSKJFHKSDAJF);


/***/ },
/* 515 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(516);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(286)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/postcss-loader/index.js!./../../../node_modules/sass-loader/index.js?sourceMap!./index.scss", function() {
				var newContent = require("!!./../../../node_modules/css-loader/index.js!./../../../node_modules/postcss-loader/index.js!./../../../node_modules/sass-loader/index.js?sourceMap!./index.scss");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(285)();
	// imports
	
	
	// module
	exports.push([module.id, "@font-face {\n  font-family: 'Visby';\n  font-style: normal;\n  font-weight: 100;\n  src: url(" + __webpack_require__(517) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Visby';\n  font-style: italic;\n  font-weight: 100;\n  src: url(" + __webpack_require__(518) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Visby';\n  font-style: normal;\n  font-weight: 200;\n  src: url(" + __webpack_require__(519) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Visby';\n  font-style: italic;\n  font-weight: 200;\n  src: url(" + __webpack_require__(520) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Visby';\n  font-style: normal;\n  font-weight: 300;\n  src: url(" + __webpack_require__(521) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Visby';\n  font-style: italic;\n  font-weight: 300;\n  src: url(" + __webpack_require__(522) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Visby';\n  font-style: normal;\n  font-weight: 400;\n  src: url(" + __webpack_require__(523) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Visby';\n  font-style: italic;\n  font-weight: 400;\n  src: url(" + __webpack_require__(524) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Visby';\n  font-style: normal;\n  font-weight: 500;\n  src: url(" + __webpack_require__(525) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Visby';\n  font-style: italic;\n  font-weight: 500;\n  src: url(" + __webpack_require__(526) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Visby';\n  font-style: normal;\n  font-weight: 600;\n  src: url(" + __webpack_require__(527) + ") format(\"truetype\"); }\n\n@font-face {\n  font-family: 'Visby';\n  font-style: italic;\n  font-weight: 600;\n  src: url(" + __webpack_require__(528) + ") format(\"truetype\"); }\n\nhtml {\n  height: 100%; }\n\nbody {\n  margin: 0;\n  font-family: \"Visby\", \"Proxima Nova\", \"Helvetica Neue\", Helvetica, Arial, sans-serif !important;\n  height: 100%;\n  background: #f1f5f7; }\n", ""]);
	
	// exports


/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/0303ae51b06264db1659a61e79901c9a.ttf";

/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/37b33e7be0f0634bd18cdc3bd14c46a9.ttf";

/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/f778c2bbda74a97fe2e5f53141c87383.ttf";

/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/7288a2ad4d8f0a0e04c63d15e5547548.ttf";

/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/0da13b0dc580dba6731a71805bbd7cfa.ttf";

/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/8c9e8dab4fba5531802910624c939b07.ttf";

/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/1e0ca19401309b81eb97b315025a04f0.ttf";

/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/f469889a7415741b33d98f4a25f9faff.ttf";

/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/f47475a0f9874a13d4b9a0f149cf7bc1.ttf";

/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/b8f708195cbdc86694a64f85f6676a40.ttf";

/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/8132fd76413d1a65de9cbb52b531db50.ttf";

/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/57c538f5bb7aa209d8037dd924cb1d9b.ttf";

/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(530);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(286)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./../../postcss-loader/index.js!./ag-grid.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./../../postcss-loader/index.js!./ag-grid.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(285)();
	// imports
	
	
	// module
	exports.push([module.id, "ag-grid-ng2 {\n  display: inline-block;\n}\n.ag-root {\n  font-size: 14px;\n  cursor: default;\n/* set to relative, so absolute popups appear relative to this */\n  position: relative;\n/* disable user mouse selection */\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  box-sizing: border-box;\n/* was getting some 'should be there' scrolls, this sorts it out */\n  overflow: hidden;\n}\n.ag-no-scrolls {\n  white-space: nowrap;\n  display: inline-block;\n}\n.ag-scrolls {\n  height: 100%;\n}\n.ag-popup-backdrop {\n  position: fixed;\n  left: 0px;\n  top: 0px;\n  width: 100%;\n  height: 100%;\n}\n.ag-header {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  white-space: nowrap;\n  box-sizing: border-box;\n  overflow: hidden;\n  width: 100%;\n}\n.ag-pinned-left-header {\n  float: left;\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-pinned-right-header {\n  float: right;\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-header-viewport {\n  box-sizing: border-box;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-scrolls .ag-header-container {\n  box-sizing: border-box;\n  position: relative;\n  white-space: nowrap;\n  height: 100%;\n}\n.ag-no-scrolls .ag-header-container {\n  white-space: nowrap;\n}\n.ag-header-cell {\n  box-sizing: border-box;\n  vertical-align: bottom;\n  text-align: center;\n  display: inline-block;\n  height: 100%;\n}\n.ag-header-group-cell {\n  display: inline-block;\n  box-sizing: border-box;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.ag-header-group-cell-label {\n  display: table-cell;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.ag-header-cell-label {\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.ag-header-cell-resize {\n  height: 100%;\n  width: 4px;\n  float: right;\n  cursor: col-resize;\n}\n.ag-header-expand-icon {\n  padding-left: 4px;\n}\n.ag-header-cell-menu-button {\n  float: right;\n}\n.ag-overlay-panel {\n  display: table;\n  width: 100%;\n  height: 100%;\n  pointer-events: none;\n}\n.ag-overlay-wrapper {\n  display: table-cell;\n  vertical-align: middle;\n  text-align: center;\n}\n.ag-body {\n  height: 100%;\n  box-sizing: border-box;\n}\n.ag-floating-top {\n  position: absolute;\n  left: 0px;\n  width: 100%;\n  white-space: nowrap;\n  box-sizing: border-box;\n  overflow: hidden;\n}\n.ag-pinned-left-floating-top {\n  float: left;\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-pinned-right-floating-top {\n  float: right;\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-floating-top-viewport {\n  box-sizing: border-box;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-floating-top-container {\n  box-sizing: border-box;\n  position: relative;\n  white-space: nowrap;\n}\n.ag-floating-bottom {\n  position: absolute;\n  left: 0px;\n  width: 100%;\n  white-space: nowrap;\n  box-sizing: border-box;\n  overflow: hidden;\n}\n.ag-pinned-left-floating-bottom {\n  float: left;\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-pinned-right-floating-bottom {\n  float: right;\n  box-sizing: border-box;\n  display: inline-block;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-floating-bottom-viewport {\n  box-sizing: border-box;\n  overflow: hidden;\n  height: 100%;\n}\n.ag-floating-bottom-container {\n  box-sizing: border-box;\n  position: relative;\n  white-space: nowrap;\n}\n.ag-pinned-left-cols-viewport {\n  float: left;\n  overflow: hidden;\n}\n.ag-pinned-left-cols-container {\n  display: inline-block;\n  position: relative;\n}\n.ag-pinned-right-cols-viewport {\n  float: right;\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.ag-pinned-right-cols-container {\n  display: inline-block;\n  position: relative;\n}\n.ag-body-viewport-wrapper {\n  height: 100%;\n}\n.ag-body-viewport {\n  overflow-x: auto;\n  overflow-y: auto;\n  height: 100%;\n}\n.ag-scrolls .ag-body-container {\n  position: relative;\n  display: inline-block;\n}\n.ag-scrolls .ag-row {\n  white-space: nowrap;\n  position: absolute;\n  width: 100%;\n}\n.agile-gird-row:hover {\n  background-color: #f0f8ff;\n}\n.ag-cell {\n  display: inline-block;\n  white-space: nowrap;\n  height: 100%;\n  box-sizing: border-box;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  float: left;\n}\n.ag-group-cell-entire-row {\n  width: 100%;\n  display: inline-block;\n  white-space: nowrap;\n  height: 100%;\n  box-sizing: border-box;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.ag-footer-cell-entire-row {\n  width: 100%;\n  display: inline-block;\n  white-space: nowrap;\n  height: 100%;\n  box-sizing: border-box;\n  text-overflow: ellipsis;\n  overflow: hidden;\n}\n.ag-large .ag-root {\n  font-size: 20px;\n}\n.ag-filter {\n  position: absolute;\n  z-index: 100;\n}\n.ag-filter-list-viewport {\n  overflow-x: auto;\n  height: 200px;\n  width: 200px;\n}\n.ag-filter-list-container {\n  position: relative;\n  overflow: hidden;\n}\n.ag-filter-item {\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  position: absolute;\n}\n.ag-filter-filter {\n  width: 170px;\n  margin: 4px;\n}\n.ag-filter-select {\n  width: 110px;\n  margin: 4px 4px 0px 4px;\n}\n.ag-no-vertical-scroll .ag-scrolls {\n  height: unset;\n}\n.ag-no-vertical-scroll .ag-body {\n  height: unset;\n}\n.ag-no-vertical-scroll .ag-body-viewport-wrapper {\n  height: unset;\n}\n.ag-no-vertical-scroll .ag-body-viewport {\n  height: unset;\n}\n.ag-list-selection {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  cursor: default;\n}\n.ag-tool-panel-container {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n  cursor: default;\n  width: 200px;\n}\n", ""]);
	
	// exports


/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(532);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(286)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./../../postcss-loader/index.js!./theme-blue.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./../../postcss-loader/index.js!./theme-blue.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(285)();
	// imports
	
	
	// module
	exports.push([module.id, ".ag-blue .ag-root {\n  border: 1px solid #9bc2e6;\n  font: 10pt Calibri, \"Segoe UI\", Thonburi, Arial, Verdana, sans-serif;\n}\n.ag-blue .ag-cell {\n  top: -1px;\n  padding-left: 2px;\n  padding-right: 2px;\n  overflow: hidden;\n  white-space: nowrap;\n  letter-spacing: -0.02em;\n}\n.ag-blue .ag-cell-focus {\n  background: #fff;\n  border: 2px solid #217346;\n}\n.ag-blue .ag-cell-no-focus {\n  border-right: 1px dotted #9bc2e6;\n  border-top: 2px solid transparent;\n  border-left: 2px solid transparent;\n  border-bottom: 1px solid #9bc2e6;\n}\n.ag-blue .ag-cell-first-right-pinned {\n  border-left: 1px dotted #9bc2e6;\n}\n.ag-blue .ag-header {\n  background-color: #5b9bd5;\n  border-bottom: 1px solid #9bc2e6;\n}\n.ag-blue .ag-no-scrolls .ag-header-container {\n  background-color: #5b9bd5;\n  border-bottom: 1px solid #9bc2e6;\n}\n.ag-blue .ag-header-cell {\n  border-right: 1px solid #9bc2e6;\n}\n.ag-blue .ag-header-group-cell {\n  border-right: 1px solid #9bc2e6;\n}\n.ag-blue .ag-header-group-cell-with-group {\n  border-bottom: 1px solid #9bc2e6;\n}\n.ag-blue .ag-pinned-right-header {\n  border-left: 1px solid #9bc2e6;\n}\n.ag-blue .ag-header-cell-label {\n  padding: 4px 2px 4px 2px;\n  font-weight: bold;\n  color: #fff;\n}\n.ag-blue .ag-header-cell-text {\n  padding-left: 2px;\n}\n.ag-blue .ag-header-group-cell-label {\n  padding: 4px;\n  font-weight: bold;\n  color: #fff;\n  padding-left: 10px;\n}\n.ag-blue .ag-header-group-text {\n  margin-right: 2px;\n}\n.ag-blue .ag-header-cell-menu-button {\n  color: #fff;\n  border: 1px solid #a6acb3;\n  padding: 2px;\n  margin-top: 3px;\n  border-radius: 3px;\n  box-sizing: content-box;\n  line-height: 0px; /* normal line height, a space was appearing below the menu button */\n/* When using bootstrap, box-sizing was set to 'border-box' */\n}\n.ag-blue .ag-header-icon {\n  color: #fff;\n  stroke: #fff;\n  fill: #fff;\n}\n.ag-blue .ag-dark .ag-header-expand-icon:hover {\n  cursor: pointer;\n}\n.ag-blue .ag-row-odd {\n  background-color: #ddebf7;\n}\n.ag-blue .ag-row-even {\n  background-color: #fff;\n}\n.ag-blue .ag-overlay-loading-wrapper {\n  background-color: rgba(255,255,255,0.5);\n}\n.ag-blue .ag-overlay-loading-center {\n  background-color: #fff;\n  border: 1px solid #a9a9a9;\n  border-radius: 10px;\n  padding: 10px;\n}\n.ag-blue .ag-body {\n  background-color: #fafafa;\n}\n.ag-blue .ag-row-selected {\n  background-color: #c7c7c7;\n}\n.ag-blue .ag-group-cell-entire-row {\n  background-color: #fff;\n  font-weight: bold;\n  padding: 2px 4px;\n  border-bottom: solid 1px #9bc2e6;\n  overflow: hidden;\n  white-space: nowrap;\n}\n.ag-blue .ag-footer-cell-entire-row {\n  background-color: #fff;\n  font-weight: bold;\n  padding: 4px;\n  border-bottom: solid 1px #9bc2e6;\n}\n.ag-blue .ag-group-cell {\n  font-style: italic;\n}\n.ag-blue .ag-group-expand {\n  padding-right: 2px;\n}\n.ag-blue .ag-footer-cell {\n  font-style: italic;\n}\n.ag-blue .ag-filter-checkbox {\n  position: relative;\n  top: 2px;\n  left: 2px;\n  padding-right: 2px;\n}\n.ag-blue .ag-filter-header-container {\n  border-bottom: 1px solid #d3d3d3;\n  font: 10pt Calibri, \"Segoe UI\", Thonburi, Arial, Verdana, sans-serif;\n}\n.ag-blue .ag-filter-apply-panel {\n  border-top: 1px solid #d3d3d3;\n  padding: 2px;\n}\n.ag-blue .ag-filter {\n  background-color: #fff;\n  border: 1px solid #c6c6c6;\n  font: 9pt Calibri, \"Segoe UI\", Thonburi, Arial, Verdana, sans-serif;\n}\n.ag-blue .ag-filter-filter {\n  background-color: #fff;\n  border: 1px solid #c6c6c6;\n  width: 192px;\n}\n.ag-blue .ag-filter-value {\n  margin-left: 4px;\n}\n.ag-blue .ag-filter-value:hover {\n  background-color: #39f;\n  border: 1px dotted #000;\n  color: #fff;\n}\n.ag-blue .ag-selection-checkbox {\n  margin-left: 4px;\n}\n.ag-blue .ag-paging-panel {\n  padding: 4px;\n}\n.ag-blue .ag-paging-button {\n  margin-left: 4px;\n  margin-right: 4px;\n}\n.ag-blue .ag-paging-row-summary-panel {\n  display: inline-block;\n  width: 300px;\n}\n.ag-blue .ag-column-not-visible {\n  opacity: 0.75;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=75)\";\n  filter: alpha(opacity=75);\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=75)\";\n  filter: \"alpha(opacity=75)\";\n}\n.ag-blue .ag-not-dragging {\n  border: 1px solid transparent;\n}\n.ag-blue .ag-drop-target-above {\n  border-top: 5px solid #a9a9a9;\n}\n.ag-blue .ag-drop-target-below {\n  border-bottom: 5px solid #a9a9a9;\n}\n.ag-blue .ag-dragging {\n  border: 1px dotted #a9a9a9;\n}\n.ag-blue .ag-list-item-selected {\n  color: #f0f0f0;\n}\n.ag-blue .ag-list-item-not-selected {\n  font-style: italic;\n  color: #a0a0a0;\n}\n.ag-blue .ag-tool-panel-container {\n  background-color: #eee;\n  box-sizing: border-box;\n  border: 1px solid #a9a9a9;\n  padding: 4px;\n}\n.ag-blue .ag-list-selection {\n  background-color: #fff;\n  border: 1px solid #a9a9a9;\n  box-sizing: border-box;\n}\n.ag-blue .ag-popup-list .ag-list-item:hover {\n  background-color: #add8e6;\n}\n.ag-blue .ag-visible-icons {\n  padding-left: 2px;\n  padding-right: 2px;\n}\n", ""]);
	
	// exports


/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(534);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(286)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../css-loader/index.js!./../postcss-loader/index.js!./normalize.css", function() {
				var newContent = require("!!./../css-loader/index.js!./../postcss-loader/index.js!./normalize.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(285)();
	// imports
	
	
	// module
	exports.push([module.id, "/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\n\n/**\n * 1. Set default font family to sans-serif.\n * 2. Prevent iOS and IE text size adjust after device orientation change,\n *    without disabling user zoom.\n */\n\nhtml {\n  font-family: sans-serif; /* 1 */\n  -ms-text-size-adjust: 100%; /* 2 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/**\n * Remove default margin.\n */\n\nbody {\n  margin: 0;\n}\n\n/* HTML5 display definitions\n   ========================================================================== */\n\n/**\n * Correct `block` display not defined for any HTML5 element in IE 8/9.\n * Correct `block` display not defined for `details` or `summary` in IE 10/11\n * and Firefox.\n * Correct `block` display not defined for `main` in IE 11.\n */\n\narticle, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {\n  display: block;\n}\n\n/**\n * 1. Correct `inline-block` display not defined in IE 8/9.\n * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.\n */\n\naudio, canvas, progress, video {\n  display: inline-block; /* 1 */\n  vertical-align: baseline; /* 2 */\n}\n\n/**\n * Prevent modern browsers from displaying `audio` without controls.\n * Remove excess height in iOS 5 devices.\n */\n\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n\n/**\n * Address `[hidden]` styling not present in IE 8/9/10.\n * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.\n */\n\n[hidden], template {\n  display: none;\n}\n\n/* Links\n   ========================================================================== */\n\n/**\n * Remove the gray background color from active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * Improve readability of focused elements when they are also in an\n * active/hover state.\n */\n\na:active, a:hover {\n  outline: 0;\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Address styling not present in IE 8/9/10/11, Safari, and Chrome.\n */\n\nabbr[title] {\n  border-bottom: 1px dotted;\n}\n\n/**\n * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\n */\n\nb, strong {\n  font-weight: bold;\n}\n\n/**\n * Address styling not present in Safari and Chrome.\n */\n\ndfn {\n  font-style: italic;\n}\n\n/**\n * Address variable `h1` font-size and margin within `section` and `article`\n * contexts in Firefox 4+, Safari, and Chrome.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/**\n * Address styling not present in IE 8/9.\n */\n\nmark {\n  background: #ff0;\n  color: #000;\n}\n\n/**\n * Address inconsistent and variable font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` affecting `line-height` in all browsers.\n */\n\nsub, sup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsup {\n  top: -0.5em;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove border when inside `a` element in IE 8/9/10.\n */\n\nimg {\n  border: 0;\n}\n\n/**\n * Correct overflow not hidden in IE 9/10/11.\n */\n\nsvg:not(:root) {\n  overflow: hidden;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * Address margin not present in IE 8/9 and Safari.\n */\n\nfigure {\n  margin: 1em 40px;\n}\n\n/**\n * Address differences between Firefox and other browsers.\n */\n\nhr {\n  box-sizing: content-box;\n  height: 0;\n}\n\n/**\n * Contain overflow in all browsers.\n */\n\npre {\n  overflow: auto;\n}\n\n/**\n * Address odd `em`-unit font size rendering in all browsers.\n */\n\ncode, kbd, pre, samp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * Known limitation: by default, Chrome and Safari on OS X allow very limited\n * styling of `select`, unless a `border` property is set.\n */\n\n/**\n * 1. Correct color not being inherited.\n *    Known issue: affects color of disabled elements.\n * 2. Correct font properties not being inherited.\n * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.\n */\n\nbutton, input, optgroup, select, textarea {\n  color: inherit; /* 1 */\n  font: inherit; /* 2 */\n  margin: 0; /* 3 */\n}\n\n/**\n * Address `overflow` set to `hidden` in IE 8/9/10/11.\n */\n\nbutton {\n  overflow: visible;\n}\n\n/**\n * Address inconsistent `text-transform` inheritance for `button` and `select`.\n * All other form control elements do not inherit `text-transform` values.\n * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.\n * Correct `select` style inheritance in Firefox.\n */\n\nbutton, select {\n  text-transform: none;\n}\n\n/**\n * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\n *    and `video` controls.\n * 2. Correct inability to style clickable `input` types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *    `input` and others.\n */\n\nbutton, html input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"] {\n  -webkit-appearance: button; /* 2 */\n  cursor: pointer; /* 3 */\n}\n\n/**\n * Re-set default cursor for disabled elements.\n */\n\nbutton[disabled], html input[disabled] {\n  cursor: default;\n}\n\n/**\n * Remove inner padding and border in Firefox 4+.\n */\n\nbutton::-moz-focus-inner, input::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\n\n/**\n * Address Firefox 4+ setting `line-height` on `input` using `!important` in\n * the UA stylesheet.\n */\n\ninput {\n  line-height: normal;\n}\n\n/**\n * It's recommended that you don't attempt to style these elements.\n * Firefox's implementation doesn't respect box-sizing, padding, or width.\n *\n * 1. Address box sizing set to `content-box` in IE 8/9/10.\n * 2. Remove excess padding in IE 8/9/10.\n */\n\ninput[type=\"checkbox\"], input[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Fix the cursor style for Chrome's increment/decrement buttons. For certain\n * `font-size` values of the `input`, it causes the cursor style of the\n * decrement button to change from `default` to `text`.\n */\n\ninput[type=\"number\"]::-webkit-inner-spin-button, input[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Address `appearance` set to `searchfield` in Safari and Chrome.\n * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.\n */\n\ninput[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  box-sizing: content-box; /* 2 */\n}\n\n/**\n * Remove inner padding and search cancel button in Safari and Chrome on OS X.\n * Safari (but not Chrome) clips the cancel button when the search input has\n * padding (and `textfield` appearance).\n */\n\ninput[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * Define consistent border, margin, and padding.\n */\n\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\n\n/**\n * 1. Correct `color` not being inherited in IE 8/9/10/11.\n * 2. Remove padding so people aren't caught out if they zero out fieldsets.\n */\n\nlegend {\n  border: 0; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Remove default vertical scrollbar in IE 8/9/10/11.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * Don't inherit the `font-weight` (applied by a rule above).\n * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.\n */\n\noptgroup {\n  font-weight: bold;\n}\n\n/* Tables\n   ========================================================================== */\n\n/**\n * Remove most spacing between table cells.\n */\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\ntd, th {\n  padding: 0;\n}\n", ""]);
	
	// exports


/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(536);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(286)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../../css-loader/index.js!./../../../postcss-loader/index.js!./bootstrap.css", function() {
				var newContent = require("!!./../../../css-loader/index.js!./../../../postcss-loader/index.js!./bootstrap.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(285)();
	// imports
	
	
	// module
	exports.push([module.id, "/*!\n * Bootstrap v3.3.6 (http://getbootstrap.com)\n * Copyright 2011-2015 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n */\n/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\nhtml {\n  font-family: sans-serif;\n  -webkit-text-size-adjust: 100%;\n      -ms-text-size-adjust: 100%;\n}\nbody {\n  margin: 0;\n}\narticle, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {\n  display: block;\n}\naudio, canvas, progress, video {\n  display: inline-block;\n  vertical-align: baseline;\n}\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n[hidden], template {\n  display: none;\n}\na {\n  background-color: transparent;\n}\na:active, a:hover {\n  outline: 0;\n}\nabbr[title] {\n  border-bottom: 1px dotted;\n}\nb, strong {\n  font-weight: bold;\n}\ndfn {\n  font-style: italic;\n}\nh1 {\n  margin: .67em 0;\n  font-size: 2em;\n}\nmark {\n  color: #000;\n  background: #ff0;\n}\nsmall {\n  font-size: 80%;\n}\nsub, sup {\n  position: relative;\n  font-size: 75%;\n  line-height: 0;\n  vertical-align: baseline;\n}\nsup {\n  top: -.5em;\n}\nsub {\n  bottom: -.25em;\n}\nimg {\n  border: 0;\n}\nsvg:not(:root) {\n  overflow: hidden;\n}\nfigure {\n  margin: 1em 40px;\n}\nhr {\n  height: 0;\n  box-sizing: content-box;\n}\npre {\n  overflow: auto;\n}\ncode, kbd, pre, samp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\nbutton, input, optgroup, select, textarea {\n  margin: 0;\n  font: inherit;\n  color: inherit;\n}\nbutton {\n  overflow: visible;\n}\nbutton, select {\n  text-transform: none;\n}\nbutton, html input[type=\"button\"], input[type=\"reset\"], input[type=\"submit\"] {\n  -webkit-appearance: button;\n  cursor: pointer;\n}\nbutton[disabled], html input[disabled] {\n  cursor: default;\n}\nbutton::-moz-focus-inner, input::-moz-focus-inner {\n  padding: 0;\n  border: 0;\n}\ninput {\n  line-height: normal;\n}\ninput[type=\"checkbox\"], input[type=\"radio\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\ninput[type=\"number\"]::-webkit-inner-spin-button, input[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\ninput[type=\"search\"] {\n  box-sizing: content-box;\n  -webkit-appearance: textfield;\n}\ninput[type=\"search\"]::-webkit-search-cancel-button, input[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\nfieldset {\n  padding: .35em .625em .75em;\n  margin: 0 2px;\n  border: 1px solid #c0c0c0;\n}\nlegend {\n  padding: 0;\n  border: 0;\n}\ntextarea {\n  overflow: auto;\n}\noptgroup {\n  font-weight: bold;\n}\ntable {\n  border-spacing: 0;\n  border-collapse: collapse;\n}\ntd, th {\n  padding: 0;\n}\n/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */\n@media print {\n  *, *:before, *:after {\n    color: #000 !important;\n    text-shadow: none !important;\n    background: transparent !important;\n    box-shadow: none !important;\n  }\n  a, a:visited {\n    text-decoration: underline;\n  }\n  a[href]:after {\n    content: \" (\" attr(href) \")\";\n  }\n  abbr[title]:after {\n    content: \" (\" attr(title) \")\";\n  }\n  a[href^=\"#\"]:after, a[href^=\"javascript:\"]:after {\n    content: \"\";\n  }\n  pre, blockquote {\n    border: 1px solid #999;\n\n    page-break-inside: avoid;\n  }\n  thead {\n    display: table-header-group;\n  }\n  tr, img {\n    page-break-inside: avoid;\n  }\n  img {\n    max-width: 100% !important;\n  }\n  p, h2, h3 {\n    orphans: 3;\n    widows: 3;\n  }\n  h2, h3 {\n    page-break-after: avoid;\n  }\n  .navbar {\n    display: none;\n  }\n  .btn > .caret, .dropup > .btn > .caret {\n    border-top-color: #000 !important;\n  }\n  .label {\n    border: 1px solid #000;\n  }\n  .table {\n    border-collapse: collapse !important;\n  }\n  .table td, .table th {\n    background-color: #fff !important;\n  }\n  .table-bordered th, .table-bordered td {\n    border: 1px solid #ddd !important;\n  }\n}\n@font-face {\n  font-family: 'Glyphicons Halflings';\n\n  src: url(" + __webpack_require__(537) + ");\n  src: url(" + __webpack_require__(537) + "?#iefix) format('embedded-opentype'), url(" + __webpack_require__(538) + ") format('woff2'), url(" + __webpack_require__(539) + ") format('woff'), url(" + __webpack_require__(540) + ") format('truetype'), url(" + __webpack_require__(541) + "#glyphicons_halflingsregular) format('svg');\n}\n.glyphicon {\n  position: relative;\n  top: 1px;\n  display: inline-block;\n  font-family: 'Glyphicons Halflings';\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1;\n\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.glyphicon-asterisk:before {\n  content: \"*\";\n}\n.glyphicon-plus:before {\n  content: \"+\";\n}\n.glyphicon-euro:before, .glyphicon-eur:before {\n  content: \"\\20AC\";\n}\n.glyphicon-minus:before {\n  content: \"\\2212\";\n}\n.glyphicon-cloud:before {\n  content: \"\\2601\";\n}\n.glyphicon-envelope:before {\n  content: \"\\2709\";\n}\n.glyphicon-pencil:before {\n  content: \"\\270F\";\n}\n.glyphicon-glass:before {\n  content: \"\\E001\";\n}\n.glyphicon-music:before {\n  content: \"\\E002\";\n}\n.glyphicon-search:before {\n  content: \"\\E003\";\n}\n.glyphicon-heart:before {\n  content: \"\\E005\";\n}\n.glyphicon-star:before {\n  content: \"\\E006\";\n}\n.glyphicon-star-empty:before {\n  content: \"\\E007\";\n}\n.glyphicon-user:before {\n  content: \"\\E008\";\n}\n.glyphicon-film:before {\n  content: \"\\E009\";\n}\n.glyphicon-th-large:before {\n  content: \"\\E010\";\n}\n.glyphicon-th:before {\n  content: \"\\E011\";\n}\n.glyphicon-th-list:before {\n  content: \"\\E012\";\n}\n.glyphicon-ok:before {\n  content: \"\\E013\";\n}\n.glyphicon-remove:before {\n  content: \"\\E014\";\n}\n.glyphicon-zoom-in:before {\n  content: \"\\E015\";\n}\n.glyphicon-zoom-out:before {\n  content: \"\\E016\";\n}\n.glyphicon-off:before {\n  content: \"\\E017\";\n}\n.glyphicon-signal:before {\n  content: \"\\E018\";\n}\n.glyphicon-cog:before {\n  content: \"\\E019\";\n}\n.glyphicon-trash:before {\n  content: \"\\E020\";\n}\n.glyphicon-home:before {\n  content: \"\\E021\";\n}\n.glyphicon-file:before {\n  content: \"\\E022\";\n}\n.glyphicon-time:before {\n  content: \"\\E023\";\n}\n.glyphicon-road:before {\n  content: \"\\E024\";\n}\n.glyphicon-download-alt:before {\n  content: \"\\E025\";\n}\n.glyphicon-download:before {\n  content: \"\\E026\";\n}\n.glyphicon-upload:before {\n  content: \"\\E027\";\n}\n.glyphicon-inbox:before {\n  content: \"\\E028\";\n}\n.glyphicon-play-circle:before {\n  content: \"\\E029\";\n}\n.glyphicon-repeat:before {\n  content: \"\\E030\";\n}\n.glyphicon-refresh:before {\n  content: \"\\E031\";\n}\n.glyphicon-list-alt:before {\n  content: \"\\E032\";\n}\n.glyphicon-lock:before {\n  content: \"\\E033\";\n}\n.glyphicon-flag:before {\n  content: \"\\E034\";\n}\n.glyphicon-headphones:before {\n  content: \"\\E035\";\n}\n.glyphicon-volume-off:before {\n  content: \"\\E036\";\n}\n.glyphicon-volume-down:before {\n  content: \"\\E037\";\n}\n.glyphicon-volume-up:before {\n  content: \"\\E038\";\n}\n.glyphicon-qrcode:before {\n  content: \"\\E039\";\n}\n.glyphicon-barcode:before {\n  content: \"\\E040\";\n}\n.glyphicon-tag:before {\n  content: \"\\E041\";\n}\n.glyphicon-tags:before {\n  content: \"\\E042\";\n}\n.glyphicon-book:before {\n  content: \"\\E043\";\n}\n.glyphicon-bookmark:before {\n  content: \"\\E044\";\n}\n.glyphicon-print:before {\n  content: \"\\E045\";\n}\n.glyphicon-camera:before {\n  content: \"\\E046\";\n}\n.glyphicon-font:before {\n  content: \"\\E047\";\n}\n.glyphicon-bold:before {\n  content: \"\\E048\";\n}\n.glyphicon-italic:before {\n  content: \"\\E049\";\n}\n.glyphicon-text-height:before {\n  content: \"\\E050\";\n}\n.glyphicon-text-width:before {\n  content: \"\\E051\";\n}\n.glyphicon-align-left:before {\n  content: \"\\E052\";\n}\n.glyphicon-align-center:before {\n  content: \"\\E053\";\n}\n.glyphicon-align-right:before {\n  content: \"\\E054\";\n}\n.glyphicon-align-justify:before {\n  content: \"\\E055\";\n}\n.glyphicon-list:before {\n  content: \"\\E056\";\n}\n.glyphicon-indent-left:before {\n  content: \"\\E057\";\n}\n.glyphicon-indent-right:before {\n  content: \"\\E058\";\n}\n.glyphicon-facetime-video:before {\n  content: \"\\E059\";\n}\n.glyphicon-picture:before {\n  content: \"\\E060\";\n}\n.glyphicon-map-marker:before {\n  content: \"\\E062\";\n}\n.glyphicon-adjust:before {\n  content: \"\\E063\";\n}\n.glyphicon-tint:before {\n  content: \"\\E064\";\n}\n.glyphicon-edit:before {\n  content: \"\\E065\";\n}\n.glyphicon-share:before {\n  content: \"\\E066\";\n}\n.glyphicon-check:before {\n  content: \"\\E067\";\n}\n.glyphicon-move:before {\n  content: \"\\E068\";\n}\n.glyphicon-step-backward:before {\n  content: \"\\E069\";\n}\n.glyphicon-fast-backward:before {\n  content: \"\\E070\";\n}\n.glyphicon-backward:before {\n  content: \"\\E071\";\n}\n.glyphicon-play:before {\n  content: \"\\E072\";\n}\n.glyphicon-pause:before {\n  content: \"\\E073\";\n}\n.glyphicon-stop:before {\n  content: \"\\E074\";\n}\n.glyphicon-forward:before {\n  content: \"\\E075\";\n}\n.glyphicon-fast-forward:before {\n  content: \"\\E076\";\n}\n.glyphicon-step-forward:before {\n  content: \"\\E077\";\n}\n.glyphicon-eject:before {\n  content: \"\\E078\";\n}\n.glyphicon-chevron-left:before {\n  content: \"\\E079\";\n}\n.glyphicon-chevron-right:before {\n  content: \"\\E080\";\n}\n.glyphicon-plus-sign:before {\n  content: \"\\E081\";\n}\n.glyphicon-minus-sign:before {\n  content: \"\\E082\";\n}\n.glyphicon-remove-sign:before {\n  content: \"\\E083\";\n}\n.glyphicon-ok-sign:before {\n  content: \"\\E084\";\n}\n.glyphicon-question-sign:before {\n  content: \"\\E085\";\n}\n.glyphicon-info-sign:before {\n  content: \"\\E086\";\n}\n.glyphicon-screenshot:before {\n  content: \"\\E087\";\n}\n.glyphicon-remove-circle:before {\n  content: \"\\E088\";\n}\n.glyphicon-ok-circle:before {\n  content: \"\\E089\";\n}\n.glyphicon-ban-circle:before {\n  content: \"\\E090\";\n}\n.glyphicon-arrow-left:before {\n  content: \"\\E091\";\n}\n.glyphicon-arrow-right:before {\n  content: \"\\E092\";\n}\n.glyphicon-arrow-up:before {\n  content: \"\\E093\";\n}\n.glyphicon-arrow-down:before {\n  content: \"\\E094\";\n}\n.glyphicon-share-alt:before {\n  content: \"\\E095\";\n}\n.glyphicon-resize-full:before {\n  content: \"\\E096\";\n}\n.glyphicon-resize-small:before {\n  content: \"\\E097\";\n}\n.glyphicon-exclamation-sign:before {\n  content: \"\\E101\";\n}\n.glyphicon-gift:before {\n  content: \"\\E102\";\n}\n.glyphicon-leaf:before {\n  content: \"\\E103\";\n}\n.glyphicon-fire:before {\n  content: \"\\E104\";\n}\n.glyphicon-eye-open:before {\n  content: \"\\E105\";\n}\n.glyphicon-eye-close:before {\n  content: \"\\E106\";\n}\n.glyphicon-warning-sign:before {\n  content: \"\\E107\";\n}\n.glyphicon-plane:before {\n  content: \"\\E108\";\n}\n.glyphicon-calendar:before {\n  content: \"\\E109\";\n}\n.glyphicon-random:before {\n  content: \"\\E110\";\n}\n.glyphicon-comment:before {\n  content: \"\\E111\";\n}\n.glyphicon-magnet:before {\n  content: \"\\E112\";\n}\n.glyphicon-chevron-up:before {\n  content: \"\\E113\";\n}\n.glyphicon-chevron-down:before {\n  content: \"\\E114\";\n}\n.glyphicon-retweet:before {\n  content: \"\\E115\";\n}\n.glyphicon-shopping-cart:before {\n  content: \"\\E116\";\n}\n.glyphicon-folder-close:before {\n  content: \"\\E117\";\n}\n.glyphicon-folder-open:before {\n  content: \"\\E118\";\n}\n.glyphicon-resize-vertical:before {\n  content: \"\\E119\";\n}\n.glyphicon-resize-horizontal:before {\n  content: \"\\E120\";\n}\n.glyphicon-hdd:before {\n  content: \"\\E121\";\n}\n.glyphicon-bullhorn:before {\n  content: \"\\E122\";\n}\n.glyphicon-bell:before {\n  content: \"\\E123\";\n}\n.glyphicon-certificate:before {\n  content: \"\\E124\";\n}\n.glyphicon-thumbs-up:before {\n  content: \"\\E125\";\n}\n.glyphicon-thumbs-down:before {\n  content: \"\\E126\";\n}\n.glyphicon-hand-right:before {\n  content: \"\\E127\";\n}\n.glyphicon-hand-left:before {\n  content: \"\\E128\";\n}\n.glyphicon-hand-up:before {\n  content: \"\\E129\";\n}\n.glyphicon-hand-down:before {\n  content: \"\\E130\";\n}\n.glyphicon-circle-arrow-right:before {\n  content: \"\\E131\";\n}\n.glyphicon-circle-arrow-left:before {\n  content: \"\\E132\";\n}\n.glyphicon-circle-arrow-up:before {\n  content: \"\\E133\";\n}\n.glyphicon-circle-arrow-down:before {\n  content: \"\\E134\";\n}\n.glyphicon-globe:before {\n  content: \"\\E135\";\n}\n.glyphicon-wrench:before {\n  content: \"\\E136\";\n}\n.glyphicon-tasks:before {\n  content: \"\\E137\";\n}\n.glyphicon-filter:before {\n  content: \"\\E138\";\n}\n.glyphicon-briefcase:before {\n  content: \"\\E139\";\n}\n.glyphicon-fullscreen:before {\n  content: \"\\E140\";\n}\n.glyphicon-dashboard:before {\n  content: \"\\E141\";\n}\n.glyphicon-paperclip:before {\n  content: \"\\E142\";\n}\n.glyphicon-heart-empty:before {\n  content: \"\\E143\";\n}\n.glyphicon-link:before {\n  content: \"\\E144\";\n}\n.glyphicon-phone:before {\n  content: \"\\E145\";\n}\n.glyphicon-pushpin:before {\n  content: \"\\E146\";\n}\n.glyphicon-usd:before {\n  content: \"\\E148\";\n}\n.glyphicon-gbp:before {\n  content: \"\\E149\";\n}\n.glyphicon-sort:before {\n  content: \"\\E150\";\n}\n.glyphicon-sort-by-alphabet:before {\n  content: \"\\E151\";\n}\n.glyphicon-sort-by-alphabet-alt:before {\n  content: \"\\E152\";\n}\n.glyphicon-sort-by-order:before {\n  content: \"\\E153\";\n}\n.glyphicon-sort-by-order-alt:before {\n  content: \"\\E154\";\n}\n.glyphicon-sort-by-attributes:before {\n  content: \"\\E155\";\n}\n.glyphicon-sort-by-attributes-alt:before {\n  content: \"\\E156\";\n}\n.glyphicon-unchecked:before {\n  content: \"\\E157\";\n}\n.glyphicon-expand:before {\n  content: \"\\E158\";\n}\n.glyphicon-collapse-down:before {\n  content: \"\\E159\";\n}\n.glyphicon-collapse-up:before {\n  content: \"\\E160\";\n}\n.glyphicon-log-in:before {\n  content: \"\\E161\";\n}\n.glyphicon-flash:before {\n  content: \"\\E162\";\n}\n.glyphicon-log-out:before {\n  content: \"\\E163\";\n}\n.glyphicon-new-window:before {\n  content: \"\\E164\";\n}\n.glyphicon-record:before {\n  content: \"\\E165\";\n}\n.glyphicon-save:before {\n  content: \"\\E166\";\n}\n.glyphicon-open:before {\n  content: \"\\E167\";\n}\n.glyphicon-saved:before {\n  content: \"\\E168\";\n}\n.glyphicon-import:before {\n  content: \"\\E169\";\n}\n.glyphicon-export:before {\n  content: \"\\E170\";\n}\n.glyphicon-send:before {\n  content: \"\\E171\";\n}\n.glyphicon-floppy-disk:before {\n  content: \"\\E172\";\n}\n.glyphicon-floppy-saved:before {\n  content: \"\\E173\";\n}\n.glyphicon-floppy-remove:before {\n  content: \"\\E174\";\n}\n.glyphicon-floppy-save:before {\n  content: \"\\E175\";\n}\n.glyphicon-floppy-open:before {\n  content: \"\\E176\";\n}\n.glyphicon-credit-card:before {\n  content: \"\\E177\";\n}\n.glyphicon-transfer:before {\n  content: \"\\E178\";\n}\n.glyphicon-cutlery:before {\n  content: \"\\E179\";\n}\n.glyphicon-header:before {\n  content: \"\\E180\";\n}\n.glyphicon-compressed:before {\n  content: \"\\E181\";\n}\n.glyphicon-earphone:before {\n  content: \"\\E182\";\n}\n.glyphicon-phone-alt:before {\n  content: \"\\E183\";\n}\n.glyphicon-tower:before {\n  content: \"\\E184\";\n}\n.glyphicon-stats:before {\n  content: \"\\E185\";\n}\n.glyphicon-sd-video:before {\n  content: \"\\E186\";\n}\n.glyphicon-hd-video:before {\n  content: \"\\E187\";\n}\n.glyphicon-subtitles:before {\n  content: \"\\E188\";\n}\n.glyphicon-sound-stereo:before {\n  content: \"\\E189\";\n}\n.glyphicon-sound-dolby:before {\n  content: \"\\E190\";\n}\n.glyphicon-sound-5-1:before {\n  content: \"\\E191\";\n}\n.glyphicon-sound-6-1:before {\n  content: \"\\E192\";\n}\n.glyphicon-sound-7-1:before {\n  content: \"\\E193\";\n}\n.glyphicon-copyright-mark:before {\n  content: \"\\E194\";\n}\n.glyphicon-registration-mark:before {\n  content: \"\\E195\";\n}\n.glyphicon-cloud-download:before {\n  content: \"\\E197\";\n}\n.glyphicon-cloud-upload:before {\n  content: \"\\E198\";\n}\n.glyphicon-tree-conifer:before {\n  content: \"\\E199\";\n}\n.glyphicon-tree-deciduous:before {\n  content: \"\\E200\";\n}\n.glyphicon-cd:before {\n  content: \"\\E201\";\n}\n.glyphicon-save-file:before {\n  content: \"\\E202\";\n}\n.glyphicon-open-file:before {\n  content: \"\\E203\";\n}\n.glyphicon-level-up:before {\n  content: \"\\E204\";\n}\n.glyphicon-copy:before {\n  content: \"\\E205\";\n}\n.glyphicon-paste:before {\n  content: \"\\E206\";\n}\n.glyphicon-alert:before {\n  content: \"\\E209\";\n}\n.glyphicon-equalizer:before {\n  content: \"\\E210\";\n}\n.glyphicon-king:before {\n  content: \"\\E211\";\n}\n.glyphicon-queen:before {\n  content: \"\\E212\";\n}\n.glyphicon-pawn:before {\n  content: \"\\E213\";\n}\n.glyphicon-bishop:before {\n  content: \"\\E214\";\n}\n.glyphicon-knight:before {\n  content: \"\\E215\";\n}\n.glyphicon-baby-formula:before {\n  content: \"\\E216\";\n}\n.glyphicon-tent:before {\n  content: \"\\26FA\";\n}\n.glyphicon-blackboard:before {\n  content: \"\\E218\";\n}\n.glyphicon-bed:before {\n  content: \"\\E219\";\n}\n.glyphicon-apple:before {\n  content: \"\\F8FF\";\n}\n.glyphicon-erase:before {\n  content: \"\\E221\";\n}\n.glyphicon-hourglass:before {\n  content: \"\\231B\";\n}\n.glyphicon-lamp:before {\n  content: \"\\E223\";\n}\n.glyphicon-duplicate:before {\n  content: \"\\E224\";\n}\n.glyphicon-piggy-bank:before {\n  content: \"\\E225\";\n}\n.glyphicon-scissors:before {\n  content: \"\\E226\";\n}\n.glyphicon-bitcoin:before {\n  content: \"\\E227\";\n}\n.glyphicon-btc:before {\n  content: \"\\E227\";\n}\n.glyphicon-xbt:before {\n  content: \"\\E227\";\n}\n.glyphicon-yen:before {\n  content: \"\\A5\";\n}\n.glyphicon-jpy:before {\n  content: \"\\A5\";\n}\n.glyphicon-ruble:before {\n  content: \"\\20BD\";\n}\n.glyphicon-rub:before {\n  content: \"\\20BD\";\n}\n.glyphicon-scale:before {\n  content: \"\\E230\";\n}\n.glyphicon-ice-lolly:before {\n  content: \"\\E231\";\n}\n.glyphicon-ice-lolly-tasted:before {\n  content: \"\\E232\";\n}\n.glyphicon-education:before {\n  content: \"\\E233\";\n}\n.glyphicon-option-horizontal:before {\n  content: \"\\E234\";\n}\n.glyphicon-option-vertical:before {\n  content: \"\\E235\";\n}\n.glyphicon-menu-hamburger:before {\n  content: \"\\E236\";\n}\n.glyphicon-modal-window:before {\n  content: \"\\E237\";\n}\n.glyphicon-oil:before {\n  content: \"\\E238\";\n}\n.glyphicon-grain:before {\n  content: \"\\E239\";\n}\n.glyphicon-sunglasses:before {\n  content: \"\\E240\";\n}\n.glyphicon-text-size:before {\n  content: \"\\E241\";\n}\n.glyphicon-text-color:before {\n  content: \"\\E242\";\n}\n.glyphicon-text-background:before {\n  content: \"\\E243\";\n}\n.glyphicon-object-align-top:before {\n  content: \"\\E244\";\n}\n.glyphicon-object-align-bottom:before {\n  content: \"\\E245\";\n}\n.glyphicon-object-align-horizontal:before {\n  content: \"\\E246\";\n}\n.glyphicon-object-align-left:before {\n  content: \"\\E247\";\n}\n.glyphicon-object-align-vertical:before {\n  content: \"\\E248\";\n}\n.glyphicon-object-align-right:before {\n  content: \"\\E249\";\n}\n.glyphicon-triangle-right:before {\n  content: \"\\E250\";\n}\n.glyphicon-triangle-left:before {\n  content: \"\\E251\";\n}\n.glyphicon-triangle-bottom:before {\n  content: \"\\E252\";\n}\n.glyphicon-triangle-top:before {\n  content: \"\\E253\";\n}\n.glyphicon-console:before {\n  content: \"\\E254\";\n}\n.glyphicon-superscript:before {\n  content: \"\\E255\";\n}\n.glyphicon-subscript:before {\n  content: \"\\E256\";\n}\n.glyphicon-menu-left:before {\n  content: \"\\E257\";\n}\n.glyphicon-menu-right:before {\n  content: \"\\E258\";\n}\n.glyphicon-menu-down:before {\n  content: \"\\E259\";\n}\n.glyphicon-menu-up:before {\n  content: \"\\E260\";\n}\n* {\n  box-sizing: border-box;\n}\n*:before, *:after {\n  box-sizing: border-box;\n}\nhtml {\n  font-size: 10px;\n\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\nbody {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #333;\n  background-color: #fff;\n}\ninput, button, select, textarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\na {\n  color: #337ab7;\n  text-decoration: none;\n}\na:hover, a:focus {\n  color: #23527c;\n  text-decoration: underline;\n}\na:focus {\n  outline: thin dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\nfigure {\n  margin: 0;\n}\nimg {\n  vertical-align: middle;\n}\n.img-responsive, .thumbnail > img, .thumbnail a > img, .carousel-inner > .item > img, .carousel-inner > .item > a > img {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n.img-rounded {\n  border-radius: 6px;\n}\n.img-thumbnail {\n  display: inline-block;\n  max-width: 100%;\n  height: auto;\n  padding: 4px;\n  line-height: 1.42857143;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  -webkit-transition: all .2s ease-in-out;\n          transition: all .2s ease-in-out;\n}\n.img-circle {\n  border-radius: 50%;\n}\nhr {\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 0;\n  border-top: 1px solid #eee;\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n.sr-only-focusable:active, .sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  clip: auto;\n}\n[role=\"button\"] {\n  cursor: pointer;\n}\nh1, h2, h3, h4, h5, h6, .h1, .h2, .h3, .h4, .h5, .h6 {\n  font-family: inherit;\n  font-weight: 500;\n  line-height: 1.1;\n  color: inherit;\n}\nh1 small, h2 small, h3 small, h4 small, h5 small, h6 small, .h1 small, .h2 small, .h3 small, .h4 small, .h5 small, .h6 small, h1 .small, h2 .small, h3 .small, h4 .small, h5 .small, h6 .small, .h1 .small, .h2 .small, .h3 .small, .h4 .small, .h5 .small, .h6 .small {\n  font-weight: normal;\n  line-height: 1;\n  color: #777;\n}\nh1, .h1, h2, .h2, h3, .h3 {\n  margin-top: 20px;\n  margin-bottom: 10px;\n}\nh1 small, .h1 small, h2 small, .h2 small, h3 small, .h3 small, h1 .small, .h1 .small, h2 .small, .h2 .small, h3 .small, .h3 .small {\n  font-size: 65%;\n}\nh4, .h4, h5, .h5, h6, .h6 {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\nh4 small, .h4 small, h5 small, .h5 small, h6 small, .h6 small, h4 .small, .h4 .small, h5 .small, .h5 .small, h6 .small, .h6 .small {\n  font-size: 75%;\n}\nh1, .h1 {\n  font-size: 36px;\n}\nh2, .h2 {\n  font-size: 30px;\n}\nh3, .h3 {\n  font-size: 24px;\n}\nh4, .h4 {\n  font-size: 18px;\n}\nh5, .h5 {\n  font-size: 14px;\n}\nh6, .h6 {\n  font-size: 12px;\n}\np {\n  margin: 0 0 10px;\n}\n.lead {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 300;\n  line-height: 1.4;\n}\n@media (min-width: 768px) {\n  .lead {\n    font-size: 21px;\n  }\n}\nsmall, .small {\n  font-size: 85%;\n}\nmark, .mark {\n  padding: .2em;\n  background-color: #fcf8e3;\n}\n.text-left {\n  text-align: left;\n}\n.text-right {\n  text-align: right;\n}\n.text-center {\n  text-align: center;\n}\n.text-justify {\n  text-align: justify;\n}\n.text-nowrap {\n  white-space: nowrap;\n}\n.text-lowercase {\n  text-transform: lowercase;\n}\n.text-uppercase {\n  text-transform: uppercase;\n}\n.text-capitalize {\n  text-transform: capitalize;\n}\n.text-muted {\n  color: #777;\n}\n.text-primary {\n  color: #337ab7;\n}\na.text-primary:hover, a.text-primary:focus {\n  color: #286090;\n}\n.text-success {\n  color: #3c763d;\n}\na.text-success:hover, a.text-success:focus {\n  color: #2b542c;\n}\n.text-info {\n  color: #31708f;\n}\na.text-info:hover, a.text-info:focus {\n  color: #245269;\n}\n.text-warning {\n  color: #8a6d3b;\n}\na.text-warning:hover, a.text-warning:focus {\n  color: #66512c;\n}\n.text-danger {\n  color: #a94442;\n}\na.text-danger:hover, a.text-danger:focus {\n  color: #843534;\n}\n.bg-primary {\n  color: #fff;\n  background-color: #337ab7;\n}\na.bg-primary:hover, a.bg-primary:focus {\n  background-color: #286090;\n}\n.bg-success {\n  background-color: #dff0d8;\n}\na.bg-success:hover, a.bg-success:focus {\n  background-color: #c1e2b3;\n}\n.bg-info {\n  background-color: #d9edf7;\n}\na.bg-info:hover, a.bg-info:focus {\n  background-color: #afd9ee;\n}\n.bg-warning {\n  background-color: #fcf8e3;\n}\na.bg-warning:hover, a.bg-warning:focus {\n  background-color: #f7ecb5;\n}\n.bg-danger {\n  background-color: #f2dede;\n}\na.bg-danger:hover, a.bg-danger:focus {\n  background-color: #e4b9b9;\n}\n.page-header {\n  padding-bottom: 9px;\n  margin: 40px 0 20px;\n  border-bottom: 1px solid #eee;\n}\nul, ol {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\nul ul, ol ul, ul ol, ol ol {\n  margin-bottom: 0;\n}\n.list-unstyled {\n  padding-left: 0;\n  list-style: none;\n}\n.list-inline {\n  padding-left: 0;\n  margin-left: -5px;\n  list-style: none;\n}\n.list-inline > li {\n  display: inline-block;\n  padding-right: 5px;\n  padding-left: 5px;\n}\ndl {\n  margin-top: 0;\n  margin-bottom: 20px;\n}\ndt, dd {\n  line-height: 1.42857143;\n}\ndt {\n  font-weight: bold;\n}\ndd {\n  margin-left: 0;\n}\n@media (min-width: 768px) {\n  .dl-horizontal dt {\n    float: left;\n    width: 160px;\n    overflow: hidden;\n    clear: left;\n    text-align: right;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n  .dl-horizontal dd {\n    margin-left: 180px;\n  }\n}\nabbr[title], abbr[data-original-title] {\n  cursor: help;\n  border-bottom: 1px dotted #777;\n}\n.initialism {\n  font-size: 90%;\n  text-transform: uppercase;\n}\nblockquote {\n  padding: 10px 20px;\n  margin: 0 0 20px;\n  font-size: 17.5px;\n  border-left: 5px solid #eee;\n}\nblockquote p:last-child, blockquote ul:last-child, blockquote ol:last-child {\n  margin-bottom: 0;\n}\nblockquote footer, blockquote small, blockquote .small {\n  display: block;\n  font-size: 80%;\n  line-height: 1.42857143;\n  color: #777;\n}\nblockquote footer:before, blockquote small:before, blockquote .small:before {\n  content: '\\2014   \\A0';\n}\n.blockquote-reverse, blockquote.pull-right {\n  padding-right: 15px;\n  padding-left: 0;\n  text-align: right;\n  border-right: 5px solid #eee;\n  border-left: 0;\n}\n.blockquote-reverse footer:before, blockquote.pull-right footer:before, .blockquote-reverse small:before, blockquote.pull-right small:before, .blockquote-reverse .small:before, blockquote.pull-right .small:before {\n  content: '';\n}\n.blockquote-reverse footer:after, blockquote.pull-right footer:after, .blockquote-reverse small:after, blockquote.pull-right small:after, .blockquote-reverse .small:after, blockquote.pull-right .small:after {\n  content: '\\A0   \\2014';\n}\naddress {\n  margin-bottom: 20px;\n  font-style: normal;\n  line-height: 1.42857143;\n}\ncode, kbd, pre, samp {\n  font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\n}\ncode {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #c7254e;\n  background-color: #f9f2f4;\n  border-radius: 4px;\n}\nkbd {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #fff;\n  background-color: #333;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .25);\n}\nkbd kbd {\n  padding: 0;\n  font-size: 100%;\n  font-weight: bold;\n  box-shadow: none;\n}\npre {\n  display: block;\n  padding: 9.5px;\n  margin: 0 0 10px;\n  font-size: 13px;\n  line-height: 1.42857143;\n  color: #333;\n  word-break: break-all;\n  word-wrap: break-word;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\npre code {\n  padding: 0;\n  font-size: inherit;\n  color: inherit;\n  white-space: pre-wrap;\n  background-color: transparent;\n  border-radius: 0;\n}\n.pre-scrollable {\n  max-height: 340px;\n  overflow-y: scroll;\n}\n.container {\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n@media (min-width: 768px) {\n  .container {\n    width: 750px;\n  }\n}\n@media (min-width: 992px) {\n  .container {\n    width: 970px;\n  }\n}\n@media (min-width: 1200px) {\n  .container {\n    width: 1170px;\n  }\n}\n.container-fluid {\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n}\n.row {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {\n  position: relative;\n  min-height: 1px;\n  padding-right: 15px;\n  padding-left: 15px;\n}\n.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 {\n  float: left;\n}\n.col-xs-12 {\n  width: 100%;\n}\n.col-xs-11 {\n  width: 91.66666667%;\n}\n.col-xs-10 {\n  width: 83.33333333%;\n}\n.col-xs-9 {\n  width: 75%;\n}\n.col-xs-8 {\n  width: 66.66666667%;\n}\n.col-xs-7 {\n  width: 58.33333333%;\n}\n.col-xs-6 {\n  width: 50%;\n}\n.col-xs-5 {\n  width: 41.66666667%;\n}\n.col-xs-4 {\n  width: 33.33333333%;\n}\n.col-xs-3 {\n  width: 25%;\n}\n.col-xs-2 {\n  width: 16.66666667%;\n}\n.col-xs-1 {\n  width: 8.33333333%;\n}\n.col-xs-pull-12 {\n  right: 100%;\n}\n.col-xs-pull-11 {\n  right: 91.66666667%;\n}\n.col-xs-pull-10 {\n  right: 83.33333333%;\n}\n.col-xs-pull-9 {\n  right: 75%;\n}\n.col-xs-pull-8 {\n  right: 66.66666667%;\n}\n.col-xs-pull-7 {\n  right: 58.33333333%;\n}\n.col-xs-pull-6 {\n  right: 50%;\n}\n.col-xs-pull-5 {\n  right: 41.66666667%;\n}\n.col-xs-pull-4 {\n  right: 33.33333333%;\n}\n.col-xs-pull-3 {\n  right: 25%;\n}\n.col-xs-pull-2 {\n  right: 16.66666667%;\n}\n.col-xs-pull-1 {\n  right: 8.33333333%;\n}\n.col-xs-pull-0 {\n  right: auto;\n}\n.col-xs-push-12 {\n  left: 100%;\n}\n.col-xs-push-11 {\n  left: 91.66666667%;\n}\n.col-xs-push-10 {\n  left: 83.33333333%;\n}\n.col-xs-push-9 {\n  left: 75%;\n}\n.col-xs-push-8 {\n  left: 66.66666667%;\n}\n.col-xs-push-7 {\n  left: 58.33333333%;\n}\n.col-xs-push-6 {\n  left: 50%;\n}\n.col-xs-push-5 {\n  left: 41.66666667%;\n}\n.col-xs-push-4 {\n  left: 33.33333333%;\n}\n.col-xs-push-3 {\n  left: 25%;\n}\n.col-xs-push-2 {\n  left: 16.66666667%;\n}\n.col-xs-push-1 {\n  left: 8.33333333%;\n}\n.col-xs-push-0 {\n  left: auto;\n}\n.col-xs-offset-12 {\n  margin-left: 100%;\n}\n.col-xs-offset-11 {\n  margin-left: 91.66666667%;\n}\n.col-xs-offset-10 {\n  margin-left: 83.33333333%;\n}\n.col-xs-offset-9 {\n  margin-left: 75%;\n}\n.col-xs-offset-8 {\n  margin-left: 66.66666667%;\n}\n.col-xs-offset-7 {\n  margin-left: 58.33333333%;\n}\n.col-xs-offset-6 {\n  margin-left: 50%;\n}\n.col-xs-offset-5 {\n  margin-left: 41.66666667%;\n}\n.col-xs-offset-4 {\n  margin-left: 33.33333333%;\n}\n.col-xs-offset-3 {\n  margin-left: 25%;\n}\n.col-xs-offset-2 {\n  margin-left: 16.66666667%;\n}\n.col-xs-offset-1 {\n  margin-left: 8.33333333%;\n}\n.col-xs-offset-0 {\n  margin-left: 0;\n}\n@media (min-width: 768px) {\n  .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 {\n    float: left;\n  }\n  .col-sm-12 {\n    width: 100%;\n  }\n  .col-sm-11 {\n    width: 91.66666667%;\n  }\n  .col-sm-10 {\n    width: 83.33333333%;\n  }\n  .col-sm-9 {\n    width: 75%;\n  }\n  .col-sm-8 {\n    width: 66.66666667%;\n  }\n  .col-sm-7 {\n    width: 58.33333333%;\n  }\n  .col-sm-6 {\n    width: 50%;\n  }\n  .col-sm-5 {\n    width: 41.66666667%;\n  }\n  .col-sm-4 {\n    width: 33.33333333%;\n  }\n  .col-sm-3 {\n    width: 25%;\n  }\n  .col-sm-2 {\n    width: 16.66666667%;\n  }\n  .col-sm-1 {\n    width: 8.33333333%;\n  }\n  .col-sm-pull-12 {\n    right: 100%;\n  }\n  .col-sm-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-sm-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-sm-pull-9 {\n    right: 75%;\n  }\n  .col-sm-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-sm-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-sm-pull-6 {\n    right: 50%;\n  }\n  .col-sm-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-sm-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-sm-pull-3 {\n    right: 25%;\n  }\n  .col-sm-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-sm-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-sm-pull-0 {\n    right: auto;\n  }\n  .col-sm-push-12 {\n    left: 100%;\n  }\n  .col-sm-push-11 {\n    left: 91.66666667%;\n  }\n  .col-sm-push-10 {\n    left: 83.33333333%;\n  }\n  .col-sm-push-9 {\n    left: 75%;\n  }\n  .col-sm-push-8 {\n    left: 66.66666667%;\n  }\n  .col-sm-push-7 {\n    left: 58.33333333%;\n  }\n  .col-sm-push-6 {\n    left: 50%;\n  }\n  .col-sm-push-5 {\n    left: 41.66666667%;\n  }\n  .col-sm-push-4 {\n    left: 33.33333333%;\n  }\n  .col-sm-push-3 {\n    left: 25%;\n  }\n  .col-sm-push-2 {\n    left: 16.66666667%;\n  }\n  .col-sm-push-1 {\n    left: 8.33333333%;\n  }\n  .col-sm-push-0 {\n    left: auto;\n  }\n  .col-sm-offset-12 {\n    margin-left: 100%;\n  }\n  .col-sm-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-sm-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-sm-offset-9 {\n    margin-left: 75%;\n  }\n  .col-sm-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-sm-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-sm-offset-6 {\n    margin-left: 50%;\n  }\n  .col-sm-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-sm-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-sm-offset-3 {\n    margin-left: 25%;\n  }\n  .col-sm-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-sm-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-sm-offset-0 {\n    margin-left: 0;\n  }\n}\n@media (min-width: 992px) {\n  .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {\n    float: left;\n  }\n  .col-md-12 {\n    width: 100%;\n  }\n  .col-md-11 {\n    width: 91.66666667%;\n  }\n  .col-md-10 {\n    width: 83.33333333%;\n  }\n  .col-md-9 {\n    width: 75%;\n  }\n  .col-md-8 {\n    width: 66.66666667%;\n  }\n  .col-md-7 {\n    width: 58.33333333%;\n  }\n  .col-md-6 {\n    width: 50%;\n  }\n  .col-md-5 {\n    width: 41.66666667%;\n  }\n  .col-md-4 {\n    width: 33.33333333%;\n  }\n  .col-md-3 {\n    width: 25%;\n  }\n  .col-md-2 {\n    width: 16.66666667%;\n  }\n  .col-md-1 {\n    width: 8.33333333%;\n  }\n  .col-md-pull-12 {\n    right: 100%;\n  }\n  .col-md-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-md-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-md-pull-9 {\n    right: 75%;\n  }\n  .col-md-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-md-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-md-pull-6 {\n    right: 50%;\n  }\n  .col-md-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-md-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-md-pull-3 {\n    right: 25%;\n  }\n  .col-md-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-md-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-md-pull-0 {\n    right: auto;\n  }\n  .col-md-push-12 {\n    left: 100%;\n  }\n  .col-md-push-11 {\n    left: 91.66666667%;\n  }\n  .col-md-push-10 {\n    left: 83.33333333%;\n  }\n  .col-md-push-9 {\n    left: 75%;\n  }\n  .col-md-push-8 {\n    left: 66.66666667%;\n  }\n  .col-md-push-7 {\n    left: 58.33333333%;\n  }\n  .col-md-push-6 {\n    left: 50%;\n  }\n  .col-md-push-5 {\n    left: 41.66666667%;\n  }\n  .col-md-push-4 {\n    left: 33.33333333%;\n  }\n  .col-md-push-3 {\n    left: 25%;\n  }\n  .col-md-push-2 {\n    left: 16.66666667%;\n  }\n  .col-md-push-1 {\n    left: 8.33333333%;\n  }\n  .col-md-push-0 {\n    left: auto;\n  }\n  .col-md-offset-12 {\n    margin-left: 100%;\n  }\n  .col-md-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-md-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-md-offset-9 {\n    margin-left: 75%;\n  }\n  .col-md-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-md-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-md-offset-6 {\n    margin-left: 50%;\n  }\n  .col-md-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-md-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-md-offset-3 {\n    margin-left: 25%;\n  }\n  .col-md-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-md-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-md-offset-0 {\n    margin-left: 0;\n  }\n}\n@media (min-width: 1200px) {\n  .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 {\n    float: left;\n  }\n  .col-lg-12 {\n    width: 100%;\n  }\n  .col-lg-11 {\n    width: 91.66666667%;\n  }\n  .col-lg-10 {\n    width: 83.33333333%;\n  }\n  .col-lg-9 {\n    width: 75%;\n  }\n  .col-lg-8 {\n    width: 66.66666667%;\n  }\n  .col-lg-7 {\n    width: 58.33333333%;\n  }\n  .col-lg-6 {\n    width: 50%;\n  }\n  .col-lg-5 {\n    width: 41.66666667%;\n  }\n  .col-lg-4 {\n    width: 33.33333333%;\n  }\n  .col-lg-3 {\n    width: 25%;\n  }\n  .col-lg-2 {\n    width: 16.66666667%;\n  }\n  .col-lg-1 {\n    width: 8.33333333%;\n  }\n  .col-lg-pull-12 {\n    right: 100%;\n  }\n  .col-lg-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-lg-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-lg-pull-9 {\n    right: 75%;\n  }\n  .col-lg-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-lg-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-lg-pull-6 {\n    right: 50%;\n  }\n  .col-lg-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-lg-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-lg-pull-3 {\n    right: 25%;\n  }\n  .col-lg-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-lg-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-lg-pull-0 {\n    right: auto;\n  }\n  .col-lg-push-12 {\n    left: 100%;\n  }\n  .col-lg-push-11 {\n    left: 91.66666667%;\n  }\n  .col-lg-push-10 {\n    left: 83.33333333%;\n  }\n  .col-lg-push-9 {\n    left: 75%;\n  }\n  .col-lg-push-8 {\n    left: 66.66666667%;\n  }\n  .col-lg-push-7 {\n    left: 58.33333333%;\n  }\n  .col-lg-push-6 {\n    left: 50%;\n  }\n  .col-lg-push-5 {\n    left: 41.66666667%;\n  }\n  .col-lg-push-4 {\n    left: 33.33333333%;\n  }\n  .col-lg-push-3 {\n    left: 25%;\n  }\n  .col-lg-push-2 {\n    left: 16.66666667%;\n  }\n  .col-lg-push-1 {\n    left: 8.33333333%;\n  }\n  .col-lg-push-0 {\n    left: auto;\n  }\n  .col-lg-offset-12 {\n    margin-left: 100%;\n  }\n  .col-lg-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-lg-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-lg-offset-9 {\n    margin-left: 75%;\n  }\n  .col-lg-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-lg-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-lg-offset-6 {\n    margin-left: 50%;\n  }\n  .col-lg-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-lg-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-lg-offset-3 {\n    margin-left: 25%;\n  }\n  .col-lg-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-lg-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-lg-offset-0 {\n    margin-left: 0;\n  }\n}\ntable {\n  background-color: transparent;\n}\ncaption {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  color: #777;\n  text-align: left;\n}\nth {\n  text-align: left;\n}\n.table {\n  width: 100%;\n  max-width: 100%;\n  margin-bottom: 20px;\n}\n.table > thead > tr > th, .table > tbody > tr > th, .table > tfoot > tr > th, .table > thead > tr > td, .table > tbody > tr > td, .table > tfoot > tr > td {\n  padding: 8px;\n  line-height: 1.42857143;\n  vertical-align: top;\n  border-top: 1px solid #ddd;\n}\n.table > thead > tr > th {\n  vertical-align: bottom;\n  border-bottom: 2px solid #ddd;\n}\n.table > caption + thead > tr:first-child > th, .table > colgroup + thead > tr:first-child > th, .table > thead:first-child > tr:first-child > th, .table > caption + thead > tr:first-child > td, .table > colgroup + thead > tr:first-child > td, .table > thead:first-child > tr:first-child > td {\n  border-top: 0;\n}\n.table > tbody + tbody {\n  border-top: 2px solid #ddd;\n}\n.table .table {\n  background-color: #fff;\n}\n.table-condensed > thead > tr > th, .table-condensed > tbody > tr > th, .table-condensed > tfoot > tr > th, .table-condensed > thead > tr > td, .table-condensed > tbody > tr > td, .table-condensed > tfoot > tr > td {\n  padding: 5px;\n}\n.table-bordered {\n  border: 1px solid #ddd;\n}\n.table-bordered > thead > tr > th, .table-bordered > tbody > tr > th, .table-bordered > tfoot > tr > th, .table-bordered > thead > tr > td, .table-bordered > tbody > tr > td, .table-bordered > tfoot > tr > td {\n  border: 1px solid #ddd;\n}\n.table-bordered > thead > tr > th, .table-bordered > thead > tr > td {\n  border-bottom-width: 2px;\n}\n.table-striped > tbody > tr:nth-of-type(odd) {\n  background-color: #f9f9f9;\n}\n.table-hover > tbody > tr:hover {\n  background-color: #f5f5f5;\n}\ntable col[class*=\"col-\"] {\n  position: static;\n  display: table-column;\n  float: none;\n}\ntable td[class*=\"col-\"], table th[class*=\"col-\"] {\n  position: static;\n  display: table-cell;\n  float: none;\n}\n.table > thead > tr > td.active, .table > tbody > tr > td.active, .table > tfoot > tr > td.active, .table > thead > tr > th.active, .table > tbody > tr > th.active, .table > tfoot > tr > th.active, .table > thead > tr.active > td, .table > tbody > tr.active > td, .table > tfoot > tr.active > td, .table > thead > tr.active > th, .table > tbody > tr.active > th, .table > tfoot > tr.active > th {\n  background-color: #f5f5f5;\n}\n.table-hover > tbody > tr > td.active:hover, .table-hover > tbody > tr > th.active:hover, .table-hover > tbody > tr.active:hover > td, .table-hover > tbody > tr:hover > .active, .table-hover > tbody > tr.active:hover > th {\n  background-color: #e8e8e8;\n}\n.table > thead > tr > td.success, .table > tbody > tr > td.success, .table > tfoot > tr > td.success, .table > thead > tr > th.success, .table > tbody > tr > th.success, .table > tfoot > tr > th.success, .table > thead > tr.success > td, .table > tbody > tr.success > td, .table > tfoot > tr.success > td, .table > thead > tr.success > th, .table > tbody > tr.success > th, .table > tfoot > tr.success > th {\n  background-color: #dff0d8;\n}\n.table-hover > tbody > tr > td.success:hover, .table-hover > tbody > tr > th.success:hover, .table-hover > tbody > tr.success:hover > td, .table-hover > tbody > tr:hover > .success, .table-hover > tbody > tr.success:hover > th {\n  background-color: #d0e9c6;\n}\n.table > thead > tr > td.info, .table > tbody > tr > td.info, .table > tfoot > tr > td.info, .table > thead > tr > th.info, .table > tbody > tr > th.info, .table > tfoot > tr > th.info, .table > thead > tr.info > td, .table > tbody > tr.info > td, .table > tfoot > tr.info > td, .table > thead > tr.info > th, .table > tbody > tr.info > th, .table > tfoot > tr.info > th {\n  background-color: #d9edf7;\n}\n.table-hover > tbody > tr > td.info:hover, .table-hover > tbody > tr > th.info:hover, .table-hover > tbody > tr.info:hover > td, .table-hover > tbody > tr:hover > .info, .table-hover > tbody > tr.info:hover > th {\n  background-color: #c4e3f3;\n}\n.table > thead > tr > td.warning, .table > tbody > tr > td.warning, .table > tfoot > tr > td.warning, .table > thead > tr > th.warning, .table > tbody > tr > th.warning, .table > tfoot > tr > th.warning, .table > thead > tr.warning > td, .table > tbody > tr.warning > td, .table > tfoot > tr.warning > td, .table > thead > tr.warning > th, .table > tbody > tr.warning > th, .table > tfoot > tr.warning > th {\n  background-color: #fcf8e3;\n}\n.table-hover > tbody > tr > td.warning:hover, .table-hover > tbody > tr > th.warning:hover, .table-hover > tbody > tr.warning:hover > td, .table-hover > tbody > tr:hover > .warning, .table-hover > tbody > tr.warning:hover > th {\n  background-color: #faf2cc;\n}\n.table > thead > tr > td.danger, .table > tbody > tr > td.danger, .table > tfoot > tr > td.danger, .table > thead > tr > th.danger, .table > tbody > tr > th.danger, .table > tfoot > tr > th.danger, .table > thead > tr.danger > td, .table > tbody > tr.danger > td, .table > tfoot > tr.danger > td, .table > thead > tr.danger > th, .table > tbody > tr.danger > th, .table > tfoot > tr.danger > th {\n  background-color: #f2dede;\n}\n.table-hover > tbody > tr > td.danger:hover, .table-hover > tbody > tr > th.danger:hover, .table-hover > tbody > tr.danger:hover > td, .table-hover > tbody > tr:hover > .danger, .table-hover > tbody > tr.danger:hover > th {\n  background-color: #ebcccc;\n}\n.table-responsive {\n  min-height: .01%;\n  overflow-x: auto;\n}\n@media screen and (max-width: 767px) {\n  .table-responsive {\n    width: 100%;\n    margin-bottom: 15px;\n    overflow-y: hidden;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n    border: 1px solid #ddd;\n  }\n  .table-responsive > .table {\n    margin-bottom: 0;\n  }\n  .table-responsive > .table > thead > tr > th, .table-responsive > .table > tbody > tr > th, .table-responsive > .table > tfoot > tr > th, .table-responsive > .table > thead > tr > td, .table-responsive > .table > tbody > tr > td, .table-responsive > .table > tfoot > tr > td {\n    white-space: nowrap;\n  }\n  .table-responsive > .table-bordered {\n    border: 0;\n  }\n  .table-responsive > .table-bordered > thead > tr > th:first-child, .table-responsive > .table-bordered > tbody > tr > th:first-child, .table-responsive > .table-bordered > tfoot > tr > th:first-child, .table-responsive > .table-bordered > thead > tr > td:first-child, .table-responsive > .table-bordered > tbody > tr > td:first-child, .table-responsive > .table-bordered > tfoot > tr > td:first-child {\n    border-left: 0;\n  }\n  .table-responsive > .table-bordered > thead > tr > th:last-child, .table-responsive > .table-bordered > tbody > tr > th:last-child, .table-responsive > .table-bordered > tfoot > tr > th:last-child, .table-responsive > .table-bordered > thead > tr > td:last-child, .table-responsive > .table-bordered > tbody > tr > td:last-child, .table-responsive > .table-bordered > tfoot > tr > td:last-child {\n    border-right: 0;\n  }\n  .table-responsive > .table-bordered > tbody > tr:last-child > th, .table-responsive > .table-bordered > tfoot > tr:last-child > th, .table-responsive > .table-bordered > tbody > tr:last-child > td, .table-responsive > .table-bordered > tfoot > tr:last-child > td {\n    border-bottom: 0;\n  }\n}\nfieldset {\n  min-width: 0;\n  padding: 0;\n  margin: 0;\n  border: 0;\n}\nlegend {\n  display: block;\n  width: 100%;\n  padding: 0;\n  margin-bottom: 20px;\n  font-size: 21px;\n  line-height: inherit;\n  color: #333;\n  border: 0;\n  border-bottom: 1px solid #e5e5e5;\n}\nlabel {\n  display: inline-block;\n  max-width: 100%;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\ninput[type=\"search\"] {\n  box-sizing: border-box;\n}\ninput[type=\"radio\"], input[type=\"checkbox\"] {\n  margin: 4px 0 0;\n  margin-top: 1px \\9;\n  line-height: normal;\n}\ninput[type=\"file\"] {\n  display: block;\n}\ninput[type=\"range\"] {\n  display: block;\n  width: 100%;\n}\nselect[multiple], select[size] {\n  height: auto;\n}\ninput[type=\"file\"]:focus, input[type=\"radio\"]:focus, input[type=\"checkbox\"]:focus {\n  outline: thin dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\noutput {\n  display: block;\n  padding-top: 7px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #555;\n}\n.form-control {\n  display: block;\n  width: 100%;\n  height: 34px;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #555;\n  background-color: #fff;\n  background-image: none;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n  -webkit-transition: border-color ease-in-out .15s, -webkit-box-shadow ease-in-out .15s;\n          -webkit-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\n          transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\n}\n.form-control:focus {\n  border-color: #66afe9;\n  outline: 0;\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, .6);\n}\n.form-control::-moz-placeholder {\n  color: #999;\n  opacity: 1;\n}\n.form-control:-ms-input-placeholder {\n  color: #999;\n}\n.form-control::-webkit-input-placeholder {\n  color: #999;\n}\n.form-control::-ms-expand {\n  background-color: transparent;\n  border: 0;\n}\n.form-control[disabled], .form-control[readonly], fieldset[disabled] .form-control {\n  background-color: #eee;\n  opacity: 1;\n}\n.form-control[disabled], fieldset[disabled] .form-control {\n  cursor: not-allowed;\n}\ntextarea.form-control {\n  height: auto;\n}\ninput[type=\"search\"] {\n  -webkit-appearance: none;\n}\n@media screen and (-webkit-min-device-pixel-ratio: 0) {\n  input[type=\"date\"].form-control, input[type=\"time\"].form-control, input[type=\"datetime-local\"].form-control, input[type=\"month\"].form-control {\n    line-height: 34px;\n  }\n  input[type=\"date\"].input-sm, input[type=\"time\"].input-sm, input[type=\"datetime-local\"].input-sm, input[type=\"month\"].input-sm, .input-group-sm input[type=\"date\"], .input-group-sm input[type=\"time\"], .input-group-sm input[type=\"datetime-local\"], .input-group-sm input[type=\"month\"] {\n    line-height: 30px;\n  }\n  input[type=\"date\"].input-lg, input[type=\"time\"].input-lg, input[type=\"datetime-local\"].input-lg, input[type=\"month\"].input-lg, .input-group-lg input[type=\"date\"], .input-group-lg input[type=\"time\"], .input-group-lg input[type=\"datetime-local\"], .input-group-lg input[type=\"month\"] {\n    line-height: 46px;\n  }\n}\n.form-group {\n  margin-bottom: 15px;\n}\n.radio, .checkbox {\n  position: relative;\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.radio label, .checkbox label {\n  min-height: 20px;\n  padding-left: 20px;\n  margin-bottom: 0;\n  font-weight: normal;\n  cursor: pointer;\n}\n.radio input[type=\"radio\"], .radio-inline input[type=\"radio\"], .checkbox input[type=\"checkbox\"], .checkbox-inline input[type=\"checkbox\"] {\n  position: absolute;\n  margin-top: 4px \\9;\n  margin-left: -20px;\n}\n.radio + .radio, .checkbox + .checkbox {\n  margin-top: -5px;\n}\n.radio-inline, .checkbox-inline {\n  position: relative;\n  display: inline-block;\n  padding-left: 20px;\n  margin-bottom: 0;\n  font-weight: normal;\n  vertical-align: middle;\n  cursor: pointer;\n}\n.radio-inline + .radio-inline, .checkbox-inline + .checkbox-inline {\n  margin-top: 0;\n  margin-left: 10px;\n}\ninput[type=\"radio\"][disabled], input[type=\"checkbox\"][disabled], input[type=\"radio\"].disabled, input[type=\"checkbox\"].disabled, fieldset[disabled] input[type=\"radio\"], fieldset[disabled] input[type=\"checkbox\"] {\n  cursor: not-allowed;\n}\n.radio-inline.disabled, .checkbox-inline.disabled, fieldset[disabled] .radio-inline, fieldset[disabled] .checkbox-inline {\n  cursor: not-allowed;\n}\n.radio.disabled label, .checkbox.disabled label, fieldset[disabled] .radio label, fieldset[disabled] .checkbox label {\n  cursor: not-allowed;\n}\n.form-control-static {\n  min-height: 34px;\n  padding-top: 7px;\n  padding-bottom: 7px;\n  margin-bottom: 0;\n}\n.form-control-static.input-lg, .form-control-static.input-sm {\n  padding-right: 0;\n  padding-left: 0;\n}\n.input-sm {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nselect.input-sm {\n  height: 30px;\n  line-height: 30px;\n}\ntextarea.input-sm, select[multiple].input-sm {\n  height: auto;\n}\n.form-group-sm .form-control {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.form-group-sm select.form-control {\n  height: 30px;\n  line-height: 30px;\n}\n.form-group-sm textarea.form-control, .form-group-sm select[multiple].form-control {\n  height: auto;\n}\n.form-group-sm .form-control-static {\n  height: 30px;\n  min-height: 32px;\n  padding: 6px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n.input-lg {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nselect.input-lg {\n  height: 46px;\n  line-height: 46px;\n}\ntextarea.input-lg, select[multiple].input-lg {\n  height: auto;\n}\n.form-group-lg .form-control {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.form-group-lg select.form-control {\n  height: 46px;\n  line-height: 46px;\n}\n.form-group-lg textarea.form-control, .form-group-lg select[multiple].form-control {\n  height: auto;\n}\n.form-group-lg .form-control-static {\n  height: 46px;\n  min-height: 38px;\n  padding: 11px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.has-feedback {\n  position: relative;\n}\n.has-feedback .form-control {\n  padding-right: 42.5px;\n}\n.form-control-feedback {\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 2;\n  display: block;\n  width: 34px;\n  height: 34px;\n  line-height: 34px;\n  text-align: center;\n  pointer-events: none;\n}\n.input-lg + .form-control-feedback, .input-group-lg + .form-control-feedback, .form-group-lg .form-control + .form-control-feedback {\n  width: 46px;\n  height: 46px;\n  line-height: 46px;\n}\n.input-sm + .form-control-feedback, .input-group-sm + .form-control-feedback, .form-group-sm .form-control + .form-control-feedback {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n}\n.has-success .help-block, .has-success .control-label, .has-success .radio, .has-success .checkbox, .has-success .radio-inline, .has-success .checkbox-inline, .has-success.radio label, .has-success.checkbox label, .has-success.radio-inline label, .has-success.checkbox-inline label {\n  color: #3c763d;\n}\n.has-success .form-control {\n  border-color: #3c763d;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n}\n.has-success .form-control:focus {\n  border-color: #2b542c;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #67b168;\n}\n.has-success .input-group-addon {\n  color: #3c763d;\n  background-color: #dff0d8;\n  border-color: #3c763d;\n}\n.has-success .form-control-feedback {\n  color: #3c763d;\n}\n.has-warning .help-block, .has-warning .control-label, .has-warning .radio, .has-warning .checkbox, .has-warning .radio-inline, .has-warning .checkbox-inline, .has-warning.radio label, .has-warning.checkbox label, .has-warning.radio-inline label, .has-warning.checkbox-inline label {\n  color: #8a6d3b;\n}\n.has-warning .form-control {\n  border-color: #8a6d3b;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n}\n.has-warning .form-control:focus {\n  border-color: #66512c;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #c0a16b;\n}\n.has-warning .input-group-addon {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #8a6d3b;\n}\n.has-warning .form-control-feedback {\n  color: #8a6d3b;\n}\n.has-error .help-block, .has-error .control-label, .has-error .radio, .has-error .checkbox, .has-error .radio-inline, .has-error .checkbox-inline, .has-error.radio label, .has-error.checkbox label, .has-error.radio-inline label, .has-error.checkbox-inline label {\n  color: #a94442;\n}\n.has-error .form-control {\n  border-color: #a94442;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075);\n}\n.has-error .form-control:focus {\n  border-color: #843534;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 6px #ce8483;\n}\n.has-error .input-group-addon {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #a94442;\n}\n.has-error .form-control-feedback {\n  color: #a94442;\n}\n.has-feedback label ~ .form-control-feedback {\n  top: 25px;\n}\n.has-feedback label.sr-only ~ .form-control-feedback {\n  top: 0;\n}\n.help-block {\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  color: #737373;\n}\n@media (min-width: 768px) {\n  .form-inline .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .form-inline .form-control-static {\n    display: inline-block;\n  }\n  .form-inline .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .form-inline .input-group .input-group-addon, .form-inline .input-group .input-group-btn, .form-inline .input-group .form-control {\n    width: auto;\n  }\n  .form-inline .input-group > .form-control {\n    width: 100%;\n  }\n  .form-inline .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio, .form-inline .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio label, .form-inline .checkbox label {\n    padding-left: 0;\n  }\n  .form-inline .radio input[type=\"radio\"], .form-inline .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .form-inline .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n.form-horizontal .radio, .form-horizontal .checkbox, .form-horizontal .radio-inline, .form-horizontal .checkbox-inline {\n  padding-top: 7px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n.form-horizontal .radio, .form-horizontal .checkbox {\n  min-height: 27px;\n}\n.form-horizontal .form-group {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n@media (min-width: 768px) {\n  .form-horizontal .control-label {\n    padding-top: 7px;\n    margin-bottom: 0;\n    text-align: right;\n  }\n}\n.form-horizontal .has-feedback .form-control-feedback {\n  right: 15px;\n}\n@media (min-width: 768px) {\n  .form-horizontal .form-group-lg .control-label {\n    padding-top: 11px;\n    font-size: 18px;\n  }\n}\n@media (min-width: 768px) {\n  .form-horizontal .form-group-sm .control-label {\n    padding-top: 6px;\n    font-size: 12px;\n  }\n}\n.btn {\n  display: inline-block;\n  padding: 6px 12px;\n  margin-bottom: 0;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 1.42857143;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  -ms-touch-action: manipulation;\n      touch-action: manipulation;\n  cursor: pointer;\n  -webkit-user-select: none;\n     -moz-user-select: none;\n      -ms-user-select: none;\n          user-select: none;\n  background-image: none;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.btn:focus, .btn:active:focus, .btn.active:focus, .btn.focus, .btn:active.focus, .btn.active.focus {\n  outline: thin dotted;\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\n.btn:hover, .btn:focus, .btn.focus {\n  color: #333;\n  text-decoration: none;\n}\n.btn:active, .btn.active {\n  background-image: none;\n  outline: 0;\n  box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\n}\n.btn.disabled, .btn[disabled], fieldset[disabled] .btn {\n  cursor: not-allowed;\n  filter: alpha(opacity=65);\n  box-shadow: none;\n  opacity: .65;\n}\na.btn.disabled, fieldset[disabled] a.btn {\n  pointer-events: none;\n}\n.btn-default {\n  color: #333;\n  background-color: #fff;\n  border-color: #ccc;\n}\n.btn-default:focus, .btn-default.focus {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #8c8c8c;\n}\n.btn-default:hover {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #adadad;\n}\n.btn-default:active, .btn-default.active, .open > .dropdown-toggle.btn-default {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #adadad;\n}\n.btn-default:active:hover, .btn-default.active:hover, .open > .dropdown-toggle.btn-default:hover, .btn-default:active:focus, .btn-default.active:focus, .open > .dropdown-toggle.btn-default:focus, .btn-default:active.focus, .btn-default.active.focus, .open > .dropdown-toggle.btn-default.focus {\n  color: #333;\n  background-color: #d4d4d4;\n  border-color: #8c8c8c;\n}\n.btn-default:active, .btn-default.active, .open > .dropdown-toggle.btn-default {\n  background-image: none;\n}\n.btn-default.disabled:hover, .btn-default[disabled]:hover, fieldset[disabled] .btn-default:hover, .btn-default.disabled:focus, .btn-default[disabled]:focus, fieldset[disabled] .btn-default:focus, .btn-default.disabled.focus, .btn-default[disabled].focus, fieldset[disabled] .btn-default.focus {\n  background-color: #fff;\n  border-color: #ccc;\n}\n.btn-default .badge {\n  color: #fff;\n  background-color: #333;\n}\n.btn-primary {\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #2e6da4;\n}\n.btn-primary:focus, .btn-primary.focus {\n  color: #fff;\n  background-color: #286090;\n  border-color: #122b40;\n}\n.btn-primary:hover {\n  color: #fff;\n  background-color: #286090;\n  border-color: #204d74;\n}\n.btn-primary:active, .btn-primary.active, .open > .dropdown-toggle.btn-primary {\n  color: #fff;\n  background-color: #286090;\n  border-color: #204d74;\n}\n.btn-primary:active:hover, .btn-primary.active:hover, .open > .dropdown-toggle.btn-primary:hover, .btn-primary:active:focus, .btn-primary.active:focus, .open > .dropdown-toggle.btn-primary:focus, .btn-primary:active.focus, .btn-primary.active.focus, .open > .dropdown-toggle.btn-primary.focus {\n  color: #fff;\n  background-color: #204d74;\n  border-color: #122b40;\n}\n.btn-primary:active, .btn-primary.active, .open > .dropdown-toggle.btn-primary {\n  background-image: none;\n}\n.btn-primary.disabled:hover, .btn-primary[disabled]:hover, fieldset[disabled] .btn-primary:hover, .btn-primary.disabled:focus, .btn-primary[disabled]:focus, fieldset[disabled] .btn-primary:focus, .btn-primary.disabled.focus, .btn-primary[disabled].focus, fieldset[disabled] .btn-primary.focus {\n  background-color: #337ab7;\n  border-color: #2e6da4;\n}\n.btn-primary .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n.btn-success {\n  color: #fff;\n  background-color: #5cb85c;\n  border-color: #4cae4c;\n}\n.btn-success:focus, .btn-success.focus {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #255625;\n}\n.btn-success:hover {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #398439;\n}\n.btn-success:active, .btn-success.active, .open > .dropdown-toggle.btn-success {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #398439;\n}\n.btn-success:active:hover, .btn-success.active:hover, .open > .dropdown-toggle.btn-success:hover, .btn-success:active:focus, .btn-success.active:focus, .open > .dropdown-toggle.btn-success:focus, .btn-success:active.focus, .btn-success.active.focus, .open > .dropdown-toggle.btn-success.focus {\n  color: #fff;\n  background-color: #398439;\n  border-color: #255625;\n}\n.btn-success:active, .btn-success.active, .open > .dropdown-toggle.btn-success {\n  background-image: none;\n}\n.btn-success.disabled:hover, .btn-success[disabled]:hover, fieldset[disabled] .btn-success:hover, .btn-success.disabled:focus, .btn-success[disabled]:focus, fieldset[disabled] .btn-success:focus, .btn-success.disabled.focus, .btn-success[disabled].focus, fieldset[disabled] .btn-success.focus {\n  background-color: #5cb85c;\n  border-color: #4cae4c;\n}\n.btn-success .badge {\n  color: #5cb85c;\n  background-color: #fff;\n}\n.btn-info {\n  color: #fff;\n  background-color: #5bc0de;\n  border-color: #46b8da;\n}\n.btn-info:focus, .btn-info.focus {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #1b6d85;\n}\n.btn-info:hover {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #269abc;\n}\n.btn-info:active, .btn-info.active, .open > .dropdown-toggle.btn-info {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #269abc;\n}\n.btn-info:active:hover, .btn-info.active:hover, .open > .dropdown-toggle.btn-info:hover, .btn-info:active:focus, .btn-info.active:focus, .open > .dropdown-toggle.btn-info:focus, .btn-info:active.focus, .btn-info.active.focus, .open > .dropdown-toggle.btn-info.focus {\n  color: #fff;\n  background-color: #269abc;\n  border-color: #1b6d85;\n}\n.btn-info:active, .btn-info.active, .open > .dropdown-toggle.btn-info {\n  background-image: none;\n}\n.btn-info.disabled:hover, .btn-info[disabled]:hover, fieldset[disabled] .btn-info:hover, .btn-info.disabled:focus, .btn-info[disabled]:focus, fieldset[disabled] .btn-info:focus, .btn-info.disabled.focus, .btn-info[disabled].focus, fieldset[disabled] .btn-info.focus {\n  background-color: #5bc0de;\n  border-color: #46b8da;\n}\n.btn-info .badge {\n  color: #5bc0de;\n  background-color: #fff;\n}\n.btn-warning {\n  color: #fff;\n  background-color: #f0ad4e;\n  border-color: #eea236;\n}\n.btn-warning:focus, .btn-warning.focus {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #985f0d;\n}\n.btn-warning:hover {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #d58512;\n}\n.btn-warning:active, .btn-warning.active, .open > .dropdown-toggle.btn-warning {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #d58512;\n}\n.btn-warning:active:hover, .btn-warning.active:hover, .open > .dropdown-toggle.btn-warning:hover, .btn-warning:active:focus, .btn-warning.active:focus, .open > .dropdown-toggle.btn-warning:focus, .btn-warning:active.focus, .btn-warning.active.focus, .open > .dropdown-toggle.btn-warning.focus {\n  color: #fff;\n  background-color: #d58512;\n  border-color: #985f0d;\n}\n.btn-warning:active, .btn-warning.active, .open > .dropdown-toggle.btn-warning {\n  background-image: none;\n}\n.btn-warning.disabled:hover, .btn-warning[disabled]:hover, fieldset[disabled] .btn-warning:hover, .btn-warning.disabled:focus, .btn-warning[disabled]:focus, fieldset[disabled] .btn-warning:focus, .btn-warning.disabled.focus, .btn-warning[disabled].focus, fieldset[disabled] .btn-warning.focus {\n  background-color: #f0ad4e;\n  border-color: #eea236;\n}\n.btn-warning .badge {\n  color: #f0ad4e;\n  background-color: #fff;\n}\n.btn-danger {\n  color: #fff;\n  background-color: #d9534f;\n  border-color: #d43f3a;\n}\n.btn-danger:focus, .btn-danger.focus {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #761c19;\n}\n.btn-danger:hover {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #ac2925;\n}\n.btn-danger:active, .btn-danger.active, .open > .dropdown-toggle.btn-danger {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #ac2925;\n}\n.btn-danger:active:hover, .btn-danger.active:hover, .open > .dropdown-toggle.btn-danger:hover, .btn-danger:active:focus, .btn-danger.active:focus, .open > .dropdown-toggle.btn-danger:focus, .btn-danger:active.focus, .btn-danger.active.focus, .open > .dropdown-toggle.btn-danger.focus {\n  color: #fff;\n  background-color: #ac2925;\n  border-color: #761c19;\n}\n.btn-danger:active, .btn-danger.active, .open > .dropdown-toggle.btn-danger {\n  background-image: none;\n}\n.btn-danger.disabled:hover, .btn-danger[disabled]:hover, fieldset[disabled] .btn-danger:hover, .btn-danger.disabled:focus, .btn-danger[disabled]:focus, fieldset[disabled] .btn-danger:focus, .btn-danger.disabled.focus, .btn-danger[disabled].focus, fieldset[disabled] .btn-danger.focus {\n  background-color: #d9534f;\n  border-color: #d43f3a;\n}\n.btn-danger .badge {\n  color: #d9534f;\n  background-color: #fff;\n}\n.btn-link {\n  font-weight: normal;\n  color: #337ab7;\n  border-radius: 0;\n}\n.btn-link, .btn-link:active, .btn-link.active, .btn-link[disabled], fieldset[disabled] .btn-link {\n  background-color: transparent;\n  box-shadow: none;\n}\n.btn-link, .btn-link:hover, .btn-link:focus, .btn-link:active {\n  border-color: transparent;\n}\n.btn-link:hover, .btn-link:focus {\n  color: #23527c;\n  text-decoration: underline;\n  background-color: transparent;\n}\n.btn-link[disabled]:hover, fieldset[disabled] .btn-link:hover, .btn-link[disabled]:focus, fieldset[disabled] .btn-link:focus {\n  color: #777;\n  text-decoration: none;\n}\n.btn-lg, .btn-group-lg > .btn {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.btn-sm, .btn-group-sm > .btn {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.btn-xs, .btn-group-xs > .btn {\n  padding: 1px 5px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.btn-block {\n  display: block;\n  width: 100%;\n}\n.btn-block + .btn-block {\n  margin-top: 5px;\n}\ninput[type=\"submit\"].btn-block, input[type=\"reset\"].btn-block, input[type=\"button\"].btn-block {\n  width: 100%;\n}\n.fade {\n  opacity: 0;\n  -webkit-transition: opacity .15s linear;\n          transition: opacity .15s linear;\n}\n.fade.in {\n  opacity: 1;\n}\n.collapse {\n  display: none;\n}\n.collapse.in {\n  display: block;\n}\ntr.collapse.in {\n  display: table-row;\n}\ntbody.collapse.in {\n  display: table-row-group;\n}\n.collapsing {\n  position: relative;\n  height: 0;\n  overflow: hidden;\n  -webkit-transition-timing-function: ease;\n          transition-timing-function: ease;\n  -webkit-transition-duration: .35s;\n          transition-duration: .35s;\n  -webkit-transition-property: height, visibility;\n          transition-property: height, visibility;\n}\n.caret {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 2px;\n  vertical-align: middle;\n  border-top: 4px dashed;\n  border-top: 4px solid \\9;\n  border-right: 4px solid transparent;\n  border-left: 4px solid transparent;\n}\n.dropup, .dropdown {\n  position: relative;\n}\n.dropdown-toggle:focus {\n  outline: 0;\n}\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  display: none;\n  float: left;\n  min-width: 160px;\n  padding: 5px 0;\n  margin: 2px 0 0;\n  font-size: 14px;\n  text-align: left;\n  list-style: none;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, .15);\n  border-radius: 4px;\n  box-shadow: 0 6px 12px rgba(0, 0, 0, .175);\n}\n.dropdown-menu.pull-right {\n  right: 0;\n  left: auto;\n}\n.dropdown-menu .divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #e5e5e5;\n}\n.dropdown-menu > li > a {\n  display: block;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #333;\n  white-space: nowrap;\n}\n.dropdown-menu > li > a:hover, .dropdown-menu > li > a:focus {\n  color: #262626;\n  text-decoration: none;\n  background-color: #f5f5f5;\n}\n.dropdown-menu > .active > a, .dropdown-menu > .active > a:hover, .dropdown-menu > .active > a:focus {\n  color: #fff;\n  text-decoration: none;\n  background-color: #337ab7;\n  outline: 0;\n}\n.dropdown-menu > .disabled > a, .dropdown-menu > .disabled > a:hover, .dropdown-menu > .disabled > a:focus {\n  color: #777;\n}\n.dropdown-menu > .disabled > a:hover, .dropdown-menu > .disabled > a:focus {\n  text-decoration: none;\n  cursor: not-allowed;\n  background-color: transparent;\n  background-image: none;\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n}\n.open > .dropdown-menu {\n  display: block;\n}\n.open > a {\n  outline: 0;\n}\n.dropdown-menu-right {\n  right: 0;\n  left: auto;\n}\n.dropdown-menu-left {\n  right: auto;\n  left: 0;\n}\n.dropdown-header {\n  display: block;\n  padding: 3px 20px;\n  font-size: 12px;\n  line-height: 1.42857143;\n  color: #777;\n  white-space: nowrap;\n}\n.dropdown-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 990;\n}\n.pull-right > .dropdown-menu {\n  right: 0;\n  left: auto;\n}\n.dropup .caret, .navbar-fixed-bottom .dropdown .caret {\n  content: \"\";\n  border-top: 0;\n  border-bottom: 4px dashed;\n  border-bottom: 4px solid \\9;\n}\n.dropup .dropdown-menu, .navbar-fixed-bottom .dropdown .dropdown-menu {\n  top: auto;\n  bottom: 100%;\n  margin-bottom: 2px;\n}\n@media (min-width: 768px) {\n  .navbar-right .dropdown-menu {\n    right: 0;\n    left: auto;\n  }\n  .navbar-right .dropdown-menu-left {\n    right: auto;\n    left: 0;\n  }\n}\n.btn-group, .btn-group-vertical {\n  position: relative;\n  display: inline-block;\n  vertical-align: middle;\n}\n.btn-group > .btn, .btn-group-vertical > .btn {\n  position: relative;\n  float: left;\n}\n.btn-group > .btn:hover, .btn-group-vertical > .btn:hover, .btn-group > .btn:focus, .btn-group-vertical > .btn:focus, .btn-group > .btn:active, .btn-group-vertical > .btn:active, .btn-group > .btn.active, .btn-group-vertical > .btn.active {\n  z-index: 2;\n}\n.btn-group .btn + .btn, .btn-group .btn + .btn-group, .btn-group .btn-group + .btn, .btn-group .btn-group + .btn-group {\n  margin-left: -1px;\n}\n.btn-toolbar {\n  margin-left: -5px;\n}\n.btn-toolbar .btn, .btn-toolbar .btn-group, .btn-toolbar .input-group {\n  float: left;\n}\n.btn-toolbar > .btn, .btn-toolbar > .btn-group, .btn-toolbar > .input-group {\n  margin-left: 5px;\n}\n.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {\n  border-radius: 0;\n}\n.btn-group > .btn:first-child {\n  margin-left: 0;\n}\n.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.btn-group > .btn:last-child:not(:first-child), .btn-group > .dropdown-toggle:not(:first-child) {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group > .btn-group {\n  float: left;\n}\n.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {\n  border-radius: 0;\n}\n.btn-group > .btn-group:first-child:not(:last-child) > .btn:last-child, .btn-group > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group .dropdown-toggle:active, .btn-group.open .dropdown-toggle {\n  outline: 0;\n}\n.btn-group > .btn + .dropdown-toggle {\n  padding-right: 8px;\n  padding-left: 8px;\n}\n.btn-group > .btn-lg + .dropdown-toggle {\n  padding-right: 12px;\n  padding-left: 12px;\n}\n.btn-group.open .dropdown-toggle {\n  box-shadow: inset 0 3px 5px rgba(0, 0, 0, .125);\n}\n.btn-group.open .dropdown-toggle.btn-link {\n  box-shadow: none;\n}\n.btn .caret {\n  margin-left: 0;\n}\n.btn-lg .caret {\n  border-width: 5px 5px 0;\n  border-bottom-width: 0;\n}\n.dropup .btn-lg .caret {\n  border-width: 0 5px 5px;\n}\n.btn-group-vertical > .btn, .btn-group-vertical > .btn-group, .btn-group-vertical > .btn-group > .btn {\n  display: block;\n  float: none;\n  width: 100%;\n  max-width: 100%;\n}\n.btn-group-vertical > .btn-group > .btn {\n  float: none;\n}\n.btn-group-vertical > .btn + .btn, .btn-group-vertical > .btn + .btn-group, .btn-group-vertical > .btn-group + .btn, .btn-group-vertical > .btn-group + .btn-group {\n  margin-top: -1px;\n  margin-left: 0;\n}\n.btn-group-vertical > .btn:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n.btn-group-vertical > .btn:first-child:not(:last-child) {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group-vertical > .btn:last-child:not(:first-child) {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn {\n  border-radius: 0;\n}\n.btn-group-vertical > .btn-group:first-child:not(:last-child) > .btn:last-child, .btn-group-vertical > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-child {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.btn-group-justified {\n  display: table;\n  width: 100%;\n  table-layout: fixed;\n  border-collapse: separate;\n}\n.btn-group-justified > .btn, .btn-group-justified > .btn-group {\n  display: table-cell;\n  float: none;\n  width: 1%;\n}\n.btn-group-justified > .btn-group .btn {\n  width: 100%;\n}\n.btn-group-justified > .btn-group .dropdown-menu {\n  left: auto;\n}\n[data-toggle=\"buttons\"] > .btn input[type=\"radio\"], [data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"radio\"], [data-toggle=\"buttons\"] > .btn input[type=\"checkbox\"], [data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"checkbox\"] {\n  position: absolute;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n}\n.input-group {\n  position: relative;\n  display: table;\n  border-collapse: separate;\n}\n.input-group[class*=\"col-\"] {\n  float: none;\n  padding-right: 0;\n  padding-left: 0;\n}\n.input-group .form-control {\n  position: relative;\n  z-index: 2;\n  float: left;\n  width: 100%;\n  margin-bottom: 0;\n}\n.input-group .form-control:focus {\n  z-index: 3;\n}\n.input-group-lg > .form-control, .input-group-lg > .input-group-addon, .input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nselect.input-group-lg > .form-control, select.input-group-lg > .input-group-addon, select.input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  line-height: 46px;\n}\ntextarea.input-group-lg > .form-control, textarea.input-group-lg > .input-group-addon, textarea.input-group-lg > .input-group-btn > .btn, select[multiple].input-group-lg > .form-control, select[multiple].input-group-lg > .input-group-addon, select[multiple].input-group-lg > .input-group-btn > .btn {\n  height: auto;\n}\n.input-group-sm > .form-control, .input-group-sm > .input-group-addon, .input-group-sm > .input-group-btn > .btn {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nselect.input-group-sm > .form-control, select.input-group-sm > .input-group-addon, select.input-group-sm > .input-group-btn > .btn {\n  height: 30px;\n  line-height: 30px;\n}\ntextarea.input-group-sm > .form-control, textarea.input-group-sm > .input-group-addon, textarea.input-group-sm > .input-group-btn > .btn, select[multiple].input-group-sm > .form-control, select[multiple].input-group-sm > .input-group-addon, select[multiple].input-group-sm > .input-group-btn > .btn {\n  height: auto;\n}\n.input-group-addon, .input-group-btn, .input-group .form-control {\n  display: table-cell;\n}\n.input-group-addon:not(:first-child):not(:last-child), .input-group-btn:not(:first-child):not(:last-child), .input-group .form-control:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n.input-group-addon, .input-group-btn {\n  width: 1%;\n  white-space: nowrap;\n  vertical-align: middle;\n}\n.input-group-addon {\n  padding: 6px 12px;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 1;\n  color: #555;\n  text-align: center;\n  background-color: #eee;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n.input-group-addon.input-sm {\n  padding: 5px 10px;\n  font-size: 12px;\n  border-radius: 3px;\n}\n.input-group-addon.input-lg {\n  padding: 10px 16px;\n  font-size: 18px;\n  border-radius: 6px;\n}\n.input-group-addon input[type=\"radio\"], .input-group-addon input[type=\"checkbox\"] {\n  margin-top: 0;\n}\n.input-group .form-control:first-child, .input-group-addon:first-child, .input-group-btn:first-child > .btn, .input-group-btn:first-child > .btn-group > .btn, .input-group-btn:first-child > .dropdown-toggle, .input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle), .input-group-btn:last-child > .btn-group:not(:last-child) > .btn {\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n}\n.input-group-addon:first-child {\n  border-right: 0;\n}\n.input-group .form-control:last-child, .input-group-addon:last-child, .input-group-btn:last-child > .btn, .input-group-btn:last-child > .btn-group > .btn, .input-group-btn:last-child > .dropdown-toggle, .input-group-btn:first-child > .btn:not(:first-child), .input-group-btn:first-child > .btn-group:not(:first-child) > .btn {\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.input-group-addon:last-child {\n  border-left: 0;\n}\n.input-group-btn {\n  position: relative;\n  font-size: 0;\n  white-space: nowrap;\n}\n.input-group-btn > .btn {\n  position: relative;\n}\n.input-group-btn > .btn + .btn {\n  margin-left: -1px;\n}\n.input-group-btn > .btn:hover, .input-group-btn > .btn:focus, .input-group-btn > .btn:active {\n  z-index: 2;\n}\n.input-group-btn:first-child > .btn, .input-group-btn:first-child > .btn-group {\n  margin-right: -1px;\n}\n.input-group-btn:last-child > .btn, .input-group-btn:last-child > .btn-group {\n  z-index: 2;\n  margin-left: -1px;\n}\n.nav {\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style: none;\n}\n.nav > li {\n  position: relative;\n  display: block;\n}\n.nav > li > a {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n}\n.nav > li > a:hover, .nav > li > a:focus {\n  text-decoration: none;\n  background-color: #eee;\n}\n.nav > li.disabled > a {\n  color: #777;\n}\n.nav > li.disabled > a:hover, .nav > li.disabled > a:focus {\n  color: #777;\n  text-decoration: none;\n  cursor: not-allowed;\n  background-color: transparent;\n}\n.nav .open > a, .nav .open > a:hover, .nav .open > a:focus {\n  background-color: #eee;\n  border-color: #337ab7;\n}\n.nav .nav-divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #e5e5e5;\n}\n.nav > li > a > img {\n  max-width: none;\n}\n.nav-tabs {\n  border-bottom: 1px solid #ddd;\n}\n.nav-tabs > li {\n  float: left;\n  margin-bottom: -1px;\n}\n.nav-tabs > li > a {\n  margin-right: 2px;\n  line-height: 1.42857143;\n  border: 1px solid transparent;\n  border-radius: 4px 4px 0 0;\n}\n.nav-tabs > li > a:hover {\n  border-color: #eee #eee #ddd;\n}\n.nav-tabs > li.active > a, .nav-tabs > li.active > a:hover, .nav-tabs > li.active > a:focus {\n  color: #555;\n  cursor: default;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-bottom-color: transparent;\n}\n.nav-tabs.nav-justified {\n  width: 100%;\n  border-bottom: 0;\n}\n.nav-tabs.nav-justified > li {\n  float: none;\n}\n.nav-tabs.nav-justified > li > a {\n  margin-bottom: 5px;\n  text-align: center;\n}\n.nav-tabs.nav-justified > .dropdown .dropdown-menu {\n  top: auto;\n  left: auto;\n}\n@media (min-width: 768px) {\n  .nav-tabs.nav-justified > li {\n    display: table-cell;\n    width: 1%;\n  }\n  .nav-tabs.nav-justified > li > a {\n    margin-bottom: 0;\n  }\n}\n.nav-tabs.nav-justified > li > a {\n  margin-right: 0;\n  border-radius: 4px;\n}\n.nav-tabs.nav-justified > .active > a, .nav-tabs.nav-justified > .active > a:hover, .nav-tabs.nav-justified > .active > a:focus {\n  border: 1px solid #ddd;\n}\n@media (min-width: 768px) {\n  .nav-tabs.nav-justified > li > a {\n    border-bottom: 1px solid #ddd;\n    border-radius: 4px 4px 0 0;\n  }\n  .nav-tabs.nav-justified > .active > a, .nav-tabs.nav-justified > .active > a:hover, .nav-tabs.nav-justified > .active > a:focus {\n    border-bottom-color: #fff;\n  }\n}\n.nav-pills > li {\n  float: left;\n}\n.nav-pills > li > a {\n  border-radius: 4px;\n}\n.nav-pills > li + li {\n  margin-left: 2px;\n}\n.nav-pills > li.active > a, .nav-pills > li.active > a:hover, .nav-pills > li.active > a:focus {\n  color: #fff;\n  background-color: #337ab7;\n}\n.nav-stacked > li {\n  float: none;\n}\n.nav-stacked > li + li {\n  margin-top: 2px;\n  margin-left: 0;\n}\n.nav-justified {\n  width: 100%;\n}\n.nav-justified > li {\n  float: none;\n}\n.nav-justified > li > a {\n  margin-bottom: 5px;\n  text-align: center;\n}\n.nav-justified > .dropdown .dropdown-menu {\n  top: auto;\n  left: auto;\n}\n@media (min-width: 768px) {\n  .nav-justified > li {\n    display: table-cell;\n    width: 1%;\n  }\n  .nav-justified > li > a {\n    margin-bottom: 0;\n  }\n}\n.nav-tabs-justified {\n  border-bottom: 0;\n}\n.nav-tabs-justified > li > a {\n  margin-right: 0;\n  border-radius: 4px;\n}\n.nav-tabs-justified > .active > a, .nav-tabs-justified > .active > a:hover, .nav-tabs-justified > .active > a:focus {\n  border: 1px solid #ddd;\n}\n@media (min-width: 768px) {\n  .nav-tabs-justified > li > a {\n    border-bottom: 1px solid #ddd;\n    border-radius: 4px 4px 0 0;\n  }\n  .nav-tabs-justified > .active > a, .nav-tabs-justified > .active > a:hover, .nav-tabs-justified > .active > a:focus {\n    border-bottom-color: #fff;\n  }\n}\n.tab-content > .tab-pane {\n  display: none;\n}\n.tab-content > .active {\n  display: block;\n}\n.nav-tabs .dropdown-menu {\n  margin-top: -1px;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.navbar {\n  position: relative;\n  min-height: 50px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n}\n@media (min-width: 768px) {\n  .navbar {\n    border-radius: 4px;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-header {\n    float: left;\n  }\n}\n.navbar-collapse {\n  padding-right: 15px;\n  padding-left: 15px;\n  overflow-x: visible;\n  -webkit-overflow-scrolling: touch;\n  border-top: 1px solid transparent;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1);\n}\n.navbar-collapse.in {\n  overflow-y: auto;\n}\n@media (min-width: 768px) {\n  .navbar-collapse {\n    width: auto;\n    border-top: 0;\n    box-shadow: none;\n  }\n  .navbar-collapse.collapse {\n    display: block !important;\n    height: auto !important;\n    padding-bottom: 0;\n    overflow: visible !important;\n  }\n  .navbar-collapse.in {\n    overflow-y: visible;\n  }\n  .navbar-fixed-top .navbar-collapse, .navbar-static-top .navbar-collapse, .navbar-fixed-bottom .navbar-collapse {\n    padding-right: 0;\n    padding-left: 0;\n  }\n}\n.navbar-fixed-top .navbar-collapse, .navbar-fixed-bottom .navbar-collapse {\n  max-height: 340px;\n}\n@media (max-device-width: 480px) and (orientation: landscape) {\n  .navbar-fixed-top .navbar-collapse, .navbar-fixed-bottom .navbar-collapse {\n    max-height: 200px;\n  }\n}\n.container > .navbar-header, .container-fluid > .navbar-header, .container > .navbar-collapse, .container-fluid > .navbar-collapse {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n@media (min-width: 768px) {\n  .container > .navbar-header, .container-fluid > .navbar-header, .container > .navbar-collapse, .container-fluid > .navbar-collapse {\n    margin-right: 0;\n    margin-left: 0;\n  }\n}\n.navbar-static-top {\n  z-index: 1000;\n  border-width: 0 0 1px;\n}\n@media (min-width: 768px) {\n  .navbar-static-top {\n    border-radius: 0;\n  }\n}\n.navbar-fixed-top, .navbar-fixed-bottom {\n  position: fixed;\n  right: 0;\n  left: 0;\n  z-index: 1030;\n}\n@media (min-width: 768px) {\n  .navbar-fixed-top, .navbar-fixed-bottom {\n    border-radius: 0;\n  }\n}\n.navbar-fixed-top {\n  top: 0;\n  border-width: 0 0 1px;\n}\n.navbar-fixed-bottom {\n  bottom: 0;\n  margin-bottom: 0;\n  border-width: 1px 0 0;\n}\n.navbar-brand {\n  float: left;\n  height: 50px;\n  padding: 15px 15px;\n  font-size: 18px;\n  line-height: 20px;\n}\n.navbar-brand:hover, .navbar-brand:focus {\n  text-decoration: none;\n}\n.navbar-brand > img {\n  display: block;\n}\n@media (min-width: 768px) {\n  .navbar > .container .navbar-brand, .navbar > .container-fluid .navbar-brand {\n    margin-left: -15px;\n  }\n}\n.navbar-toggle {\n  position: relative;\n  float: right;\n  padding: 9px 10px;\n  margin-top: 8px;\n  margin-right: 15px;\n  margin-bottom: 8px;\n  background-color: transparent;\n  background-image: none;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.navbar-toggle:focus {\n  outline: 0;\n}\n.navbar-toggle .icon-bar {\n  display: block;\n  width: 22px;\n  height: 2px;\n  border-radius: 1px;\n}\n.navbar-toggle .icon-bar + .icon-bar {\n  margin-top: 4px;\n}\n@media (min-width: 768px) {\n  .navbar-toggle {\n    display: none;\n  }\n}\n.navbar-nav {\n  margin: 7.5px -15px;\n}\n.navbar-nav > li > a {\n  padding-top: 10px;\n  padding-bottom: 10px;\n  line-height: 20px;\n}\n@media (max-width: 767px) {\n  .navbar-nav .open .dropdown-menu {\n    position: static;\n    float: none;\n    width: auto;\n    margin-top: 0;\n    background-color: transparent;\n    border: 0;\n    box-shadow: none;\n  }\n  .navbar-nav .open .dropdown-menu > li > a, .navbar-nav .open .dropdown-menu .dropdown-header {\n    padding: 5px 15px 5px 25px;\n  }\n  .navbar-nav .open .dropdown-menu > li > a {\n    line-height: 20px;\n  }\n  .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-nav .open .dropdown-menu > li > a:focus {\n    background-image: none;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-nav {\n    float: left;\n    margin: 0;\n  }\n  .navbar-nav > li {\n    float: left;\n  }\n  .navbar-nav > li > a {\n    padding-top: 15px;\n    padding-bottom: 15px;\n  }\n}\n.navbar-form {\n  padding: 10px 15px;\n  margin-top: 8px;\n  margin-right: -15px;\n  margin-bottom: 8px;\n  margin-left: -15px;\n  border-top: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .1), 0 1px 0 rgba(255, 255, 255, .1);\n}\n@media (min-width: 768px) {\n  .navbar-form .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control-static {\n    display: inline-block;\n  }\n  .navbar-form .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .navbar-form .input-group .input-group-addon, .navbar-form .input-group .input-group-btn, .navbar-form .input-group .form-control {\n    width: auto;\n  }\n  .navbar-form .input-group > .form-control {\n    width: 100%;\n  }\n  .navbar-form .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio, .navbar-form .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio label, .navbar-form .checkbox label {\n    padding-left: 0;\n  }\n  .navbar-form .radio input[type=\"radio\"], .navbar-form .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .navbar-form .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n@media (max-width: 767px) {\n  .navbar-form .form-group {\n    margin-bottom: 5px;\n  }\n  .navbar-form .form-group:last-child {\n    margin-bottom: 0;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-form {\n    width: auto;\n    padding-top: 0;\n    padding-bottom: 0;\n    margin-right: 0;\n    margin-left: 0;\n    border: 0;\n    box-shadow: none;\n  }\n}\n.navbar-nav > li > .dropdown-menu {\n  margin-top: 0;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.navbar-fixed-bottom .navbar-nav > li > .dropdown-menu {\n  margin-bottom: 0;\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.navbar-btn {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n.navbar-btn.btn-sm {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.navbar-btn.btn-xs {\n  margin-top: 14px;\n  margin-bottom: 14px;\n}\n.navbar-text {\n  margin-top: 15px;\n  margin-bottom: 15px;\n}\n@media (min-width: 768px) {\n  .navbar-text {\n    float: left;\n    margin-right: 15px;\n    margin-left: 15px;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-left {\n    float: left !important;\n  }\n  .navbar-right {\n    float: right !important;\n    margin-right: -15px;\n  }\n  .navbar-right ~ .navbar-right {\n    margin-right: 0;\n  }\n}\n.navbar-default {\n  background-color: #f8f8f8;\n  border-color: #e7e7e7;\n}\n.navbar-default .navbar-brand {\n  color: #777;\n}\n.navbar-default .navbar-brand:hover, .navbar-default .navbar-brand:focus {\n  color: #5e5e5e;\n  background-color: transparent;\n}\n.navbar-default .navbar-text {\n  color: #777;\n}\n.navbar-default .navbar-nav > li > a {\n  color: #777;\n}\n.navbar-default .navbar-nav > li > a:hover, .navbar-default .navbar-nav > li > a:focus {\n  color: #333;\n  background-color: transparent;\n}\n.navbar-default .navbar-nav > .active > a, .navbar-default .navbar-nav > .active > a:hover, .navbar-default .navbar-nav > .active > a:focus {\n  color: #555;\n  background-color: #e7e7e7;\n}\n.navbar-default .navbar-nav > .disabled > a, .navbar-default .navbar-nav > .disabled > a:hover, .navbar-default .navbar-nav > .disabled > a:focus {\n  color: #ccc;\n  background-color: transparent;\n}\n.navbar-default .navbar-toggle {\n  border-color: #ddd;\n}\n.navbar-default .navbar-toggle:hover, .navbar-default .navbar-toggle:focus {\n  background-color: #ddd;\n}\n.navbar-default .navbar-toggle .icon-bar {\n  background-color: #888;\n}\n.navbar-default .navbar-collapse, .navbar-default .navbar-form {\n  border-color: #e7e7e7;\n}\n.navbar-default .navbar-nav > .open > a, .navbar-default .navbar-nav > .open > a:hover, .navbar-default .navbar-nav > .open > a:focus {\n  color: #555;\n  background-color: #e7e7e7;\n}\n@media (max-width: 767px) {\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a {\n    color: #777;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > li > a:focus {\n    color: #333;\n    background-color: transparent;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a, .navbar-default .navbar-nav .open .dropdown-menu > .active > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > .active > a:focus {\n    color: #555;\n    background-color: #e7e7e7;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a, .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:hover, .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:focus {\n    color: #ccc;\n    background-color: transparent;\n  }\n}\n.navbar-default .navbar-link {\n  color: #777;\n}\n.navbar-default .navbar-link:hover {\n  color: #333;\n}\n.navbar-default .btn-link {\n  color: #777;\n}\n.navbar-default .btn-link:hover, .navbar-default .btn-link:focus {\n  color: #333;\n}\n.navbar-default .btn-link[disabled]:hover, fieldset[disabled] .navbar-default .btn-link:hover, .navbar-default .btn-link[disabled]:focus, fieldset[disabled] .navbar-default .btn-link:focus {\n  color: #ccc;\n}\n.navbar-inverse {\n  background-color: #222;\n  border-color: #080808;\n}\n.navbar-inverse .navbar-brand {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-brand:hover, .navbar-inverse .navbar-brand:focus {\n  color: #fff;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-text {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-nav > li > a {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-nav > li > a:hover, .navbar-inverse .navbar-nav > li > a:focus {\n  color: #fff;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-nav > .active > a, .navbar-inverse .navbar-nav > .active > a:hover, .navbar-inverse .navbar-nav > .active > a:focus {\n  color: #fff;\n  background-color: #080808;\n}\n.navbar-inverse .navbar-nav > .disabled > a, .navbar-inverse .navbar-nav > .disabled > a:hover, .navbar-inverse .navbar-nav > .disabled > a:focus {\n  color: #444;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-toggle {\n  border-color: #333;\n}\n.navbar-inverse .navbar-toggle:hover, .navbar-inverse .navbar-toggle:focus {\n  background-color: #333;\n}\n.navbar-inverse .navbar-toggle .icon-bar {\n  background-color: #fff;\n}\n.navbar-inverse .navbar-collapse, .navbar-inverse .navbar-form {\n  border-color: #101010;\n}\n.navbar-inverse .navbar-nav > .open > a, .navbar-inverse .navbar-nav > .open > a:hover, .navbar-inverse .navbar-nav > .open > a:focus {\n  color: #fff;\n  background-color: #080808;\n}\n@media (max-width: 767px) {\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header {\n    border-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu .divider {\n    background-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a {\n    color: #9d9d9d;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:focus {\n    color: #fff;\n    background-color: transparent;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a, .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:focus {\n    color: #fff;\n    background-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a, .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:hover, .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:focus {\n    color: #444;\n    background-color: transparent;\n  }\n}\n.navbar-inverse .navbar-link {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-link:hover {\n  color: #fff;\n}\n.navbar-inverse .btn-link {\n  color: #9d9d9d;\n}\n.navbar-inverse .btn-link:hover, .navbar-inverse .btn-link:focus {\n  color: #fff;\n}\n.navbar-inverse .btn-link[disabled]:hover, fieldset[disabled] .navbar-inverse .btn-link:hover, .navbar-inverse .btn-link[disabled]:focus, fieldset[disabled] .navbar-inverse .btn-link:focus {\n  color: #444;\n}\n.breadcrumb {\n  padding: 8px 15px;\n  margin-bottom: 20px;\n  list-style: none;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n}\n.breadcrumb > li {\n  display: inline-block;\n}\n.breadcrumb > li + li:before {\n  padding: 0 5px;\n  color: #ccc;\n  content: \"/\\A0\";\n}\n.breadcrumb > .active {\n  color: #777;\n}\n.pagination {\n  display: inline-block;\n  padding-left: 0;\n  margin: 20px 0;\n  border-radius: 4px;\n}\n.pagination > li {\n  display: inline;\n}\n.pagination > li > a, .pagination > li > span {\n  position: relative;\n  float: left;\n  padding: 6px 12px;\n  margin-left: -1px;\n  line-height: 1.42857143;\n  color: #337ab7;\n  text-decoration: none;\n  background-color: #fff;\n  border: 1px solid #ddd;\n}\n.pagination > li:first-child > a, .pagination > li:first-child > span {\n  margin-left: 0;\n  border-top-left-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.pagination > li:last-child > a, .pagination > li:last-child > span {\n  border-top-right-radius: 4px;\n  border-bottom-right-radius: 4px;\n}\n.pagination > li > a:hover, .pagination > li > span:hover, .pagination > li > a:focus, .pagination > li > span:focus {\n  z-index: 2;\n  color: #23527c;\n  background-color: #eee;\n  border-color: #ddd;\n}\n.pagination > .active > a, .pagination > .active > span, .pagination > .active > a:hover, .pagination > .active > span:hover, .pagination > .active > a:focus, .pagination > .active > span:focus {\n  z-index: 3;\n  color: #fff;\n  cursor: default;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n.pagination > .disabled > span, .pagination > .disabled > span:hover, .pagination > .disabled > span:focus, .pagination > .disabled > a, .pagination > .disabled > a:hover, .pagination > .disabled > a:focus {\n  color: #777;\n  cursor: not-allowed;\n  background-color: #fff;\n  border-color: #ddd;\n}\n.pagination-lg > li > a, .pagination-lg > li > span {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.pagination-lg > li:first-child > a, .pagination-lg > li:first-child > span {\n  border-top-left-radius: 6px;\n  border-bottom-left-radius: 6px;\n}\n.pagination-lg > li:last-child > a, .pagination-lg > li:last-child > span {\n  border-top-right-radius: 6px;\n  border-bottom-right-radius: 6px;\n}\n.pagination-sm > li > a, .pagination-sm > li > span {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n.pagination-sm > li:first-child > a, .pagination-sm > li:first-child > span {\n  border-top-left-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.pagination-sm > li:last-child > a, .pagination-sm > li:last-child > span {\n  border-top-right-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n.pager {\n  padding-left: 0;\n  margin: 20px 0;\n  text-align: center;\n  list-style: none;\n}\n.pager li {\n  display: inline;\n}\n.pager li > a, .pager li > span {\n  display: inline-block;\n  padding: 5px 14px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 15px;\n}\n.pager li > a:hover, .pager li > a:focus {\n  text-decoration: none;\n  background-color: #eee;\n}\n.pager .next > a, .pager .next > span {\n  float: right;\n}\n.pager .previous > a, .pager .previous > span {\n  float: left;\n}\n.pager .disabled > a, .pager .disabled > a:hover, .pager .disabled > a:focus, .pager .disabled > span {\n  color: #777;\n  cursor: not-allowed;\n  background-color: #fff;\n}\n.label {\n  display: inline;\n  padding: .2em .6em .3em;\n  font-size: 75%;\n  font-weight: bold;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: .25em;\n}\na.label:hover, a.label:focus {\n  color: #fff;\n  text-decoration: none;\n  cursor: pointer;\n}\n.label:empty {\n  display: none;\n}\n.btn .label {\n  position: relative;\n  top: -1px;\n}\n.label-default {\n  background-color: #777;\n}\n.label-default[href]:hover, .label-default[href]:focus {\n  background-color: #5e5e5e;\n}\n.label-primary {\n  background-color: #337ab7;\n}\n.label-primary[href]:hover, .label-primary[href]:focus {\n  background-color: #286090;\n}\n.label-success {\n  background-color: #5cb85c;\n}\n.label-success[href]:hover, .label-success[href]:focus {\n  background-color: #449d44;\n}\n.label-info {\n  background-color: #5bc0de;\n}\n.label-info[href]:hover, .label-info[href]:focus {\n  background-color: #31b0d5;\n}\n.label-warning {\n  background-color: #f0ad4e;\n}\n.label-warning[href]:hover, .label-warning[href]:focus {\n  background-color: #ec971f;\n}\n.label-danger {\n  background-color: #d9534f;\n}\n.label-danger[href]:hover, .label-danger[href]:focus {\n  background-color: #c9302c;\n}\n.badge {\n  display: inline-block;\n  min-width: 10px;\n  padding: 3px 7px;\n  font-size: 12px;\n  font-weight: bold;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  background-color: #777;\n  border-radius: 10px;\n}\n.badge:empty {\n  display: none;\n}\n.btn .badge {\n  position: relative;\n  top: -1px;\n}\n.btn-xs .badge, .btn-group-xs > .btn .badge {\n  top: 0;\n  padding: 1px 5px;\n}\na.badge:hover, a.badge:focus {\n  color: #fff;\n  text-decoration: none;\n  cursor: pointer;\n}\n.list-group-item.active > .badge, .nav-pills > .active > a > .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n.list-group-item > .badge {\n  float: right;\n}\n.list-group-item > .badge + .badge {\n  margin-right: 5px;\n}\n.nav-pills > li > a > .badge {\n  margin-left: 3px;\n}\n.jumbotron {\n  padding-top: 30px;\n  padding-bottom: 30px;\n  margin-bottom: 30px;\n  color: inherit;\n  background-color: #eee;\n}\n.jumbotron h1, .jumbotron .h1 {\n  color: inherit;\n}\n.jumbotron p {\n  margin-bottom: 15px;\n  font-size: 21px;\n  font-weight: 200;\n}\n.jumbotron > hr {\n  border-top-color: #d5d5d5;\n}\n.container .jumbotron, .container-fluid .jumbotron {\n  padding-right: 15px;\n  padding-left: 15px;\n  border-radius: 6px;\n}\n.jumbotron .container {\n  max-width: 100%;\n}\n@media screen and (min-width: 768px) {\n  .jumbotron {\n    padding-top: 48px;\n    padding-bottom: 48px;\n  }\n  .container .jumbotron, .container-fluid .jumbotron {\n    padding-right: 60px;\n    padding-left: 60px;\n  }\n  .jumbotron h1, .jumbotron .h1 {\n    font-size: 63px;\n  }\n}\n.thumbnail {\n  display: block;\n  padding: 4px;\n  margin-bottom: 20px;\n  line-height: 1.42857143;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  -webkit-transition: border .2s ease-in-out;\n          transition: border .2s ease-in-out;\n}\n.thumbnail > img, .thumbnail a > img {\n  margin-right: auto;\n  margin-left: auto;\n}\na.thumbnail:hover, a.thumbnail:focus, a.thumbnail.active {\n  border-color: #337ab7;\n}\n.thumbnail .caption {\n  padding: 9px;\n  color: #333;\n}\n.alert {\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.alert h4 {\n  margin-top: 0;\n  color: inherit;\n}\n.alert .alert-link {\n  font-weight: bold;\n}\n.alert > p, .alert > ul {\n  margin-bottom: 0;\n}\n.alert > p + p {\n  margin-top: 5px;\n}\n.alert-dismissable, .alert-dismissible {\n  padding-right: 35px;\n}\n.alert-dismissable .close, .alert-dismissible .close {\n  position: relative;\n  top: -2px;\n  right: -21px;\n  color: inherit;\n}\n.alert-success {\n  color: #3c763d;\n  background-color: #dff0d8;\n  border-color: #d6e9c6;\n}\n.alert-success hr {\n  border-top-color: #c9e2b3;\n}\n.alert-success .alert-link {\n  color: #2b542c;\n}\n.alert-info {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n}\n.alert-info hr {\n  border-top-color: #a6e1ec;\n}\n.alert-info .alert-link {\n  color: #245269;\n}\n.alert-warning {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #faebcc;\n}\n.alert-warning hr {\n  border-top-color: #f7e1b5;\n}\n.alert-warning .alert-link {\n  color: #66512c;\n}\n.alert-danger {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #ebccd1;\n}\n.alert-danger hr {\n  border-top-color: #e4b9c0;\n}\n.alert-danger .alert-link {\n  color: #843534;\n}\n@-webkit-keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n@keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n.progress {\n  height: 20px;\n  margin-bottom: 20px;\n  overflow: hidden;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n  box-shadow: inset 0 1px 2px rgba(0, 0, 0, .1);\n}\n.progress-bar {\n  float: left;\n  width: 0;\n  height: 100%;\n  font-size: 12px;\n  line-height: 20px;\n  color: #fff;\n  text-align: center;\n  background-color: #337ab7;\n  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, .15);\n  -webkit-transition: width .6s ease;\n          transition: width .6s ease;\n}\n.progress-striped .progress-bar, .progress-bar-striped {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-size: 40px 40px;\n}\n.progress.active .progress-bar, .progress-bar.active {\n  -webkit-animation: progress-bar-stripes 2s linear infinite;\n          animation: progress-bar-stripes 2s linear infinite;\n}\n.progress-bar-success {\n  background-color: #5cb85c;\n}\n.progress-striped .progress-bar-success {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n}\n.progress-bar-info {\n  background-color: #5bc0de;\n}\n.progress-striped .progress-bar-info {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n}\n.progress-bar-warning {\n  background-color: #f0ad4e;\n}\n.progress-striped .progress-bar-warning {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n}\n.progress-bar-danger {\n  background-color: #d9534f;\n}\n.progress-striped .progress-bar-danger {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n  background-image:         linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);\n}\n.media {\n  margin-top: 15px;\n}\n.media:first-child {\n  margin-top: 0;\n}\n.media, .media-body {\n  overflow: hidden;\n  zoom: 1;\n}\n.media-body {\n  width: 10000px;\n}\n.media-object {\n  display: block;\n}\n.media-object.img-thumbnail {\n  max-width: none;\n}\n.media-right, .media > .pull-right {\n  padding-left: 10px;\n}\n.media-left, .media > .pull-left {\n  padding-right: 10px;\n}\n.media-left, .media-right, .media-body {\n  display: table-cell;\n  vertical-align: top;\n}\n.media-middle {\n  vertical-align: middle;\n}\n.media-bottom {\n  vertical-align: bottom;\n}\n.media-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n.media-list {\n  padding-left: 0;\n  list-style: none;\n}\n.list-group {\n  padding-left: 0;\n  margin-bottom: 20px;\n}\n.list-group-item {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n  margin-bottom: -1px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n}\n.list-group-item:first-child {\n  border-top-left-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.list-group-item:last-child {\n  margin-bottom: 0;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\na.list-group-item, button.list-group-item {\n  color: #555;\n}\na.list-group-item .list-group-item-heading, button.list-group-item .list-group-item-heading {\n  color: #333;\n}\na.list-group-item:hover, button.list-group-item:hover, a.list-group-item:focus, button.list-group-item:focus {\n  color: #555;\n  text-decoration: none;\n  background-color: #f5f5f5;\n}\nbutton.list-group-item {\n  width: 100%;\n  text-align: left;\n}\n.list-group-item.disabled, .list-group-item.disabled:hover, .list-group-item.disabled:focus {\n  color: #777;\n  cursor: not-allowed;\n  background-color: #eee;\n}\n.list-group-item.disabled .list-group-item-heading, .list-group-item.disabled:hover .list-group-item-heading, .list-group-item.disabled:focus .list-group-item-heading {\n  color: inherit;\n}\n.list-group-item.disabled .list-group-item-text, .list-group-item.disabled:hover .list-group-item-text, .list-group-item.disabled:focus .list-group-item-text {\n  color: #777;\n}\n.list-group-item.active, .list-group-item.active:hover, .list-group-item.active:focus {\n  z-index: 2;\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n.list-group-item.active .list-group-item-heading, .list-group-item.active:hover .list-group-item-heading, .list-group-item.active:focus .list-group-item-heading, .list-group-item.active .list-group-item-heading > small, .list-group-item.active:hover .list-group-item-heading > small, .list-group-item.active:focus .list-group-item-heading > small, .list-group-item.active .list-group-item-heading > .small, .list-group-item.active:hover .list-group-item-heading > .small, .list-group-item.active:focus .list-group-item-heading > .small {\n  color: inherit;\n}\n.list-group-item.active .list-group-item-text, .list-group-item.active:hover .list-group-item-text, .list-group-item.active:focus .list-group-item-text {\n  color: #c7ddef;\n}\n.list-group-item-success {\n  color: #3c763d;\n  background-color: #dff0d8;\n}\na.list-group-item-success, button.list-group-item-success {\n  color: #3c763d;\n}\na.list-group-item-success .list-group-item-heading, button.list-group-item-success .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-success:hover, button.list-group-item-success:hover, a.list-group-item-success:focus, button.list-group-item-success:focus {\n  color: #3c763d;\n  background-color: #d0e9c6;\n}\na.list-group-item-success.active, button.list-group-item-success.active, a.list-group-item-success.active:hover, button.list-group-item-success.active:hover, a.list-group-item-success.active:focus, button.list-group-item-success.active:focus {\n  color: #fff;\n  background-color: #3c763d;\n  border-color: #3c763d;\n}\n.list-group-item-info {\n  color: #31708f;\n  background-color: #d9edf7;\n}\na.list-group-item-info, button.list-group-item-info {\n  color: #31708f;\n}\na.list-group-item-info .list-group-item-heading, button.list-group-item-info .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-info:hover, button.list-group-item-info:hover, a.list-group-item-info:focus, button.list-group-item-info:focus {\n  color: #31708f;\n  background-color: #c4e3f3;\n}\na.list-group-item-info.active, button.list-group-item-info.active, a.list-group-item-info.active:hover, button.list-group-item-info.active:hover, a.list-group-item-info.active:focus, button.list-group-item-info.active:focus {\n  color: #fff;\n  background-color: #31708f;\n  border-color: #31708f;\n}\n.list-group-item-warning {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n}\na.list-group-item-warning, button.list-group-item-warning {\n  color: #8a6d3b;\n}\na.list-group-item-warning .list-group-item-heading, button.list-group-item-warning .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-warning:hover, button.list-group-item-warning:hover, a.list-group-item-warning:focus, button.list-group-item-warning:focus {\n  color: #8a6d3b;\n  background-color: #faf2cc;\n}\na.list-group-item-warning.active, button.list-group-item-warning.active, a.list-group-item-warning.active:hover, button.list-group-item-warning.active:hover, a.list-group-item-warning.active:focus, button.list-group-item-warning.active:focus {\n  color: #fff;\n  background-color: #8a6d3b;\n  border-color: #8a6d3b;\n}\n.list-group-item-danger {\n  color: #a94442;\n  background-color: #f2dede;\n}\na.list-group-item-danger, button.list-group-item-danger {\n  color: #a94442;\n}\na.list-group-item-danger .list-group-item-heading, button.list-group-item-danger .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-danger:hover, button.list-group-item-danger:hover, a.list-group-item-danger:focus, button.list-group-item-danger:focus {\n  color: #a94442;\n  background-color: #ebcccc;\n}\na.list-group-item-danger.active, button.list-group-item-danger.active, a.list-group-item-danger.active:hover, button.list-group-item-danger.active:hover, a.list-group-item-danger.active:focus, button.list-group-item-danger.active:focus {\n  color: #fff;\n  background-color: #a94442;\n  border-color: #a94442;\n}\n.list-group-item-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n.list-group-item-text {\n  margin-bottom: 0;\n  line-height: 1.3;\n}\n.panel {\n  margin-bottom: 20px;\n  background-color: #fff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  box-shadow: 0 1px 1px rgba(0, 0, 0, .05);\n}\n.panel-body {\n  padding: 15px;\n}\n.panel-heading {\n  padding: 10px 15px;\n  border-bottom: 1px solid transparent;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel-heading > .dropdown .dropdown-toggle {\n  color: inherit;\n}\n.panel-title {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-size: 16px;\n  color: inherit;\n}\n.panel-title > a, .panel-title > small, .panel-title > .small, .panel-title > small > a, .panel-title > .small > a {\n  color: inherit;\n}\n.panel-footer {\n  padding: 10px 15px;\n  background-color: #f5f5f5;\n  border-top: 1px solid #ddd;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .list-group, .panel > .panel-collapse > .list-group {\n  margin-bottom: 0;\n}\n.panel > .list-group .list-group-item, .panel > .panel-collapse > .list-group .list-group-item {\n  border-width: 1px 0;\n  border-radius: 0;\n}\n.panel > .list-group:first-child .list-group-item:first-child, .panel > .panel-collapse > .list-group:first-child .list-group-item:first-child {\n  border-top: 0;\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel > .list-group:last-child .list-group-item:last-child, .panel > .panel-collapse > .list-group:last-child .list-group-item:last-child {\n  border-bottom: 0;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .panel-heading + .panel-collapse > .list-group .list-group-item:first-child {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n.panel-heading + .list-group .list-group-item:first-child {\n  border-top-width: 0;\n}\n.list-group + .panel-footer {\n  border-top-width: 0;\n}\n.panel > .table, .panel > .table-responsive > .table, .panel > .panel-collapse > .table {\n  margin-bottom: 0;\n}\n.panel > .table caption, .panel > .table-responsive > .table caption, .panel > .panel-collapse > .table caption {\n  padding-right: 15px;\n  padding-left: 15px;\n}\n.panel > .table:first-child, .panel > .table-responsive:first-child > .table:first-child {\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child, .panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child, .panel > .table:first-child > tbody:first-child > tr:first-child, .panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child {\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child td:first-child, .panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:first-child, .panel > .table:first-child > tbody:first-child > tr:first-child td:first-child, .panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:first-child, .panel > .table:first-child > thead:first-child > tr:first-child th:first-child, .panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:first-child, .panel > .table:first-child > tbody:first-child > tr:first-child th:first-child, .panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:first-child {\n  border-top-left-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child td:last-child, .panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:last-child, .panel > .table:first-child > tbody:first-child > tr:first-child td:last-child, .panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:last-child, .panel > .table:first-child > thead:first-child > tr:first-child th:last-child, .panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:last-child, .panel > .table:first-child > tbody:first-child > tr:first-child th:last-child, .panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:last-child {\n  border-top-right-radius: 3px;\n}\n.panel > .table:last-child, .panel > .table-responsive:last-child > .table:last-child {\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child, .panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child, .panel > .table:last-child > tfoot:last-child > tr:last-child, .panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child {\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child td:first-child, .panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:first-child, .panel > .table:last-child > tfoot:last-child > tr:last-child td:first-child, .panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:first-child, .panel > .table:last-child > tbody:last-child > tr:last-child th:first-child, .panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:first-child, .panel > .table:last-child > tfoot:last-child > tr:last-child th:first-child, .panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:first-child {\n  border-bottom-left-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child td:last-child, .panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:last-child, .panel > .table:last-child > tfoot:last-child > tr:last-child td:last-child, .panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:last-child, .panel > .table:last-child > tbody:last-child > tr:last-child th:last-child, .panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:last-child, .panel > .table:last-child > tfoot:last-child > tr:last-child th:last-child, .panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:last-child {\n  border-bottom-right-radius: 3px;\n}\n.panel > .panel-body + .table, .panel > .panel-body + .table-responsive, .panel > .table + .panel-body, .panel > .table-responsive + .panel-body {\n  border-top: 1px solid #ddd;\n}\n.panel > .table > tbody:first-child > tr:first-child th, .panel > .table > tbody:first-child > tr:first-child td {\n  border-top: 0;\n}\n.panel > .table-bordered, .panel > .table-responsive > .table-bordered {\n  border: 0;\n}\n.panel > .table-bordered > thead > tr > th:first-child, .panel > .table-responsive > .table-bordered > thead > tr > th:first-child, .panel > .table-bordered > tbody > tr > th:first-child, .panel > .table-responsive > .table-bordered > tbody > tr > th:first-child, .panel > .table-bordered > tfoot > tr > th:first-child, .panel > .table-responsive > .table-bordered > tfoot > tr > th:first-child, .panel > .table-bordered > thead > tr > td:first-child, .panel > .table-responsive > .table-bordered > thead > tr > td:first-child, .panel > .table-bordered > tbody > tr > td:first-child, .panel > .table-responsive > .table-bordered > tbody > tr > td:first-child, .panel > .table-bordered > tfoot > tr > td:first-child, .panel > .table-responsive > .table-bordered > tfoot > tr > td:first-child {\n  border-left: 0;\n}\n.panel > .table-bordered > thead > tr > th:last-child, .panel > .table-responsive > .table-bordered > thead > tr > th:last-child, .panel > .table-bordered > tbody > tr > th:last-child, .panel > .table-responsive > .table-bordered > tbody > tr > th:last-child, .panel > .table-bordered > tfoot > tr > th:last-child, .panel > .table-responsive > .table-bordered > tfoot > tr > th:last-child, .panel > .table-bordered > thead > tr > td:last-child, .panel > .table-responsive > .table-bordered > thead > tr > td:last-child, .panel > .table-bordered > tbody > tr > td:last-child, .panel > .table-responsive > .table-bordered > tbody > tr > td:last-child, .panel > .table-bordered > tfoot > tr > td:last-child, .panel > .table-responsive > .table-bordered > tfoot > tr > td:last-child {\n  border-right: 0;\n}\n.panel > .table-bordered > thead > tr:first-child > td, .panel > .table-responsive > .table-bordered > thead > tr:first-child > td, .panel > .table-bordered > tbody > tr:first-child > td, .panel > .table-responsive > .table-bordered > tbody > tr:first-child > td, .panel > .table-bordered > thead > tr:first-child > th, .panel > .table-responsive > .table-bordered > thead > tr:first-child > th, .panel > .table-bordered > tbody > tr:first-child > th, .panel > .table-responsive > .table-bordered > tbody > tr:first-child > th {\n  border-bottom: 0;\n}\n.panel > .table-bordered > tbody > tr:last-child > td, .panel > .table-responsive > .table-bordered > tbody > tr:last-child > td, .panel > .table-bordered > tfoot > tr:last-child > td, .panel > .table-responsive > .table-bordered > tfoot > tr:last-child > td, .panel > .table-bordered > tbody > tr:last-child > th, .panel > .table-responsive > .table-bordered > tbody > tr:last-child > th, .panel > .table-bordered > tfoot > tr:last-child > th, .panel > .table-responsive > .table-bordered > tfoot > tr:last-child > th {\n  border-bottom: 0;\n}\n.panel > .table-responsive {\n  margin-bottom: 0;\n  border: 0;\n}\n.panel-group {\n  margin-bottom: 20px;\n}\n.panel-group .panel {\n  margin-bottom: 0;\n  border-radius: 4px;\n}\n.panel-group .panel + .panel {\n  margin-top: 5px;\n}\n.panel-group .panel-heading {\n  border-bottom: 0;\n}\n.panel-group .panel-heading + .panel-collapse > .panel-body, .panel-group .panel-heading + .panel-collapse > .list-group {\n  border-top: 1px solid #ddd;\n}\n.panel-group .panel-footer {\n  border-top: 0;\n}\n.panel-group .panel-footer + .panel-collapse .panel-body {\n  border-bottom: 1px solid #ddd;\n}\n.panel-default {\n  border-color: #ddd;\n}\n.panel-default > .panel-heading {\n  color: #333;\n  background-color: #f5f5f5;\n  border-color: #ddd;\n}\n.panel-default > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #ddd;\n}\n.panel-default > .panel-heading .badge {\n  color: #f5f5f5;\n  background-color: #333;\n}\n.panel-default > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #ddd;\n}\n.panel-primary {\n  border-color: #337ab7;\n}\n.panel-primary > .panel-heading {\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n.panel-primary > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #337ab7;\n}\n.panel-primary > .panel-heading .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n.panel-primary > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #337ab7;\n}\n.panel-success {\n  border-color: #d6e9c6;\n}\n.panel-success > .panel-heading {\n  color: #3c763d;\n  background-color: #dff0d8;\n  border-color: #d6e9c6;\n}\n.panel-success > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #d6e9c6;\n}\n.panel-success > .panel-heading .badge {\n  color: #dff0d8;\n  background-color: #3c763d;\n}\n.panel-success > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #d6e9c6;\n}\n.panel-info {\n  border-color: #bce8f1;\n}\n.panel-info > .panel-heading {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n}\n.panel-info > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #bce8f1;\n}\n.panel-info > .panel-heading .badge {\n  color: #d9edf7;\n  background-color: #31708f;\n}\n.panel-info > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #bce8f1;\n}\n.panel-warning {\n  border-color: #faebcc;\n}\n.panel-warning > .panel-heading {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #faebcc;\n}\n.panel-warning > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #faebcc;\n}\n.panel-warning > .panel-heading .badge {\n  color: #fcf8e3;\n  background-color: #8a6d3b;\n}\n.panel-warning > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #faebcc;\n}\n.panel-danger {\n  border-color: #ebccd1;\n}\n.panel-danger > .panel-heading {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #ebccd1;\n}\n.panel-danger > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #ebccd1;\n}\n.panel-danger > .panel-heading .badge {\n  color: #f2dede;\n  background-color: #a94442;\n}\n.panel-danger > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #ebccd1;\n}\n.embed-responsive {\n  position: relative;\n  display: block;\n  height: 0;\n  padding: 0;\n  overflow: hidden;\n}\n.embed-responsive .embed-responsive-item, .embed-responsive iframe, .embed-responsive embed, .embed-responsive object, .embed-responsive video {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: 0;\n}\n.embed-responsive-16by9 {\n  padding-bottom: 56.25%;\n}\n.embed-responsive-4by3 {\n  padding-bottom: 75%;\n}\n.well {\n  min-height: 20px;\n  padding: 19px;\n  margin-bottom: 20px;\n  background-color: #f5f5f5;\n  border: 1px solid #e3e3e3;\n  border-radius: 4px;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, .05);\n}\n.well blockquote {\n  border-color: #ddd;\n  border-color: rgba(0, 0, 0, .15);\n}\n.well-lg {\n  padding: 24px;\n  border-radius: 6px;\n}\n.well-sm {\n  padding: 9px;\n  border-radius: 3px;\n}\n.close {\n  float: right;\n  font-size: 21px;\n  font-weight: bold;\n  line-height: 1;\n  color: #000;\n  text-shadow: 0 1px 0 #fff;\n  filter: alpha(opacity=20);\n  opacity: .2;\n}\n.close:hover, .close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n  filter: alpha(opacity=50);\n  opacity: .5;\n}\nbutton.close {\n  -webkit-appearance: none;\n  padding: 0;\n  cursor: pointer;\n  background: transparent;\n  border: 0;\n}\n.modal-open {\n  overflow: hidden;\n}\n.modal {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1050;\n  display: none;\n  overflow: hidden;\n  -webkit-overflow-scrolling: touch;\n  outline: 0;\n}\n.modal.fade .modal-dialog {\n  -webkit-transition: -webkit-transform .3s ease-out;\n          transition: -webkit-transform .3s ease-out;\n          transition: transform .3s ease-out;\n          transition:         transform .3s ease-out, -webkit-transform .3s ease-out;\n  -webkit-transform: translate(0, -25%);\n          transform: translate(0, -25%);\n}\n.modal.in .modal-dialog {\n  -webkit-transform: translate(0, 0);\n          transform: translate(0, 0);\n}\n.modal-open .modal {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: 10px;\n}\n.modal-content {\n  position: relative;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #999;\n  border: 1px solid rgba(0, 0, 0, .2);\n  border-radius: 6px;\n  outline: 0;\n  box-shadow: 0 3px 9px rgba(0, 0, 0, .5);\n}\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1040;\n  background-color: #000;\n}\n.modal-backdrop.fade {\n  filter: alpha(opacity=0);\n  opacity: 0;\n}\n.modal-backdrop.in {\n  filter: alpha(opacity=50);\n  opacity: .5;\n}\n.modal-header {\n  padding: 15px;\n  border-bottom: 1px solid #e5e5e5;\n}\n.modal-header .close {\n  margin-top: -2px;\n}\n.modal-title {\n  margin: 0;\n  line-height: 1.42857143;\n}\n.modal-body {\n  position: relative;\n  padding: 15px;\n}\n.modal-footer {\n  padding: 15px;\n  text-align: right;\n  border-top: 1px solid #e5e5e5;\n}\n.modal-footer .btn + .btn {\n  margin-bottom: 0;\n  margin-left: 5px;\n}\n.modal-footer .btn-group .btn + .btn {\n  margin-left: -1px;\n}\n.modal-footer .btn-block + .btn-block {\n  margin-left: 0;\n}\n.modal-scrollbar-measure {\n  position: absolute;\n  top: -9999px;\n  width: 50px;\n  height: 50px;\n  overflow: scroll;\n}\n@media (min-width: 768px) {\n  .modal-dialog {\n    width: 600px;\n    margin: 30px auto;\n  }\n  .modal-content {\n    box-shadow: 0 5px 15px rgba(0, 0, 0, .5);\n  }\n  .modal-sm {\n    width: 300px;\n  }\n}\n@media (min-width: 992px) {\n  .modal-lg {\n    width: 900px;\n  }\n}\n.tooltip {\n  position: absolute;\n  z-index: 1070;\n  display: block;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1.42857143;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  white-space: normal;\n  filter: alpha(opacity=0);\n  opacity: 0;\n\n  line-break: auto;\n}\n.tooltip.in {\n  filter: alpha(opacity=90);\n  opacity: .9;\n}\n.tooltip.top {\n  padding: 5px 0;\n  margin-top: -3px;\n}\n.tooltip.right {\n  padding: 0 5px;\n  margin-left: 3px;\n}\n.tooltip.bottom {\n  padding: 5px 0;\n  margin-top: 3px;\n}\n.tooltip.left {\n  padding: 0 5px;\n  margin-left: -3px;\n}\n.tooltip-inner {\n  max-width: 200px;\n  padding: 3px 8px;\n  color: #fff;\n  text-align: center;\n  background-color: #000;\n  border-radius: 4px;\n}\n.tooltip-arrow {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.tooltip.top .tooltip-arrow {\n  bottom: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n.tooltip.top-left .tooltip-arrow {\n  right: 5px;\n  bottom: 0;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n.tooltip.top-right .tooltip-arrow {\n  bottom: 0;\n  left: 5px;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n.tooltip.right .tooltip-arrow {\n  top: 50%;\n  left: 0;\n  margin-top: -5px;\n  border-width: 5px 5px 5px 0;\n  border-right-color: #000;\n}\n.tooltip.left .tooltip-arrow {\n  top: 50%;\n  right: 0;\n  margin-top: -5px;\n  border-width: 5px 0 5px 5px;\n  border-left-color: #000;\n}\n.tooltip.bottom .tooltip-arrow {\n  top: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n.tooltip.bottom-left .tooltip-arrow {\n  top: 0;\n  right: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n.tooltip.bottom-right .tooltip-arrow {\n  top: 0;\n  left: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n.popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1060;\n  display: none;\n  max-width: 276px;\n  padding: 1px;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1.42857143;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  letter-spacing: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  white-space: normal;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, .2);\n  border-radius: 6px;\n  box-shadow: 0 5px 10px rgba(0, 0, 0, .2);\n\n  line-break: auto;\n}\n.popover.top {\n  margin-top: -10px;\n}\n.popover.right {\n  margin-left: 10px;\n}\n.popover.bottom {\n  margin-top: 10px;\n}\n.popover.left {\n  margin-left: -10px;\n}\n.popover-title {\n  padding: 8px 14px;\n  margin: 0;\n  font-size: 14px;\n  background-color: #f7f7f7;\n  border-bottom: 1px solid #ebebeb;\n  border-radius: 5px 5px 0 0;\n}\n.popover-content {\n  padding: 9px 14px;\n}\n.popover > .arrow, .popover > .arrow:after {\n  position: absolute;\n  display: block;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.popover > .arrow {\n  border-width: 11px;\n}\n.popover > .arrow:after {\n  content: \"\";\n  border-width: 10px;\n}\n.popover.top > .arrow {\n  bottom: -11px;\n  left: 50%;\n  margin-left: -11px;\n  border-top-color: #999;\n  border-top-color: rgba(0, 0, 0, .25);\n  border-bottom-width: 0;\n}\n.popover.top > .arrow:after {\n  bottom: 1px;\n  margin-left: -10px;\n  content: \" \";\n  border-top-color: #fff;\n  border-bottom-width: 0;\n}\n.popover.right > .arrow {\n  top: 50%;\n  left: -11px;\n  margin-top: -11px;\n  border-right-color: #999;\n  border-right-color: rgba(0, 0, 0, .25);\n  border-left-width: 0;\n}\n.popover.right > .arrow:after {\n  bottom: -10px;\n  left: 1px;\n  content: \" \";\n  border-right-color: #fff;\n  border-left-width: 0;\n}\n.popover.bottom > .arrow {\n  top: -11px;\n  left: 50%;\n  margin-left: -11px;\n  border-top-width: 0;\n  border-bottom-color: #999;\n  border-bottom-color: rgba(0, 0, 0, .25);\n}\n.popover.bottom > .arrow:after {\n  top: 1px;\n  margin-left: -10px;\n  content: \" \";\n  border-top-width: 0;\n  border-bottom-color: #fff;\n}\n.popover.left > .arrow {\n  top: 50%;\n  right: -11px;\n  margin-top: -11px;\n  border-right-width: 0;\n  border-left-color: #999;\n  border-left-color: rgba(0, 0, 0, .25);\n}\n.popover.left > .arrow:after {\n  right: 1px;\n  bottom: -10px;\n  content: \" \";\n  border-right-width: 0;\n  border-left-color: #fff;\n}\n.carousel {\n  position: relative;\n}\n.carousel-inner {\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n}\n.carousel-inner > .item {\n  position: relative;\n  display: none;\n  -webkit-transition: .6s ease-in-out left;\n          transition: .6s ease-in-out left;\n}\n.carousel-inner > .item > img, .carousel-inner > .item > a > img {\n  line-height: 1;\n}\n@media all and (transform-3d), (-webkit-transform-3d) {\n  .carousel-inner > .item {\n    -webkit-transition: -webkit-transform .6s ease-in-out;\n            transition: -webkit-transform .6s ease-in-out;\n            transition: transform .6s ease-in-out;\n            transition:         transform .6s ease-in-out, -webkit-transform .6s ease-in-out;\n\n    -webkit-backface-visibility: hidden;\n            backface-visibility: hidden;\n    -webkit-perspective: 1000px;\n            perspective: 1000px;\n  }\n  .carousel-inner > .item.next, .carousel-inner > .item.active.right {\n    left: 0;\n    -webkit-transform: translate3d(100%, 0, 0);\n            transform: translate3d(100%, 0, 0);\n  }\n  .carousel-inner > .item.prev, .carousel-inner > .item.active.left {\n    left: 0;\n    -webkit-transform: translate3d(-100%, 0, 0);\n            transform: translate3d(-100%, 0, 0);\n  }\n  .carousel-inner > .item.next.left, .carousel-inner > .item.prev.right, .carousel-inner > .item.active {\n    left: 0;\n    -webkit-transform: translate3d(0, 0, 0);\n            transform: translate3d(0, 0, 0);\n  }\n}\n.carousel-inner > .active, .carousel-inner > .next, .carousel-inner > .prev {\n  display: block;\n}\n.carousel-inner > .active {\n  left: 0;\n}\n.carousel-inner > .next, .carousel-inner > .prev {\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n.carousel-inner > .next {\n  left: 100%;\n}\n.carousel-inner > .prev {\n  left: -100%;\n}\n.carousel-inner > .next.left, .carousel-inner > .prev.right {\n  left: 0;\n}\n.carousel-inner > .active.left {\n  left: -100%;\n}\n.carousel-inner > .active.right {\n  left: 100%;\n}\n.carousel-control {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  width: 15%;\n  font-size: 20px;\n  color: #fff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);\n  background-color: rgba(0, 0, 0, 0);\n  filter: alpha(opacity=50);\n  opacity: .5;\n}\n.carousel-control.left {\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);\n  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .5)), to(rgba(0, 0, 0, .0001)));\n  background-image:         linear-gradient(to right, rgba(0, 0, 0, .5) 0%, rgba(0, 0, 0, .0001) 100%);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);\n  background-repeat: repeat-x;\n}\n.carousel-control.right {\n  right: 0;\n  left: auto;\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);\n  background-image: -webkit-gradient(linear, left top, right top, from(rgba(0, 0, 0, .0001)), to(rgba(0, 0, 0, .5)));\n  background-image:         linear-gradient(to right, rgba(0, 0, 0, .0001) 0%, rgba(0, 0, 0, .5) 100%);\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);\n  background-repeat: repeat-x;\n}\n.carousel-control:hover, .carousel-control:focus {\n  color: #fff;\n  text-decoration: none;\n  filter: alpha(opacity=90);\n  outline: 0;\n  opacity: .9;\n}\n.carousel-control .icon-prev, .carousel-control .icon-next, .carousel-control .glyphicon-chevron-left, .carousel-control .glyphicon-chevron-right {\n  position: absolute;\n  top: 50%;\n  z-index: 5;\n  display: inline-block;\n  margin-top: -10px;\n}\n.carousel-control .icon-prev, .carousel-control .glyphicon-chevron-left {\n  left: 50%;\n  margin-left: -10px;\n}\n.carousel-control .icon-next, .carousel-control .glyphicon-chevron-right {\n  right: 50%;\n  margin-right: -10px;\n}\n.carousel-control .icon-prev, .carousel-control .icon-next {\n  width: 20px;\n  height: 20px;\n  font-family: serif;\n  line-height: 1;\n}\n.carousel-control .icon-prev:before {\n  content: '\\2039';\n}\n.carousel-control .icon-next:before {\n  content: '\\203A';\n}\n.carousel-indicators {\n  position: absolute;\n  bottom: 10px;\n  left: 50%;\n  z-index: 15;\n  width: 60%;\n  padding-left: 0;\n  margin-left: -30%;\n  text-align: center;\n  list-style: none;\n}\n.carousel-indicators li {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  margin: 1px;\n  text-indent: -999px;\n  cursor: pointer;\n  background-color: #000 \\9;\n  background-color: rgba(0, 0, 0, 0);\n  border: 1px solid #fff;\n  border-radius: 10px;\n}\n.carousel-indicators .active {\n  width: 12px;\n  height: 12px;\n  margin: 0;\n  background-color: #fff;\n}\n.carousel-caption {\n  position: absolute;\n  right: 15%;\n  bottom: 20px;\n  left: 15%;\n  z-index: 10;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  color: #fff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, .6);\n}\n.carousel-caption .btn {\n  text-shadow: none;\n}\n@media screen and (min-width: 768px) {\n  .carousel-control .glyphicon-chevron-left, .carousel-control .glyphicon-chevron-right, .carousel-control .icon-prev, .carousel-control .icon-next {\n    width: 30px;\n    height: 30px;\n    margin-top: -10px;\n    font-size: 30px;\n  }\n  .carousel-control .glyphicon-chevron-left, .carousel-control .icon-prev {\n    margin-left: -10px;\n  }\n  .carousel-control .glyphicon-chevron-right, .carousel-control .icon-next {\n    margin-right: -10px;\n  }\n  .carousel-caption {\n    right: 20%;\n    left: 20%;\n    padding-bottom: 30px;\n  }\n  .carousel-indicators {\n    bottom: 20px;\n  }\n}\n.clearfix:before, .clearfix:after, .dl-horizontal dd:before, .dl-horizontal dd:after, .container:before, .container:after, .container-fluid:before, .container-fluid:after, .row:before, .row:after, .form-horizontal .form-group:before, .form-horizontal .form-group:after, .btn-toolbar:before, .btn-toolbar:after, .btn-group-vertical > .btn-group:before, .btn-group-vertical > .btn-group:after, .nav:before, .nav:after, .navbar:before, .navbar:after, .navbar-header:before, .navbar-header:after, .navbar-collapse:before, .navbar-collapse:after, .pager:before, .pager:after, .panel-body:before, .panel-body:after, .modal-header:before, .modal-header:after, .modal-footer:before, .modal-footer:after {\n  display: table;\n  content: \" \";\n}\n.clearfix:after, .dl-horizontal dd:after, .container:after, .container-fluid:after, .row:after, .form-horizontal .form-group:after, .btn-toolbar:after, .btn-group-vertical > .btn-group:after, .nav:after, .navbar:after, .navbar-header:after, .navbar-collapse:after, .pager:after, .panel-body:after, .modal-header:after, .modal-footer:after {\n  clear: both;\n}\n.center-block {\n  display: block;\n  margin-right: auto;\n  margin-left: auto;\n}\n.pull-right {\n  float: right !important;\n}\n.pull-left {\n  float: left !important;\n}\n.hide {\n  display: none !important;\n}\n.show {\n  display: block !important;\n}\n.invisible {\n  visibility: hidden;\n}\n.text-hide {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n.hidden {\n  display: none !important;\n}\n.affix {\n  position: fixed;\n}\n@-ms-viewport {\n  width: device-width;\n}\n.visible-xs, .visible-sm, .visible-md, .visible-lg {\n  display: none !important;\n}\n.visible-xs-block, .visible-xs-inline, .visible-xs-inline-block, .visible-sm-block, .visible-sm-inline, .visible-sm-inline-block, .visible-md-block, .visible-md-inline, .visible-md-inline-block, .visible-lg-block, .visible-lg-inline, .visible-lg-inline-block {\n  display: none !important;\n}\n@media (max-width: 767px) {\n  .visible-xs {\n    display: block !important;\n  }\n  table.visible-xs {\n    display: table !important;\n  }\n  tr.visible-xs {\n    display: table-row !important;\n  }\n  th.visible-xs, td.visible-xs {\n    display: table-cell !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-block {\n    display: block !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-inline {\n    display: inline !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm {\n    display: block !important;\n  }\n  table.visible-sm {\n    display: table !important;\n  }\n  tr.visible-sm {\n    display: table-row !important;\n  }\n  th.visible-sm, td.visible-sm {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-block {\n    display: block !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md {\n    display: block !important;\n  }\n  table.visible-md {\n    display: table !important;\n  }\n  tr.visible-md {\n    display: table-row !important;\n  }\n  th.visible-md, td.visible-md {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-block {\n    display: block !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg {\n    display: block !important;\n  }\n  table.visible-lg {\n    display: table !important;\n  }\n  tr.visible-lg {\n    display: table-row !important;\n  }\n  th.visible-lg, td.visible-lg {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-block {\n    display: block !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (max-width: 767px) {\n  .hidden-xs {\n    display: none !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .hidden-sm {\n    display: none !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .hidden-md {\n    display: none !important;\n  }\n}\n@media (min-width: 1200px) {\n  .hidden-lg {\n    display: none !important;\n  }\n}\n.visible-print {\n  display: none !important;\n}\n@media print {\n  .visible-print {\n    display: block !important;\n  }\n  table.visible-print {\n    display: table !important;\n  }\n  tr.visible-print {\n    display: table-row !important;\n  }\n  th.visible-print, td.visible-print {\n    display: table-cell !important;\n  }\n}\n.visible-print-block {\n  display: none !important;\n}\n@media print {\n  .visible-print-block {\n    display: block !important;\n  }\n}\n.visible-print-inline {\n  display: none !important;\n}\n@media print {\n  .visible-print-inline {\n    display: inline !important;\n  }\n}\n.visible-print-inline-block {\n  display: none !important;\n}\n@media print {\n  .visible-print-inline-block {\n    display: inline-block !important;\n  }\n}\n@media print {\n  .hidden-print {\n    display: none !important;\n  }\n}\n/*# sourceMappingURL=bootstrap.css.map */\n", ""]);
	
	// exports


/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/f4769f9bdb7466be65088239c12046d1.eot";

/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/448c34a56d699c29117adc64c43affeb.woff2";

/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/fa2772327f55d8198301fdb8bcfc8158.woff";

/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/e18bbf611f2a2e43afc071aa2f4e1512.ttf";

/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fonts/89889688147bd7575d6327160d64e760.svg";

/***/ }
]);
//# sourceMappingURL=vendor.js.map